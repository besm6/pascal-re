user 419900 ะทั5^
dis 67(1234-wr)^
EEB1A3
*name
*call yesmemory
*pascal
(*=p-,t-,s8,u-,y+,k9,l0,d4*)
program pascompl(output, child, pasinput, pasinfor);
%
label 9999;
%
const
    boilerplate = ' PASCAL COMPILER 15.0 (15.02.82)';
%   boilerplate = ' PASCAL BACK TO LIFE (15.08.2017)';
%
    fnSQRT  = 0;  fnSIN  = 1;  fnCOS  = 2;  fnATAN  = 3;  fnASIN = 4;
    fnLN    = 5;  fnEXP  = 6;  fnABSR = 7;  fnTRUNC = 8;  fnODD  = 9;
    fnORD   = 10; fnCHR  = 11; fnSUCC = 12; fnPRED  = 13; fnEOF  = 14;
    fnREF   = 15; fnEOLN = 16; fnSQRR = 17; fnROUND = 18; fnCARD = 19;
    fnMINEL = 20; fnPTR  = 21; fnABSI = 22; fnSQRI  = 23;
%
    S3 = 0;
    S4 = 1;
    S5 = 2;
    S6 = 3;
    NoPtrCheck = 4;
    NoStackCheck = 5;
%
    DebugInteractive = 44;
    DebugCode  = 45;
    DebugPrint = 46;
    DebugEntry = 47;
%
    ASN64 = 360100B;
%
    errBooleanNeeded = 0;
    errIdentAlreadyDefined = 2;
    errNoIdent = 3;
    errNotAType = 4;
    errNoConstant = 6;
    errConstOfOtherTypeNeeded = 7;
    errTypeMustNotBeFile = 9;
    errNotDefined = 11;
    errBadSymbol = 12;
    errNeedOtherTypesOfOperands = 21;
    errWrongVarTypeBefore = 22;
    errUsingVarAfterIndexingPackedArray = 28;
    errNoSimpleVarForLoop = 30;
    errTooManyArguments = 38;
    errNoCommaOrParenOrTooFewArgs = 41;
    errNumberTooLarge = 43;
    errVarTooComplex = 48;
    errEOFEncountered = 52;
    errFirstDigitInCharLiteralGreaterThan3 = 60;
%
    macro = 100000000B;
    mcMULTI = 7;
    mcODD = 10;
    mcSQRR = 12;
    mcROUND = 11;
    mcMINEL = 15;
    mcSQRI = 13;
    mcCARD = 23;
%
    ASCII0 =    4000007B;
    E1 =        4000010B;
    ZERO =      4000011B;
    MULTMASK =  4000012B;
    MANTISSA =  4000014B;
    MINUS1 =    4000017B;
    PLUS1 =     4000021B;
    BITS15 =    4000022B;
    REAL05 =    4000023B;
    ALLONES =   4000024B;
    HEAPPTR =   4000027B;
    
    KATX =      0000000B;
%   KSTX =      0010000B;
    KXTS =      0030000B;
    KADD =      0040000B;
    KSUB =      0050000B;
    KRSUB =     0060000B;
    KAMX =      0070000B;
    KXTA =      0100000B;
    KAAX =      0110000B;
    KAEX =      0120000B;
    KARX =      0130000B;
    KAVX =      0140000B;
    KAOX =      0150000B;
%   KDIV =      0160000B;
    KMUL =      0170000B;
    KAPX =      0200000B;
    KAUX =      0210000B;
    KACX =      0220000B;
    KANX =      0230000B;
    KYTA =      0310000B;
%   KASN =      0360000B;
    KNTR =      0370000B;
    KATI =      0400000B;
%   KSTI =      0410000B;
    KITA =      0420000B;
    KITS =      0430000B;
    KMTJ =      0440000B;
    KJADDM =    0450000B;
    KE74 =      0740000B;
    KUTC =      2200000B;
    KWTC =      2300000B;
    KVTM =      2400000B;
    KUTM =      2500000B;
%   KUZA =      2600000B;
%   KU1A =      2700000B;
    KUJ =       3000000B;
    KVJM =      3100000B;
    KVZM =      3400000B;
%   KV1M =      3500000B;
    KVLM =      3700000B;
%
    I7 =        34000000B;      (* frame pointer *)
    I8 =        40000000B;      (* const pointer *)
    I9 =        44000000B;      (* temp register *)
    I10 =       50000000B;      (* temp register *)
    I11 =       54000000B;      (* temp register *)
    I12 =       60000000B;      (* temp register *)
    I13 =       64000000B;      (* link register *)
    I14 =       70000000B;      (* temp register *)
    SP =        74000000B;      (* stack pointer, reg 15 *)
%
type
    symbol = (
(*0B*)  IDENT,      INTCONST,   REALCONST,  CHARCONST,
        LTSY,       GTSY,       NOTSY,      LPAREN,
(*10B*) LBRACK,     MULOP,      ADDOP,      RELOP,
        RPAREN,     RBRACK,     COMMA,      SEMICOLON,
(*20B*) PERIOD,     ARROW,      COLON,      BECOMES,
        LABELSY,    CONSTSY,    TYPESY,     VARSY,
(*30B*) FUNCSY,     PROCSY,     SETSY,      PACKEDSY,
        ARRAYSY,    RECORDSY,   FILESY,     BEGINSY,
(*40B*) IFSY,       CASESY,     REPEATSY,   WHILESY,
        FORSY,      WITHSY,     GOTOSY,     ENDSY,
(*50B*) ELSESY,     UNTILSY,    OFSY,       DOSY,
        TOSY,       DOWNTOSY,   THENSY,     SELECTSY,
(*60B*) PROGRAMSY,  OTHERSY,    NOSY
);
%
idclass = (
        TYPEID,     ENUMID,     ROUTINEID,  VARID,
        FORMALID,   FIELDID
);
%
insn = (
(*000*) ATX,   STX,   OP2,   XTS,   ADD,   SUB,   RSUB,  AMX,
(*010*) XTA,   AAX,   AEX,   ARX,   AVX,   AOX,   ADIVX, AMULX,
(*020*) APX,   AUX,   ACX,   ANX,   EADD,  ESUB,  ASX,   XTR,
(*030*) RTE,   YTA,   OP32,  OP33,  EADDI, ESUBI, ASN,   NTR,
(*040*) ATI,   STI,   ITA,   ITS,   MTJ,   JADDM, ELFUN,
(*047*) UTC,   WTC,   VTM,   UTM,   UZA,   U1A,   UJ,    VJM
);
%
setofsys = set of ident .. selectsy;
%
operator = (
    MUL,        RDIVOP,     AMPERS,     IDIVOP,     IMODOP,
    PLUSOP,     MINUSOP,    OROP,       NEOP,       EQOP,
    LTOP,       GEOP,       GTOP,       LEOP,       INOP,
    IMULOP,     IDIVROP,    SETAND,     SETXOR,     SETOR,
    SETSUB,     INTPLUS,    INTMINUS,   badop27,    badop30,
    badop31,    MKRANGE,    badop33,    GETELT,     GETVAR,
    op36,       op37,       GETENUM,    GETFIELD,   DEREF,
    FILEPTR,    op44,       ALNUM,      FCALL,      op47,
    BOUNDS,     TOREAL,     NOTOP,      INEGOP,     RNEGOP,
    STANDPROC,  NOOP
);
%
opgen = (
    gen0,  STORE, LOAD,  gen3,  SETREG,
    gen5,  gen6,  gen7,  gen8,  gen9,
    gen10, gen11, gen12, FILEACCESS, gen14,
    gen15, gen16, LITINSN
);
%
opflg = (
    opf0, opf1, opf2, opf3, opf4, opf5, opf6, opf7, opf8
);
%
kind = (
    kindReal, kindScalar, kindRange, kindPtr,
    kindSet, kindArray, kindRecord, kindFile,
    kindCases
);
%
bitset = set of 0..47;
%
word = record case integer of
    0: (i: integer);
    1: (r: real);
    2: (b: boolean);
    3: (a: alfa);
    4: (t: @types);
    5: (e: @expr);
    6: (s: @insnltyp);
    7: (c: char);
    8: (cl: idclass);
    9: (o: operator);
    10: (y: symbol);
    11: (k: kind);
    12: (q: @identrec);
    13: (m: bitset)
    end;
%
insnltyp  = record
    case integer of
    11: (f: array [0..10] of word);
    4:  (f40, f41, f42, f43: word);
    6:  (f60, f61, f62, f63: word)
end;
%
types = record
    size,
    bits:   integer;
    k:      kind;
    case kind of
    kindReal:   (s8:        record
                                f: array [3..7] of word
                            end);
    kindRange:  (base:      @types;
                 r4,
                 left,
                 right:     integer);
    kindArray:  (base,
                 range:     @types;
                 pck:       boolean;
                 perword,
                 pcksize:   integer);
    kindScalar: (enums:     @identrec;
                 numen,
                 start:     integer);
    kindSet,
    kindPtr:    (base:      @types);
    kindFile:   (base:      @types;
                 elsize:    integer);
    kindRecord: (ptr1,
                 ptr2:      @identrec;
                 flag,
                 pckrec:    boolean);
    kindCases:  (sel:       word;
                 selptr1,
                 selptr2,
                 selptr3:      @identrec)
    end;
%
typechain = record
    next:         @typechain;
    type1, type2: @types;
end;

charmap   = packed array ['_000'..'_176'] of char;
textmap   = packed array ['_052'..'_177'] of '_000'..'_077';
%
four = array [1..4] of integer;
entries   = array [1..42] of bitset;
%
expr = record
    case boolean of
    false:      (f:     array [0..3] of word);
    true:       (typ:   @types;
                 op:    operator;
                 arg1,
                 arg2:  word);
end;
%
kword = record
    w:      word;
    sym:    symbol;
    op:     operator;
    next:   @kword;
end;
%
strLabel = record
    next:       @strLabel;
    ident:      word;
    offset:     integer;
    exitTarget: integer;
end;
%
numLabel = record
    id:         word;
    line:       integer;
    frame:      integer;
    offset:     integer;
    next:       @numLabel;
    defined:    boolean;
end;
%
identrec = record
    id:     word;
    offset: integer;
    next:   @identrec;
    case integer of
    5:      (typ: @types;
             cl: idclass);
    7:      (f3of7, f4of7: word; list: @identrec; value: integer);
    10:     (f3of10, f4of10, f5of10, f6of10: word;
             pckfield:  boolean;
             shift:     integer;
             width:     integer);
    12:     (f: array [3..10] of word; flags: bitset);
end;
%
var (* total size 4791 words *)
%
(*40*)      octalMode: char;
(*41-46*)   bigSkipSet, statEndSys, blockBegSys, statBegSys,
            skipToSet, lvalOpSet: setofsys;
(*47-49*)   bool47z, bool48z, bool49z: boolean;
(*50*)      dataCheck: boolean;
(*51*)      int51z: integer;
(*52*)      jumpTarget: integer;
(*53*)      int53z: integer;
(*54*)      charClass: operator;
(*55-56*)   SY, prevSY: symbol;
(*57*)      savedObjIdx: integer;
(*58*)      FcstCnt: integer;
(*59*)      symTabPos: integer;
(*60*)      entryPtCnt: integer;
(*61*)      fileBufSize: integer;
(*62-63*)   strp62z, strp63z: @expr;
(*64*)      curInsnTemplate: integer;
(*65*)      maxLineLen: integer;
(*66*)      linePos: integer;
(*67*)      prevErrPos: integer;
(*68*)      errsInLine: integer;
(*69*)      moduleOffset: integer;
(*70*)      lineStartOffset: integer;
(*71*)      curFrameRegTemplate: integer;
(*72*)      curProcNesting: integer;
(*73*)      totalErrors: integer;
(*74*)      lineCnt: integer;
(*75*)      bucket: integer;
(*76*)      strLen: integer;
(*77*)      heapCallsCnt: integer;
(*78*)      heapSize: integer;
(*79*)      arithMode: integer;
(*80*)      stmtName: alfa;
(*81*)      keywordHashPtr: @kword;
(*82*)      curVarKind: kind;
(*83*)      curExternFile: @identrec;
(*84*)      commentModeCH: char;
(*85*)      unused85z: word;
(*86*)      CH: char;
(*87*)      sunused87z: word;
(*88*)      debugLine: integer;
(*89*)      lineNesting: integer;
(*90*)      FcstCountTo500: integer;
(*91*)      objBufIdx: integer;
(*92-94*)   int92z, int93z, int94z: integer;
(*95*)      prevOpcode: integer;
(*96*)      charEncoding: integer;
(*97*)      int97z: integer;
(*98*)      atEOL: boolean;
(*99*)      checkTypes: boolean;
(*100-102*) isDefined, putLeft, bool102z: boolean;
(*103*)     errors: boolean;
(*104*)     declExternal: boolean;
(*105*)     rangeMismatch: boolean;
(*106*)     doPMD: boolean;
(*107*)     checkBounds: boolean;
(*108*)     fuzzReals: boolean;
(*109*)     fixMult: boolean;
(*110*)     bool110z: boolean;
(*111*)     pseudoZ: boolean;
(*112*)     allowCompat: boolean;
(*113*)     checkFortran: boolean;
(*114*)     outputFile: @identrec;
(*115*)     inputFile: @identrec;
(*116*)     programObj: @identrec;
(*117*)     hashTravPtr: @identrec;
(*118*)     uProcPtr: @identrec;
(*119*)     externFileList: @identrec;
(*120-121*) strp120z, strp121z: @types;
(*122*)     pointerType: @types;
(*123*)     setType: @types;
(*124*)     booleanType: @types;
(*125*)     textType: @types;
(*126*)     integerType: @types;
(*127*)     realType: @types;
(*128*)     charType: @types;
(*129*)     alfaType: @types;
(*130*)     arg1Type: @types;
(*131*)     arg2Type: @types;
(*132*)     numLabList: @numLabel;
(*133*)     chain: @typechain;
(*134*)     curToken: word;
(*135*)     curVal: word;
(*136*)     O77777: word;
(*137*)     intZero: bitset;
(*138-139*) unused138z, extSymMask: bitset;
(*140*)     halfWord: bitset;
(*141*)     isLeftInsn: word;
(*142*)     hashMask: word;
(*143*)     curIdent: word;
(*144-148*) toAlloc, set145z, set146z, set147z, set148z: bitset;
(*149*)     optSflags: word;
(*150*)     litOct: word;
(*151*)     litExternal: word;
(*152*)     litForward: word;
(*153*)     litFortran: word;
(*154*)     uVarPtr: @expr;
(*155*)     curExpr: @expr;
(*156*)     insnList: @insnltyp;
(*157-158*) fileForOutput, fileForInput: @identrec;
(*159*)     maxSmallString: integer;
(*160*)     extSymAdornment: integer;
(*161-165*) smallStringType: array [2..6] of @types;
(*166*)     symTabCnt: integer;
(*167-246*) symtabarray: array [1..80] of word;
(*247-326*) symtbidx: array [1..80] of integer;
(*327-331*) iMulOpMap: array [MUL..IMODOP] of operator;
(*332-338*) setOpMap: array [MUL..MINUSOP] of operator;
(*339-340*) iAddOpMap: array [PLUSOP..MINUSOP] of operator;
(*341-369*) entryPtTable: entries;
(*370-397*) frameRestore: array [3..6] of four;
(*398-413*) indexreg: array [1..15] of integer;
(*414-450*) opToInsn: array [MUL..op44] of integer;
(*451-487*) opToMode: array [MUL..op44] of integer;
(*488-524*) opFlags: array [MUL..op44] of opflg;
(*525-548*) funcInsn: array [0..23] of integer;
(*549-595*) insnTemp: array [insn] of integer;
(*596*)     frameRegTemplate: integer;
(*597*)     constRegTemplate: integer;
(*598*)     disNormTemplate: integer;
(*599-728*) lineBufBase: array [1..130] of char;
(*729*)     errMapBase: array [0..9] of integer;
(*739*)     chrClassTabBase: array ['_000'..'_177'] of operator;
(*867*)     kwordHashTabBase: array [0..127] of @kword;
(*995*)     charSymTabBase: array ['_000'..'_177'] of symbol;
(*1123*)    symHashTabBase: array [0..127] of @identrec;
(*1251*)    typeHashTabBase: array [0..127] of @identrec;
(*1378*)    helperMap: array [1..99] of integer;
(*1477*)    helperNames: array [1..99] of bitset;
(*1577-
  2409*)    symTab: array [74000B..75500B] of bitset;
(*2410*)    systemProcNames: array [0..29] of integer;
(*2440*)    resWordNameBase: array [0..29] of integer;
(*2470*)    longSymCnt: integer;
(*2471*)    longSymTabBase: array [1..90] of integer;
(*2560*)    longSyms: array [1..90] of bitset;
(*2651*)    constVals: array [1..500] of alfa;
(*3151*)    constNums: array [1..500] of integer;
(*3651*)    objBuffer: array [1..1024] of bitset;
(*4675*)    iso2text: array ['_052'..'_177'] of '_000'..'_077';
(*4761*)    fcst: file of bitset; (* last *)
%
    pasinput: text;
%
    child: file of bitset;
%
    pasinfor: record
        (*0*) listMode:     integer;
        (*1*) errors:       @boolean;
        (*2*) entryptr:     @entries;
        (*3*) startOffset:  integer;
      (*4-6*) a0, a1, a4:   @charmap;
        (*7*) a3:           @textmap;
     (*8-17*) sizes:        array [1..10] of @integer;
       (*18*) flags:        bitset;
        end;
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%              PROGRAMME                 %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
procedure programme(var l2arg1z: integer; l2arg2z: @identrec);
label 22420, 22421, 23301;
var
    l2var1z: word;
    typelist: @identrec;
    l2var3z, l2var4z: word;
    curIdRec: @identrec;
    l2var6z: word;
    isPredefined, l2bool8z, inTypeDef: boolean;
    l2var10z: @expr;
    l2var11z, l2var12z: word;
    l2var13z: @types;
    l2var14z: word;
    l2var15z, l2var16z: @numLabel;
    strLabList: @strLabel;
%
    l2var18z, l2var19z, l2var20z, l2var21z, l2var22z: integer;
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%              PrintErrMsg               %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
procedure printErrMsg(errno: integer);
type
    errtxt = packed array [0..100] of '_000'..'_077';
var
    errptr: @errtxt;
    errtext: array [0..100] of '_000'..'_077';
    i: integer;
    c: char;
%
    function pasmitxt(errno: integer): @errtxt;
        fortran;
%
    function pasisoxt(txtchar: '_000'..'_077'): char;
        fortran;
%
{ (* PrintErrMsg *)
    write(' ');
    if errno >= 200 then
        write('system=', errno:0)
    else {
        if (errno > 88) then
            printErrMsg(86)
        else if errno in [16..18, 20] then {
            if errno = 20 then
                errno := ord(sy = ident)*2 + 1
            else
                write(curToken.i:0,' ');
        } (*=z-*)else(*=z+*) ; 
        errptr := pasmitxt(errno);
        unpack(errptr@, errtext, 0);
(loop)  for i:=0 to 100 do {
            c := pasisoxt(errtext[i]);
            if c = '*' then
                exit loop;
            write(c);
        };
        write(' ');
        if errno in [17, 22] then
            if errno = 17 then
                write(int97z:0)
            else
                write(stmtName);
    };
    if errno <> 86 then
        writeln;
}; (* PrintErrMsg *)
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%              printTextWord             %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
procedure printTextWord(val: word);
%
    procedure PASTPR(val: word);
        external;
%
{ (* printTextWord *)
    write(' ');
    PASTPR(val)
}; (* printTextWord *)
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%              assignType                %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
procedure assignType(var res: @types);
var span: @types;
{
    if maxSmallString >= strLen then
        res := smallStringType[strLen]
    else {
        new(span = 7);
        new(res, kindArray);
        with span@ do {
            size := 1;
            r4 := 0;
            bits := 12;
            k := kindRange;
            base := integerType;
            left := 1;
            right := strLen;
        };
        with res@ do {
            size := (strLen + 5) div 6;
            if size = 1 then
                bits := strLen * 8
            else
                bits := 0;
            k := kindArray;
            base := charType;
            range := span;
            pck := true;
            perword := 6;
            pcksize := 8;
        }
    }
}; (* assignType *)
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%              addToHashTab              %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
procedure addToHashTab(l3arg1z: @identrec);
{
    curVal.m := l3arg1z@.id.m * hashMask.m;
    mapai(curval.a, curval.i);
    l3arg1z@.next := symHashTabBase[curval.i];
    symHashTabBase[curval.i] := l3arg1z;
}; (* addToHashTab *)
%
procedure error(errno: integer);
    forward;
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%              storeObjWord              %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
procedure storeObjWord(insn: bitset);
{
    objBuffer[objBufIdx] := insn;
    moduleOffset := moduleOffset + 1;
    if objBufIdx = 1024 then {
        error(49); (* errTooManyInsnsInBlock *)
        objBufIdx := 1
    } else
        objBufIdx := objBufIdx + 1;
}; (* storeObjWord *)
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%              form1Insn                 %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
procedure form1Insn(arg: integer);
var
    insn, opcode: word;
    half1, half2: bitset;
    pos: integer;
{
    insn.i := arg;
    opcode.m := insn.m * [0, 1, 3, 24..32];
    if opcode.i = insnTemp[UJ] then {
        if prevOpcode = opcode.i then
            exit;
        if putLeft and (prevOpcode = 1) then {
            pos := objBufIdx - 1;
            if objBuffer[pos] * [0..8] = [0, 1, 3..5, 8] then {
                prevOpcode := opcode.i;
                half1 := insn.m * [33..47];
                besm(ASN64-24);
                half1 :=;
                half2 := objBuffer[pos] * [9..23];
                besm(ASN64+24);
                half2 :=;
                objBuffer[pos] := [0, 1, 3, 4, 6, 28, 29] +
                    half1 + half2;
                exit;
            }
       }
    };
    prevOpcode := opcode.i;
    if (putLeft) then {
        isLeftInsn.m := insn.m * halfWord;
        besm(ASN64-24);
        isLeftInsn :=;
        putLeft := false
    } else {
        putLeft := true;
        storeObjWord(isLeftInsn.m + (insn.m * halfWord))
    }
}; (* form1Insn *)
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
procedure form2Insn(i1, i2: integer);
{
    form1Insn(i1);
    form1Insn(i2);
}; (* form2Insn *)
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
procedure form3Insn(i1, i2, i3: integer);
{
    form2Insn(i1, i2);
    form1Insn(i3);
}; (* form3Insn *)
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
procedure disableNorm;
{
    if arithMode <> 1 then {
        form1Insn(disNormTemplate);
        arithMode := 1;
    }
}; (* disableNorm *)
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function getObjBufIdxPlus: integer;
{
   if putLeft then
       getObjBufIdxPlus := objBufIdx + 4096
   else
       getObjBufIdxPlus := objBufIdx
}; (* getObjBufIdxPlus *)
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
procedure formJumpOnCond(var arg: integer);
var
    pos: integer;
    isLeft: boolean;
{
    if prevOpcode <> insnTemp[UJ] then {
        pos := getObjBufIdxPlus;
        isLeft := putLeft;
        form1Insn(int51z + arg);
        if putLeft = isLeft then
            pos := pos - 1;
        arg := pos;
    }
}; (* formJumpOnCond *)
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
procedure padToLeft;
{
    if not putLeft then
        form1Insn(insnTemp[UTC]);
    prevOpcode := 0;
}; (* padToLeft *)
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
procedure formInsnAndLabel(arg: integer);
{
    form1Insn(arg);
    padToLeft;
    prevOpcode := 1;
}; (* formInsnAndLabel *)
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
procedure putToSymTab(arg: bitset);
{
    symTab[symTabPos] := arg;
    if symTabPos = 75500B then {
        error(50); (* errSymbolTableOverflow *)
        symTabPos := 74000B;
    } else
        symTabPos := symTabPos + 1;
}; (* putToSymTab *)
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function allocExtSymbol(l3arg1z: bitset): integer;
var
    l3var1z: word;
    l3var2z: integer;
{
    allocExtSymbol := symTabPos;
    if (curVal.m * halfWord <> []) then {
        for l3var2z to longSymCnt do
            if (curVal.m = longSyms[l3var2z]) then {
                allocExtSymbol := longSymTabBase[l3var2z];
                exit
            };
        longSymCnt := longSymCnt + 1;
        if (longSymCnt >= 90) then {
            error(51); (* errLongSymbolOverflow *)
            longSymCnt := 1;
        };
        longSymTabBase[longSymCnt] := symTabPos;
        longSyms[longSymCnt] := curVal.m;
        l3arg1z := l3arg1z + [25];
    } else
        l3arg1z := l3arg1z + curVal.m;
    putToSymTab(l3arg1z);
}; (* allocExtSymbol *)
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function getHelperProc(l3arg1z: integer): integer;
{
    if (helperMap[l3arg1z] = 0) then {
        curVal.m := helperNames[l3arg1z];
        helperMap[l3arg1z] := allocExtSymbol(extSymMask);
    };
    getHelperProc := helperMap[l3arg1z] + (KVJM+I13);
}; (*getHelperProc *)
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
procedure toFCST;
{
    write(FCST, curVal.m);
    FcstCnt := FcstCnt + 1;
}; (* toFCST *)
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function addCurValToFCST: integer;
var
    low, high, mid: integer;
{
    low := 1;
    if (FcstCountTo500 = 0) then {
        addCurValToFCST := FcstCnt;
        FcstCountTo500 := 1;
        constVals[1] := curVal.a;
        constNums[1] := FcstCnt;
        toFCST;
    } else {
        high := FcstCountTo500;
        repeat
            mid := (low + high) div 2;
            if (curVal.a = constVals[mid]) then {
                addCurValToFCST := constNums[mid];
                exit
            };
            if curval.a < constVals[mid] then
                high := mid - 1
            else
                low := mid + 1
        until high < low;
        addCurValToFCST := FcstCnt;
        if FcstCountTo500 <> 500 then {
            if curval.a < constVals[mid] then
                high := mid
            else
                high := mid + 1;
            for mid := FcstCountTo500 downto high do {
                low := mid + 1;
                constVals[low] := constVals[mid];
                constNums[low] := constNums[mid];
            };
            FcstCountTo500 := FcstCountTo500 + 1;
            constVals[high] := curVal.a;
            constNums[high] := FcstCnt;
        };
        toFCST;
    }
}; (* addCurValToFCST *)
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function allocSymtab(l3arg1z: bitset): integer;
var
    low, high, mid: integer;
    value: word;
{
    low := 1;
    value.m := l3arg1z;
    if symTabCnt = 0 then {
        allocSymtab := symTabPos;
        symTabCnt := 1;
        symTabArray[1].m := l3arg1z;
        symtbidx[1] := symTabPos;
    } else {
        high := symTabCnt;
        repeat
            mid := (low + high) div 2;
            if (value = symTabArray[mid]) then {
                allocSymtab := symtbidx[mid];
                exit
            };
            if  value.a < symTabArray[mid].a then
                 high := mid - 1
            else
                 low := mid + 1;
        until high < low;
        allocSymtab := symTabPos;
        if symTabCnt <> 80 then {
            if value.a < symTabArray[mid].a then
                high := mid
            else
                high := mid + 1;
            for mid := symTabCnt downto high do {
                low := mid + 1;
                symTabArray[low] := symTabArray[mid];
                symtbidx[low] := symtbidx[mid];
            };
            symTabCnt := symTabCnt + 1;
            symTabArray[high] := value;
            symtbidx[high] := symTabPos;
        }
    };
    putToSymTab(value.m);
}; (* allocSymtab *)
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function getFCSToffset: integer;
var
    offset: word;
{
    getFCSToffset := addCurValToFCST;
    offset :=;
    if (offset.i < 2048) then {
        (* empty *)
    } else if (offset.i >= 4096) then
        error(204)
    else {
        getFCSToffset := allocSymtab(offset.m + [24]) - 70000B;
        exit
    }
}; (* getFCSToffset *)
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function nrOfBits(value: integer): integer;
{
    curVal.i := value;
    curVal.m := curVal.m * [7..47];
    nrOfBits := 48-minel(curval.m);
}; (* nrOfBits *)
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
procedure defineRange(var res: @types; l, r: integer);
var
    temp: @types;
    dummyloc: word;
{
    new(temp=7);
    with temp@ do {
        size := 1;
        bits := 48;
        base := res;
        r4 := 0;
        k := kindRange;
        curVal.i := l;
        curVal.m := curVal.m + intZero;
        left := curVal.i;
        curVal.i := r;
        curVal.m := curVal.m + intZero;
        right := curVal.i;
        if (left >= 0) then
            bits := nrOfBits(curVal.i);
        res := temp
    }
}; (* defineRange *)
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function getValueOrAllocSymtab(value: integer): integer;
{
    curVal.i := value;
    curVal.i := curVal.i MOD 32768;
    if (40000B >= curVal.i) then
        getValueOrAllocSymtab := curVal.i
    else
        getValueOrAllocSymtab :=
            allocSymtab((curVal.m + [24]) * halfWord);
}; (* getValueOrAllocSymtab *)
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
procedure P0715(mode, arg: integer);
label 1;
var
    addr, insn, leftHalf: bitset;
    isLarge: boolean;
    work, offset: integer;
{
    if mode = 0 then {
        padToLeft;
        curVal.i := moduleOffset;
1:      addr := curval.m * [33..47];
        curVal := curVal;
        besm(ASN64-24);
        leftHalf:=;
        while arg <> 0 do {
            if 4096 < arg then {
                isLarge := true;
                arg := arg - 4096;
            } else isLarge := false;
            insn := objBuffer[arg];
            if isLarge then {
                curVal.m := insn * [9..23];
                besm(ASN64+24);
                curVal :=;
                curVal.m := curVal.m + intZero;
                insn := insn * [0..8, 24..47] + leftHalf;
            } else {
                curVal.m := intZero + insn * [33..47];
                insn := insn * [0..32] + addr;
            };
            objBuffer[arg] := insn;
            arg := curVal.i;
        };
        exit;
    } else if mode = 2 then {
        form1Insn(KVTM+I14 + curVal.i);
        if curVal.i = 74001B then
            form1Insn(KUTM+I14 + FcstCnt);
        form3Insn(KITA+14, insnTemp[ASN] + arg, KAOX+I7+1);
        form1Insn(KATX+I7+1);
        exit;
    } else if (mode = 1) or (mode < -2) then {
        arg := arg - curVal.i;
        offset := getFCSToffset;
        if mode = 1 then
            work := getHelperProc(68) + (-64200000B) (* P/DA *)
        else
            work := -mode;
        curVal.i := arg;
        arg := getFCSToffset;
        form3Insn(KATX+SP+1, KSUB+I8 + offset, work);
        form3Insn(KRSUB+I8 + arg, work, KXTA+SP+1);
        exit;
    } else if mode = -1 then {
        form1Insn(KVTM+I14 + lineCnt);
        formInsnAndLabel(getHelperProc(arg));
        exit;
    };
    curVal.i := mode;
    goto 1;
}; (* P0715 *)
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
procedure endOfLine;
var
    unused: array [1..14] of integer;
    err, errPos, prevPos, listMode,
    startPos, lastErr: integer;
%
    procedure OBPROG(var start, fin: bitset);
        external;
{
    listMode := pasinfor.listMode;
    if (listMode <> 0) or (errsInLine <> 0) then
    {
        write(' ', (lineStartOffset + PASINFOR.startOffset):5 oct,
              lineCnt:5, lineNesting:3, commentModeCH);
        startPos := 13;
        if (S4 in optSflags.m)
            and (maxLineLen = 72)
            and (linePos >= 80)
        then {
            for err := 73 to 80 do
                write(lineBufBase[err]);
            write(' ');
            linePos := 73;
            startPos := 22;
        }; (* 1106 *)
        repeat
            linePos := linePos-1
        until (lineBufBase[linePos]  <> ' ') or (linePos = 0);
        for err to linePos do {
            output@ := lineBufBase[err];
            put(output);
        };
        writeln;
        if errsInLine <> 0 then {
            write('*****':startPos, ' ':errMapBase[0], '0');
            lastErr := errsInLine - 1;
            for err to lastErr do {
                errPos := errMapBase[err];
                prevPos := errMapBase[err-1];
                if errPos <> prevPos then {
                    if prevPos + 1 <> errPos then
                        write(' ':(errPos-prevPos-1));
                    write(chr(err + 48));
                }
            };
            writeln;
            errsInLine := 0;
            prevErrPos := 0;
        }
    }; (* 1160 *)
    if (listMode = 2) and (moduleOffset <> lineStartOffset) then {
        OBPROG(objBuffer[objBufIdx - moduleOffset + lineStartOffset],
               objBuffer[objBufIdx-1]);
    }; (* 1174 *)
    lineStartOffset := moduleOffset;
    linePos := 0;
    lineCnt := lineCnt + 1;
    if eof(pasinput) then {
        error(errEOFEncountered);
        goto 9999;
    }
}; (* endOfLine *)
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
procedure requiredSymErr(sym: symbol);
{
    if linePos <> prevErrPos then
        error(ord(sym) + 88);
}; (* requiredSymErr *)
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
procedure readToPos80;
{
    while linePos < 81 do {
        linePos := linePos + 1;
        lineBufBase[linePos] := PASINPUT@;
        if linePos <> 81 then get(PASINPUT);
    };
    endOfLine
}; (* readToPos80 *)
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
procedure inSymbol;
label
    1473, 1, 2, 2175, 2233, 2320;
var
    localBuf: array [0..130] of char;
    tokenLen, tokenIdx: integer;
    expSign: boolean;
    l3var135z: @identrec;
    expMultiple, expValue: real;
    l3var138z: char;
    numstr: array [1..16] of word;
    l3vars2: array [155..159] of word;
    expLiteral, expMagnitude: integer;
    l3var162z: word;
    chord: integer;
    l3var164z: integer;
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
procedure nextCH;
{
    repeat
        atEOL := eoln(PASINPUT);
        CH := PASINPUT@;
        get(PASINPUT);
        linePos := linePos + 1;
        lineBufBase[linePos] := CH;
    until (maxLineLen >= linePos) or atEOL;
}; (* nextCH *)
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
procedure parseComment;
var
    l4var1z, l4var2z: boolean;
    l4var3z: char;
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
procedure readOptVal(var l5arg1z: integer; l5arg2z: integer);
{
    nextCH;
    l5arg1z := 0;
    while ('9' >= CH) and (CH >= '0') do {
        l5arg1z := 10 * l5arg1z + ord(CH) - ord('0');
        nextCH;
        l4var1z := false;
    };
    if l5arg2z < l5arg1z then l4var1z := true;
}; (* readOptVal *)
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
procedure readOptFlag(var l5arg1z: boolean);
{
    nextCH;
    if (CH = '-') or (CH = '+') then {
        l5arg1z := CH = '+';
        l4var1z := false;
    };
    nextCH
}; (* readOptFlag *)
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
{ (* parseComment *)
    nextCH;
    if CH = '=' then {
        repeat nextCH;
        l4var1z := true;
        case CH of
        'D': {
            readOptVal(curVal.i, 15);
            optSflags.m := optSflags.m * [0..40] + curVal.m * [41..47];
        };
        'Y': readOptFlag(allowCompat);
        'E': readOptFlag(declExternal);
        'U': {
            readOptFlag(l4var2z);
            if l4var2z then maxLineLen := 72 else maxLineLen := 120;
        };
        'S': {
            readOptVal(curVal.i, 9);
            if curVal.i = 3 then lineCnt := 1
            else if curVal.i in [4..9] then
                optSflags.m := optSflags.m + [curVal.i - 3]
            else {
                extSymAdornment := curVal.i;
                (*=z-*)(q) exit q(*=z+*)
            };
        };
        'F': readOptFlag(checkFortran);
        'L': readOptVal(PASINFOR.listMode, 3);
        'P': readOptFlag(doPMD);
        'T': readOptFlag(checkBounds);
        'A': readOptVal(charEncoding, 3);
        'C': readOptFlag(checkTypes);
        'R': readOptFlag(fuzzReals);
        'M': readOptFlag(fixMult);
        'B': readOptVal(fileBufSize, 4);
        'K': readOptVal(heapSize, 23);
        'Z': readOptFlag(pseudoZ);
        end;
        if l4var1z then
            error(54); (* errErrorInPseudoComment *)
        until CH <> ',';
    }; (* 1446 *)
    repeat
        while CH <> '*' do {
            l4var3z := commentModeCH;
            commentModeCH := '*';
            if atEOL then
                endOfLine;
            nextCH;
            commentModeCH := l4var3z;
        };
        nextCH
    until CH = ')';
    nextCH;
}; (* parseComment *)
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
{
(again) { (* inSymbol *)
        if dataCheck then {
            error(errEOFEncountered);
            readToPos80;
            goto 9999;
        };
1473:
        while (CH = ' ') and not atEOL do
            nextCH;
        if '_200' < CH then {
            lineBufBase[linePos] := ' ';
            chord := ord(CH);
            for l2var22z := 130 to chord do {
                linePos := linePos + 1;
                lineBufBase[linePos] := ' ';
            };
            nextCH;
            goto 1473;
        };
        if atEOL then {
            endOfLine;
            nextCH;
            if CH = '%' then while not atEOL do
                nextCH;
            goto 1473;
        };
        hashTravPtr := NIL;
        SY := charSymTabBase[CH];
        charClass := chrClassTabBase[CH];
(lexer)
        if SY <> NOSY then {
            case SY of
            IDENT: {
1:              curToken.m := [];
                tokenLen := 1;
                repeat
                    curVal.c := iso2text[CH];
                    nextCH;
                    if 8 >= tokenLen then {
                        tokenLen := tokenLen + 1;
                        curToken := curToken;
                        besm(ASN64-6);
                        curToken:=;
                        curToken.m := curToken.m + curVal.m;
                    };
                until chrClassTabBase[CH] <> ALNUM;
                curVal.m := curToken.m * hashMask.m;
                mapAI(curVal.a, bucket);
                curIdent := curToken;
                keywordHashPtr := kwordHashTabBase[bucket];
                while keywordHashPtr <> NIL do {
                    if keywordHashPtr@.w = curToken then {
                        SY := keywordHashPtr@.sym;
                        charClass := keywordHashPtr@.op;
                        exit lexer;
                    };
                    keywordHashPtr := keywordHashPtr@.next;
                    (*=z-*)besm(2200000B);(*=z+*)
                };
                isDefined := false;
                SY := IDENT;
                case int93z of
                0: {
                    hashTravPtr := symHashTabBase[bucket];
                    while hashTravPtr <> NIL do {
                        if hashTravPtr@.offset = curFrameRegTemplate then
                        {
                            if hashTravPtr@.id <> curIdent then
                                hashTravPtr := hashTravPtr@.next
                            else {
                                isDefined := true;
                                exit lexer;
                            }
                        } else
                            exit lexer;
                    };
                };
                1: {
2:                  hashTravPtr := symHashTabBase[bucket];
                    while hashTravPtr <> NIL do {
                        if hashTravPtr@.id <> curIdent then
                            hashTravPtr := hashTravPtr@.next
                        else
                            exit lexer;
                    };
                };
                2: (q) {
                    if strp63z = NIL then
                        goto 2;
                    strp62z := strp63z;
                    l3var135z := typeHashTabBase[bucket];
                    if l3var135z <> NIL then {
                        while strp62z <> NIL do {
                            l3var162z := strp62z@.f[3].s@.f[0];
                            hashTravPtr := l3var135z;
                            while hashTravPtr <> NIL do {
                                if (hashTravPtr@.id = curIdent)
                                and (hashTravPtr@.f[6] = l3var162z) then
                                    exit lexer;
                                hashTravPtr := hashTravPtr@.next;
                                (*=z-*)besm(2200000B);(*=z+*)
                            };
                            strp62z := strp62z@.f[2].e;
                        };
                    };
                    goto 2; 
                    (*=z-*)exit q(*=z+*) 
                };
                3: {
                    hashTravPtr := typeHashTabBase[bucket];
                    while hashTravPtr <> NIL do {
                        with hashTravPtr@ do {
                            if (id = curIdent) and
                               (strp121z = f[6].t)
                            then
                                exit lexer;
                            hashTravPtr := next;
                       }
                   }
                };
                end;
            }; (* IDENT *)
            REALCONST: {
                nextCH;
                if charSymTabBase[CH] = IDENT then
                    goto 1;
                if CH = '(' then
                    SY := BEGINSY
                else if CH = ')' then
                    SY := ENDSY
                else {
                    SY := NOSY;
                    exit
                };
                nextCH;
            }; (* REALCONST *)
            INTCONST: { (*=m-*)
                SY := INTCONST;
                tokenLen := 0;
                repeat
                    tokenLen := tokenLen + 1;
                    if (16 >= tokenLen) then
                        numstr[tokenLen].i := ord(CH)-ord('0')
                    else {
                        error(55); (* errMoreThan16DigitsInNumber *)
                        tokenLen := 1;
                    };
                    nextCH;
                until charSymTabBase[CH] <> INTCONST;
(octdec)        {
                    if CH = 'B' then
                        octalMode := chr(1)
                    else if CH = 'C' then
                        octalMode := chr(3)
                    else if CH = 'T' then
                        octalMode := chr(2)
                    else {
                        octalMode := chr(0);
                        exit octdec;
                    };
                    nextCH;
                    curToken.c := chr(0);
                    for tokenIdx to tokenLen do {
                        if 7 < numstr[tokenIdx].i then
                            error(20); (* errDigitGreaterThan7 *)
                        curToken := curToken;
                        besm(ASN64-3);
                        curToken:=;
                        curToken.m := numstr[tokenIdx].m * [45..47] +
                        curToken.m;
                    };
                    if octalMode = chr(1) then {
                        if curToken.m * [0..6] <> [] then {
                            error(errNumberTooLarge);
                            curToken.i := 1;
                        } else
                            curToken.m := curToken.m + intZero;
                    } else if octalMode = chr(2) then {
                        l3var164z := 16 - tokenLen;
                        for expMagnitude to l3var164z do {
                            curToken := curToken;
                            besm(ASN64-3);
                            curToken :=;
                        };
                    } (*=z-*)else(*=z+*) ; 
                    exit lexer;
                }; (* octdec *)
                curToken.i := 0;
                for tokenIdx to tokenLen do {
                    if 109951162777 >= curToken.i then
                        curToken.i := 10 * curToken.i +
                            numstr[tokenIdx].i
                    else {
                        error(errNumberTooLarge);
                        curToken.i := 1;
                    };
                };
                expMagnitude := 0;
                if CH = '.' then {
                    nextCH;
                    if CH = '.' then {
                        CH := ':';
                        exit lexer
                    };
                    curToken.r := curToken.i;
                    SY := REALCONST;
                    if charSymTabBase[CH] <> INTCONST then
                        error(56) (* errNeedMantissaAfterDecimal *)
                    else
                        repeat
                            curToken.r := 10.0*curToken.r + ord(CH)-48;
                            expMagnitude := expMagnitude-1;
                            nextCH;
                        until charSymTabBase[CH] <> INTCONST;
                }; (*2062*)
                if CH = 'E' then {
                    if expMagnitude = 0 then {
                        curToken.r := curToken.i;
                        SY := REALCONST;
                    };
                    expSign := false;
                    nextCH;
                    if CH = '+' then
                        nextCH
                    else if CH = '-' then {
                        expSign := true;
                        nextCH
                    } (*=z-*)else(*=z+*) ;
                    expLiteral := 0;
                    if charSymTabBase[CH] <> INTCONST then
                        error(57) (* errNeedExponentAfterE *)
                    else
                        repeat
                            expLiteral := 10 * expLiteral + ord(CH) - 48;
                            nextCH
                        until charSymTabBase[CH] <> INTCONST;
                    if expSign then
                        expMagnitude := expMagnitude - expLiteral
                    else
                        expMagnitude := expMagnitude + expLiteral;
                }; (* 2122 *)
                if expMagnitude <> 0 then {
                    expValue := 1.0;
                    expSign := expMagnitude < 0;
                    expMagnitude := abs(expMagnitude);
                    expMultiple := 10.0;
                    if 18 < expMagnitude then {
                        expMagnitude := 1;
                        error(58); (* errExponentGreaterThan18 *)
                    };
                    repeat
                        if odd(expMagnitude) then
                            expValue := expValue * expMultiple;
                        expMagnitude := expMagnitude div 2;
                        if expMagnitude <> 0 then
                            expMultiple := expMultiple*expMultiple;
                    until expMagnitude = 0;
                    if expSign then
                        curToken.r := curToken.r / expValue
                    else
                        curToken.r := curToken.r * expValue;
                };
                exit lexer
            }; (* INTCONST *) (*=m+*)
            CHARCONST: {
(loop)          {
                    for tokenIdx := 6 to 130 do {
                        nextCH;
                        if charSymTabBase[CH] = CHARCONST then {
                            nextCH;
                            if charSymTabBase[CH] <> CHARCONST then
                                exit loop
                            else
                                goto 2233;
                        };
                        if atEOL then {
2175:                       error(59); (* errEOLNInStringLiteral *)
                            exit loop
                        } else if ((CH = chr(35B)) or
                                   (charSymTabBase[CH] = REALCONST))
                               and (charSymTabBase[PASINPUT@] = INTCONST)
                        then {
                            expLiteral := 0;
                            for tokenLen to 3 do {
                                nextCH;
                                if '7' < CH then
                                    error(
                                        errFirstDigitInCharLiteralGreaterThan3
                                    );
                                expLiteral := 8*expLiteral + ord(CH) - 48;
                            };
                            if 255 < expLiteral then
                                error(errFirstDigitInCharLiteralGreaterThan3);
                            localBuf[tokenIdx] := chr(expLiteral);
                        } else
2233:                       with PASINFOR do {
                                if charEncoding = 3 then {
                                    if (ch < '*') or ('_176' < CH) then
                                        l3var138z := chr(0)
                                    else {
                                        l3var138z := iso2text[CH];
                                        (*=z-*)besm(3042246B);(*=z+*)
                                    }
                                } else if '_176' < CH then {
                                    l3var138z := CH;
                                } else if charEncoding = 0 then {
                                    l3var138z := a0@[CH];
                                } else if charEncoding = 1 then {
                                    l3var138z := a1@[CH];
                                } else if charEncoding = 4 then {
                                    l3var138z := a4@[CH];
                                } else {
                                    l3var138z := CH;
                                    (*=z-*)(q) exit q(*=z+*)
                                };
                                localBuf[tokenIdx] := l3var138z;
                            };
                    };
                    goto 2175
                };
                strLen := tokenIdx - 6;
                if strLen = 0 then {
                   error(61); (* errEmptyString *)
                   strLen := 1;
                   goto 2320
                } else if strLen = 1 then {
                    SY := CHARCONST;
                    tokenLen := 1;
                    curToken.c := chr(0);
                    unpck(localBuf[0], curToken.a);
                    pck(localBuf[tokenLen], curToken.a);
                    exit lexer;
                } else 2320: {
                    curVal.a := '      ';
                    SY := LTSY;
                    unpck(localBuf[tokenIdx], curVal.a);
                    pck(localBuf[6], curToken.a);
                    curVal :=;
                    if 6 >= strLen then
                        exit lexer
                    else {
                        curToken.i := FcstCnt;
                        tokenLen := 6;
                        (loop) {
                            toFCST;
                            tokenLen := tokenLen + 6;
                            if tokenIdx < tokenLen then
                                exit lexer;
                            pck(localBuf[tokenLen], curVal.a);
                            goto loop
                        }
                    }
                };
            }; (* CHARCONST *)
            LTSY: {
                SY := RELOP;
                nextCH;
                if CH = '>' then {
                    charClass := NEOP;
                    nextCH
                } else if CH = '=' then {
                    charClass := LEOP;
                    nextCH;
                }
            }; (* LTOP *)
            GTSY: {
                SY := RELOP;
                nextCH;
                if CH = '=' then {
                    charClass := GEOP;
                    nextCH
                }
            }; (* GTOP *)
            LPAREN: {
                nextCH;
                if CH = '*' then {
                    parseComment;
                    goto 1473
                }
            };
            COLON: {
                nextCH;
                if CH = '=' then {
                    nextCH;
                    SY := BECOMES;
                    charClass := NOOP
                }
            };
            NOTSY, LBRACK, MULOP, ADDOP, RELOP, RPAREN, RBRACK,
            COMMA, SEMICOLON, ARROW: {
                nextCH;
            };
            PERIOD: {
                nextCH;
                if CH = '.' then {
                    nextCH;
                    SY := COLON;
                    charClass := NOOP
                } else {
                    if prevSY = ENDSY then
                        dataCheck := true;
                }
            };
            end (* case *)
        } else { (* 2444 *)
            nextCH;
        };
        prevSY := SY;
        if not pseudoZ and not (DebugCode in optSflags.m) then {
            commentModeCH := '=';
            goto again;
        };
        commentModeCH := ' ';
        int93z := int92z;
    }
}; (* inSymbol *)
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
procedure error;
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
procedure skipToEnd;
var
    sym: symbol;
{
    sym := SY;
    while (sym <> ENDSY) or (SY <> PERIOD) do {
        sym := SY;
        inSymbol
    };
    if CH = 'D' then
        while SY <> ENDSY do
            inSymbol;
    goto 9999;
};
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
{ (* error *)
    errors := true;
    bool110z :=;
    if ((linePos <> prevErrPos) and (9 >= errsInLine))
        or (errno = 52)
    then {
        write(' ');
        totalErrors := totalErrors + 1;
        errMapBase[errsInLine] := linePos;
        errsInLine := errsInLine + 1;
        prevErrPos := linePos;
        write('******', errno:0);
        printErrMsg(errno);
        if 60 < totalErrors then {
            writeln;
            endOfLine;
            printErrMsg(53);
            skipToEnd
        }
    }
};
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
procedure skip(toset: setofsys);
{
    while not (SY IN toset) do
        inSymbol;
}; (* skip *)
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
procedure test1(sym: symbol; toset: setofsys);
{
    if (SY <> sym) then {
        requiredSymErr(sym);
        skip(toset)
    } else
        inSymbol;
}; (* test1 *)
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
procedure errAndSkip(errno: integer; toset: setofsys);
{
    error(errno);
    skip(toset)
}; (* errAndSkip *)
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
procedure parseLiteral(var litType: @types; var litValue: word;
    allowSign: boolean);
label
    99;
var
    l3var1z: operator;
{
    litValue := curToken;
    if (GTSY < SY) then {
        if allowSign and (charClass IN [PLUSOP, MINUSOP]) then {
            l3var1z := charClass;
            inSymbol;
            parseLiteral(litType, litValue, false);
            if (litType <> integerType) then {
                error(62); (* errIntegerNeeded *)
                litType := integerType;
                litValue.i := 1;
            } else {
                if (l3var1z = MINUSOP) then
                    litValue.i := -litValue.i;
            };
        } else
99:     {
            litType := NIL;
            error(errNoConstant);
        }
    } else
        case SY of
        IDENT: {
            if (hashTravPtr = NIL) or
               (hashTravPtr@.cl <> ENUMID) then
                goto 99;
            litType := hashTravPtr@.typ;
            litValue.i := hashTravPtr@.value;
        };
        INTCONST:
            litType := integerType;
        REALCONST:
            litType := realType;
        CHARCONST:
            litType := charType;
        LTSY:
            assignType(litType);
        GTSY: {
            litType := pointerType;
            litValue.s := NIL;
        };
        end (* case *)
}; (* parseLiteral *)
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
procedure P2672(var l3arg1z: @identrec; l3arg2z: @identrec);
var
    l3var1z: boolean;
    l3var2z: integer;
    l3var3z, l3var4z: @identrec;
{
    if l3arg1z = NIL then {
        curVal.m := l3arg2z@.id.m * hashMask.m;
        mapAI(curVal.a, l3var2z);
        l3var1z := true;
        l3arg1z := symHashTabBase[l3var2z];
    } else {
        l3var1z := false;
    };
    if (l3arg1z = l3arg2z) then {
        if (l3var1z) then {
            symHashTabBase[l3var2z] :=
                symHashTabBase[l3var2z]@.next;
        } else {
            l3arg1z := l3arg2z@.next;
        };
    } else {
        l3var3z := l3arg1z;
        while (l3var3z <> l3arg2z) do {
            l3var4z := l3var3z;
            if (l3var3z <> NIL) then {
                l3var3z := l3var3z@.next;
            } else {
                exit
            }
        };
        l3var4z@.next := l3arg2z@.next;
    }
}; (* P2672 *)
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function isFileType(typtr: @types): boolean;
{
    isFileType := (typtr@.k = kindFile) or
        (typtr@.k = kindRecord) and typtr@.s8.f[5].b;
}; (* isFileType *)
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function knownInType(var rec: @identrec): boolean;
{
    if (typelist <> NIL) then {
        rec := typelist;
        while (rec <> NIL) do {
            if (rec@.id = curIdent) then {
                knownInType := true;
                exit
            };
            rec := rec@.next;
            (*=z-*)besm(2200000B);(*=z+*)
        }
    };
    knownInType := false;
}; (* knownInType *)
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
procedure checkSymAndRead(sym: symbol);
{
    if (SY <> sym) then
        requiredSymErr(sym)
    else
        inSymbol
}; (* checkSymAndRead *)
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function typeCheck(type1, type2: @types): boolean;
label
    1;
var
    baseMatch: boolean;
    kind1, kind2: kind;
    link: @typechain;
    basetyp1, basetyp2: @types;
    enums1, enums2: @identrec;
    span1, span2: integer;
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
procedure allocWithTypeCheck;
{
    new(link);
    link@ := [chain, basetyp1, basetyp2];
    chain := link;
    typeCheck := typeCheck(basetyp1, basetyp2);
}; (* allocWithTypeCheck *)
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function checkRecord(l4arg1z, l4arg2z: @types): boolean;
var
    l4var1z: boolean;
{
    l4var1z := (l4arg1z = NIL) or (l4arg2z = NIL);
    if (l4var1z) then {
        checkRecord := l4arg1z = l4arg2z;
    } else {
        checkRecord := typeCheck(l4arg1z@.base, l4arg2z@.base) and
                 checkRecord(l4arg1z@.s8.f[5].t, l4arg2z@.s8.f[5].t);
    };
}; (* checkRecord *)
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
{ (* typeCheck *)
    rangeMismatch := false;
    if (type1@.k = kindRange) then {
        strp120z := type1@.base;
    } else {
        strp120z := type1;
    };
    if not checkTypes or (type1 = type2) then
1:      typeCheck := true
    else
        with type1@ do {
            kind1 := k;
            kind2 := type2@.k;
            if (kind1 = kind2) then {
                case kind1 of
                kindReal:
                    (* empty *);
                kindScalar: {
(chain)             if (type1@.numen = type2@.numen) then {
                        enums1 := type1@.enums;
                        enums2 := type2@.enums;
                        while (enums1 <> NIL) and (enums2 <> NIL) do {
                            if (enums1@.id <> enums2@.id) then
                                exit chain;
                            enums1 := enums1@.list;
                            enums2 := enums2@.list;
                        };
                        if (enums1 = NIL) and (enums2 = NIL) then
                            goto 1;
                    }
                };
                kindRange: {
                    baseMatch := (type1@.base = type2@.base);
                    strp120z := type1@.base;
                    rangeMismatch := (type1@.left <> type2@.left) or
                                (type1@.right <> type2@.right);
                    typeCheck := baseMatch;
                    exit
                };
                kindPtr: {
                    if (type1 = pointerType) or (type2 = pointerType) then
                        goto 1;
                    basetyp1 := type1@.base;
                    basetyp2 := type2@.base;
                    if (chain <> NIL) then {
                        link := chain;
                        while (link <> NIL) do with link@ do {
                            if (type1 = basetyp1) and
                               (type2 = basetyp2) or
                               (type2 = basetyp1) and
                               (type1 = basetyp2) then
                                goto 1;
                            link := next;
                        };
                        allocWithTypeCheck;
                    } else {
                        setup(type1);
                        allocWithTypeCheck;
                        chain := NIL;
                        rollup(type1);
                        exit
                    }
                };
                kindSet:
                    goto 1;
                kindArray: {
                    with type1@.range@ do
                        span1 := right - left;
                    with type2@.range@ do
                        span2 := right - left;
                    if typeCheck(type1@.base, type2@.base) and
                       (span1 = span2) and
                       (type1@.pck = type2@.pck) and
                       not rangeMismatch then {
                        if type1@.pck then {
                            if (type1@.pcksize = type2@.pcksize) then
                                goto 1
                        } else
                            goto 1
                    }
                };
                kindFile: {
                    if typeCheck(type1@.base, type2@.base) then
                        goto 1;
                };
                kindRecord: {
                    if checkRecord(type1@.s8.f[4].t, type2@.s8.f[4].t) then
                        goto 1;
                }
                end (* case *)
            } else {
                if (kind1 = kindRange) then {
                    rangeMismatch := true;
                    strp120z := type2;
                    if (type1@.base = type2) then
                        goto 1;
                } else if (kind2 = kindRange) and
                          (type1 = type2@.base) then
                    goto 1;
            };
            typeCheck := false;
        }
}; (* typeCheck *)
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function F3307(l3arg1z: @identrec): integer;
var
    l3var1z: integer;
    l3var2z: @identrec;
{
    l3var2z := l3arg1z@.f[7].q;
    l3var1z := 0;
    if (l3var2z <> NIL) then
        while (l3var2z <> l3arg1z) do {
            l3var1z := l3var1z + 1;
            l3var2z := l3var2z@.list;
        };
    F3307 := l3var1z;
}; (* F3307 *)
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function makeNameWithStars(isProc: boolean): bitset;
var
    wantBoth: boolean;
{
    wantBoth := not isProc and (extSymAdornment = 0);
    if curVal.m * [0..5] = [] then {
        curVal := curVal;
        besm(ASN64-6);
        curVal := ;
        if wantBoth or (extSymAdornment = 1) then
            curVal.m := curVal.m + [44, 46];
        while curVal.m * [0..11] = [] do {
            curVal := curVal;
            besm(ASN64-6);
            curVal := ;
        };
        if curVal.m * [0..5] = [] then {
            if wantBoth then
                curVal.m := [2, 4] + curVal.m
            else {
                curVal := curVal;
                besm(ASN64-6);
                curVal := ;
            }
        }
    };
    makeNameWithStars := curVal.m;
}; (* makeNameWithStars *)
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
procedure formOperator(l3arg1z: opgen);
var
    l3var1z, l3var2z: word;
    l3var3z: word;
    l3var4z: integer;
    l3var5z: word;
    flags: opflg;
    l3var7z,
    l3var8z, l3var9z, l3var10z, l3var11z: word;
    l3var12z: @insnltyp;
    l3var13z: word;
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
procedure genOneOp;
label
    3556;
var
    insnBufIdx: integer;
    l4var2z, l4var3z, l4var4z: integer;
    l4var5z: word;
    l4var6z, l4var7z, l4var8z: @expr;
    l4var9z: integer;
    insnBuf: array [1..200] of word;
    l4var210z: word;
    l4var211z: word;
    l4var212z: @insnltyp;
    l4var213z: boolean;
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
procedure P3363;
{
    if l4var213z then
        form1Insn(insnTemp[XTA])
    else
        form1Insn(KXTA+E1)
}; (* P3363 *)
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
procedure  addInsnToBuf(insn: integer);
{
    insnBuf[insnBufIdx].i := insn;
    insnBufIdx := insnBufIdx + 1;
}; (* addInsnToBuf *)
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
procedure add2InsnsToBuf(insn1, insn2: integer);
{
    insnBuf[insnBufIdx].i := insn1;
    insnBuf[insnBufIdx+1].i := insn2;
    insnBufIdx := insnBufIdx + 2;
}; (* add2InsnsToBuf *)
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function F3413: boolean;
{
    l4var7z := l4var6z;
    while l4var7z <> NIL do {
        if (l4var7z@.op = l4var210z.o) then {
            F3413 := true;
            while (l4var7z@.f[2].i = macro) do {
                l4var7z := ptr(l4var7z@.f[3].i);
            };
            exit
        } else {
            l4var7z := l4var7z@.f[0].e;
        }
    };
    F3413 := false;
}; (* F3413 *)
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
procedure P3436(l5arg1z: integer);
{
    if not F3413 then {
        new(l4var7z);
        l4var7z@.f[0].e := l4var6z;
        l4var7z@.op := l4var210z.o;
        l4var7z@.f[2].i := 0;
        l4var7z@.f[3].i := 0;
        l4var6z := l4var7z;
    };
    addInsnToBuf((macro + l5arg1z) + ord(l4var7z))
}; (* P3436 *)
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
{ (* genOneOp *)
    if insnList = NIL
        then exit;
    set145z := set145z + insnList@.f[3].m;
    l4var212z := insnList@.f[1].s;
    l4var9z := 370007B;
    insnBufIdx := 1;
    if l4var212z = NIL then
        exit;
    l4var6z := NIL;
    while l4var212z <> NIL do {
        l4var211z.i := l4var212z@.f[2].i;
        l4var4z := l4var211z.i -  macro;
        l4var210z.i := l4var212z@.f[3].i;
        case l4var212z@.f[1].i of
         0: ;
         1: if arithMode <> 1 then {
                addInsnToBuf(370007B);
                arithMode := 1
            };
         2: arithMode := 1;
         3: if arithMode <> 2 then {
                addInsnToBuf(insnTemp[NTR]);
                arithMode := 2;
            };
         4: arithMode := 2;
        end; (* case *)
        l4var212z := l4var212z@.f[0].s;
        if l4var4z >= 0 then {
            case l4var4z of
            mcCARD: {
                add2InsnsToBuf(KACX, KAEX+ZERO);
            };
            21: goto 3556;
            0:  P3436(insnTemp[UZA]);
            1:  P3436(insnTemp[U1A]);
            2: {
                l4var211z.i := l4var210z.i mod 4096;
                l4var210z.i := l4var210z.i div 4096;
                P3436(insnTemp[UJ]);
                l4var210z.i := l4var211z.i;
3556:           if F3413 then
                    addInsnToBuf(2*macro+ord(l4var7z))
                else
                    error(206);
            };
            3: {
                 l4var211z.i := l4var210z.i mod 4096;
                 l4var210z.i := l4var210z.i div 4096;
                 l4var213z :=  F3413;
                 l4var8z := l4var7z;
                 l4var210z.i := l4var211z.i;
                 l4var213z := l4var213z & F3413;
                 if l4var213z then
                    with l4var7z@ do {
                        f[2].i := macro;
                        f[3].i := ord(l4var8z);
                    }
                else
                    error(207);
            };
            20: addInsnToBuf(3*macro + l4var210z.i);
            4: {
                if insnBuf[insnBufIdx-1].m * [21:23, 28:35] = [] then
                    insnBuf[insnBufIdx-1].m := insnBuf[insnBufIdx-1].m + [35]
                else
                    addInsnToBuf(KXTA+SP)
            };
            5:
(blk)       {
                if l4var212z <> NIL then {
                    l4var211z := l4var212z@.f[2];
                    if l4var211z.m * [21:23, 28:35] = [32] then {
                        l4var212z@.f[2].i :=
                            l4var211z.i - insnTemp[XTA] + insnTemp[XTS];
                        exit blk
                    }
                };
                addInsnToBuf(KATX+SP);
            };
            6:  add2InsnsToBuf(KATI+14, KUTC+I14);
            mcMULTI: {
                addInsnToBuf(getHelperProc(12));        (* P/MI *)
            };
            8:  add2InsnsToBuf(KWTC+SP, KUTM+
                               indexreg[l4var210z.i]);
            9:  add2InsnsToBuf(KATI+14, KJADDM+I14 + l4var210z.i);
            mcODD: {
                add2InsnsToBuf(KAAX+E1, KAEX+ZERO);
            };
            mcROUND: {
                addInsnToBuf(KADD+REAL05);                (* round *)
                add2InsnsToBuf(KNTR+7, KADD+ZERO)
            };
            mcSQRR: {
                add2InsnsToBuf(KATX+SP, KMUL+SP);   (* sqr *)
            };
            mcSQRI: {
                add2InsnsToBuf(KATX+SP, KAEX+MULTMASK);   (* sqrint *)
                add2InsnsToBuf(KMUL+SP, KYTA+64)
            };
            14: add2InsnsToBuf(indexreg[l4var210z.i] + KVTM,
                               KITA + l4var210z.i);
            mcMINEL: {
                add2InsnsToBuf(KANX+ZERO, KSUB+PLUS1);   (* minel *)
            };
            16: add2InsnsToBuf(insnTemp[XTA], KATX+SP + l4var210z.i);
            17: {
                addInsnToBuf(KXTS);
                add2InsnsToBuf(KATX+SP+1, KUTM+SP + l4var210z.i)
            };
            18: add2InsnsToBuf(KVTM+I10, getHelperProc(65)); (* P/B7 *)
            19: {
                addInsnToBuf(KVTM+I14);
                add2InsnsToBuf(KXTA+SP, KATX+I14)
            };
            22: {
                add2InsnsToBuf(KVTM+I14, KXTA+I14);
                curVal.i := 40077777C;
                add2InsnsToBuf(allocSymtab(curVal.m) + (KXTS+SP),
                               KAAX+I8 + l4var210z.i);
                add2InsnsToBuf(KAEX+SP, KATX+I14)
            };
            end; (* case *)
        } else { (* 4003 *)
            if 28 in l4var211z.m then {
                addInsnToBuf(getValueOrAllocSymtab(l4var210z.i)+l4var211z.i);
            } else {
                curval.i := l4var210z.i mod 32768;
                if curVal.i < 2048 then
                    addInsnToBuf(l4var211z.i + l4var210z.i)
                else
(stmt)          if (curVal.i >= 28672) or (curVal.i < 4096) then {
                    addInsnToBuf(
                        allocSymtab((curVal.m + [24])*halfWord)
                        + l4var211z.i - 28672);
                } else {
                    add2InsnsToBuf(getValueOrAllocSymtab(curVal.i)
                                   + insnTemp[UTC], l4var211z.i);
                    (*=z-*)exit stmt;(*=z+*)
                }
            }
        }
    }; (* 4037 *)
    insnBufIdx := insnBufIdx-1;
    for l4var4z := insnBufIdx downto 1 do {
        l4var210z := insnBuf[l4var4z];
        if (l4var210z.i = insnTemp[NTR]) or
           (l4var210z.i = 370007B)
        then {
            l4var3z := l4var4z - 1;
            l4var213z := false;
(loop)      if l4var3z < 1 then exit loop else {
                l4var211z.m := insnBuf[l4var3z].m * [28:32];
                if (l4var211z.m = [28, 31]) or (l4var211z.m = [28, 31, 32])
                then {
                    l4var3z := l4var3z-1;
                    goto loop;
                }
            };
(* one word shorter
(loop)      while l4var3z >= 1 do {
                l4var211z.m := insnBuf[l4var3z].m * [28:32];
                if (l4var211z.m # [28, 31]) and (l4var211z.m # [28, 31, 32])
                then
                    exit loop;
                l4var3z := l4var3z-1;
            };
*)
            l4var3z := l4var3z + 1;
            if (l4var3z <> l4var4z) then {
                for l4var2z := l4var4z-1 downto l4var3z do {
                    insnBuf[l4var2z+1] := insnBuf[l4var2z]
                };
            };
            insnBuf[l4var3z] := l4var210z;
        }; (* 4103 *)
    };
    for l4var4z to insnBufIdx do
(iter)  {
        l4var210z := insnBuf[l4var4z];
        l4var211z.m := l4var210z.m * [0, 1, 3, 23:32];
        if l4var211z.i = KATX+SP then {
            l4var2z := l4var4z + 1;
            while insnBufIdx + 1 <> l4var2z do {
                curVal.m := insnBuf[l4var2z].m * [0, 1, 3, 23, 28:35];
                l4var211z.m := curVal.m * [0, 1, 3, 23, 28:32];
                if curVal.i = insnTemp[XTA] then {
                    insnBuf[l4var2z].m :=
                        insnBuf[l4var2z].m mod [32, 34, 35];
                    exit iter;
                } else if curVal.i = insnTemp[ITA] then {
                    insnBuf[l4var2z].m := insnBuf[l4var2z].m + [35];
                    exit iter;
                } else if (curVal.i = insnTemp[NTR]) or
                    (l4var211z.i = insnTemp[UTC]) or
                    (l4var211z.i = insnTemp[WTC]) or
                    (l4var211z.i = insnTemp[VTM])
                then
                    l4var2z := l4var2z + 1
                else (q) {
                    l4var2z := insnBufIdx + 1;
                    (*=z-*)exit q(*=z+*)
                }
            };
        }; (* 4150 *)
        if l4var210z.i = insnTemp[UTC] then
            exit iter;
        if l4var210z.i < macro then {
            form1Insn(l4var210z.i);
            l4var211z.m := l4var210z.m * [28:32];
            if (l4var211z.m = [28, 29, 32]) or
               (l4var211z.m = [30, 32])
            then {
                padToLeft;
                prevOpcode := 1;
            };
            exit iter;
        };
        if (l4var210z.i >= 3*macro) then {
            l4var210z.i := l4var210z.i - (3*macro);
            if l4var210z.i >= 4096 then {
                l4var213z := true;
                l4var210z.i := l4var210z.i - 4096;
            } else {
                l4var213z := false;
            };
            if (l4var210z.i = 0) then
                form1Insn(insnTemp[UZA] + moduleOffset + 2);
            P3363;
            form1Insn(insnTemp[UJ] + 2 + moduleOffset);
            padToLeft;
            if (l4var210z.i <> 0) then {
                if (not F3413) then
                    error(211);
                P0715(0, l4var7z@.f[2].i);
            };
            l4var213z := not l4var213z;
            P3363;
            padToLeft;
            exit iter
        }; (* 4230 *)
        if (l4var210z.i >= 2*macro) then {
            l4var7z := ptr(l4var210z.i - (2*macro));
            P0715(0, l4var7z@.f[2].i);
            l4var7z@.f[3].i := moduleOffset;
        } else {
            l4var210z.i := l4var210z.i - macro;
            curVal.m := l4var210z.m * [0, 1, 3, 28:32];
            int51z := curVal.i;
            curVal.m := [0, 1, 3, 33:47] * l4var210z.m;
            l4var7z := ptr(curVal.i);
            formJumpOnCond(l4var7z@.f[2].i);
            int51z := insnTemp[UJ];
            exit iter
        }
    }; (* loop *)
    insnList := NIL;
    while (l4var6z <> NIL) do {
        with l4var6z@ do
            if (f[3].i = 0) then {
                jumpTarget := f[2].i;
                exit;
            } else
                l4var6z := f[0].e;
    };
    set146z := set146z - set145z;
}; (* genOneOp *)
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
procedure addToInsnList(l4arg1z: integer);
var l4var1z: @insnltyp;
{
    new(l4var1z, 4);
    with l4var1z@ do {
        f40.s := NIL;
        f41.i := 0;
        f42.i := l4arg1z;
        f43.i := 0;
    };
    with insnList@ do {
        if f[0].s = NIL then
            f[1].s := l4var1z
        else
            f[0].s@.f[0].s := l4var1z;
        f[0].s := l4var1z
    }
}; (* addToInsnList *)
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
procedure addInsnAndModify(l4arg1z, l4arg2z: integer);
{
    addToInsnList(l4arg1z);
    insnlist@.f[0].s@.f[3].i := l4arg2z
}; (* addInsnAndModify *)
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
procedure addxToInsnList(l4arg1z: integer);
var
    l4var1z: @expr;
{
    new(l4var1z);
    with l4var1z@ do {
        f[0] := insnList@.f[1];
        f[1].i := 0;
        f[2].i := l4arg1z;
        f[3].i := 0;
    };
    if (insnList@.f[1].s = NIL) then {
        insnList@.f[0].e := l4var1z;
    };
    insnList@.f[1].e := l4var1z;
}; (* addxToInsnList *)
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
procedure P4343;
label
    4545, 4602;
var
    helper: integer;
    l4var2z, l4var3z, l4var4z, l4var5z,
    l4var6z, l4var7z, l4var8z, l4var9z: word;
{
    l4var4z := insnList@.f[2];
    with insnList@ do {
        case f[4].c of
        '_000':{
            curVal := f[5];
            if (l4var4z.s@.f[0].i = 1) then
                curVal.i := getFCSToffset;
            addToInsnList(constRegTemplate + curInsnTemplate + curVal.i);
        };
        '_001':{
            helper := insnList@.f[7].i;
            l4var2z := insnList@.f[5];
            l4var3z := insnList@.f[6];
            if (15 < helper) then {
                (* empty *)
            } else {
                if (helper = 15) then { (* P/CP *)
                    addToInsnList(macro + 6);
                } else {
                    helper := indexreg[insnList@.f[7].i];
                    if (l4var2z.i = 0) and (insnList@.f[8].c = '_000') then {
                        addInsnAndModify(helper + curInsnTemplate,
                                         l4var3z.i);
                        goto 4602;
                    } else {
                        addToInsnList(helper + insnTemp[UTC]);
                        (*=z-*)(q) exit q(*=z+*)
                    }
                }
            };
            l4var6z := insnList@.f[8];
            if l4var6z.c = '_000' then {
                addInsnAndModify(l4var2z.i + curInsnTemplate, l4var3z.i);
            } else {
                l4var5z := l4var4z.s@.f[2];
                if (l4var5z.c < '_004') or
                   (l4var5z.c = '_006') and (s6 in optSflags.m) then {
                    l4var7z.b := true;
                    l4var8z.b := typeCheck(l4var4z.t, integerType);
                } else {
                    l4var7z.b := false;
                    l4var8z.b := false;
                };
                if l4var6z.c = '_001' then {
                    if (l4var3z <> l4var2z) or
                       (helper <> 18) or (* P/RC *)
                       (l4var2z.i <> 0) then
                        addInsnAndModify(l4var2z.i + insnTemp[XTA],
                                         l4var3z.i);
                    l4var3z := insnList@.f[10];
                    l4var2z := insnList@.f[9];
                    l4var9z.b := true;
                    helper := (l4var3z.i + l4var2z.i);
                    if l4var7z.b then {
                        if (30 < l4var3z.i) then {
                            addToInsnList(ASN64-48 + l4var3z.i);
                            addToInsnList(insnTemp[YTA]);
                            if (helper = 48) then (* P/RDR *)
                                l4var9z.b := false;
                        } else {
                            if (l4var3z.i <> 0) then
                                addToInsnList(ASN64 + l4var3z.i);
                        }; (* 4477 *)
                        if l4var9z.b then {
                            curVal.m := [(48 - l4var2z.i)..47];
                            addToInsnList(KAAX+I8 + getFCSToffset);
                        }
                    } else { (* 4511 *)
                        if (helper <> 48) then
                            addToInsnList(ASN64-48 + helper);
                        curVal.m := [0..(l4var2z.i-1)];
                        addToInsnList(KAAX+I8 + getFCSToffset);
                    }; (* 4525 *)
                    if l4var8z.b then
                        addToInsnList(KAEX+ZERO);
                } else { (* 4531 *)
                    if l4var7z.b then
                        helper := ord(l4var8z.b)+74 (* P/LDAR[IN] *)
                    else
                        helper := 56; (* P/RR *)
                    addToInsnList(getHelperProc(helper));
                    insnList@.f[0].s@.f[1].i := 1;
                }
            };
            goto 4545;
        };
        '_002': {
4545:       if bool49z and (l4var4z.t = booleanType) and
               (16 in insnList@.f[3].m) then
                addToInsnList(KAEX+E1);
        };
        '_003': { (* 4555 *)
            if bool49z then
                addInsnAndModify(macro+20,
                    ord(16 in insnList@.f[3].m)*10000B + insnList@.f[5].i);
        };
        end; (* case *)
4602:
    }; (* with *)
    with insnList@ do {
        f[4].c := '_002';
        f[3].m := f[3].m + [0];
    };
}; (* P4343 *)
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
procedure P4606;
{
    P4343;
    addToInsnList(macro + 5)
}; (* P4606 *)
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
procedure P4621(reg: integer);
label
    4650, 4654;
var
    l4var1z, l4var2z, l4var3z, l4var4z, l4var5z,
    l4var6z, l4var7z: word;
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
procedure P4613;
{
    l4var1z := insnList@.f[6];
    l4var1z.i := l4var1z.i mod 32768;
    l4var6z := l4var1z
}; (* P4613 *)
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
{ (* P4621 *)
    with insnList@ do {
        l4var2z := f[7];
        l4var3z.i := insnTemp[VTM];
        l4var7z.i := indexreg[reg];
        l4var4z := f[5];
        f[3].m := f[3].m + [reg];
        if (f[4].c = '_000') then {
            curVal := f[5];
            if (f[2].s@.f[0].i = 1) then
                curVal.i := addCurValToFCST;
            l4var6z := curVal;
            l4var5z.i := 30721;
            goto 4654;
        } else if (l4var2z.i = 18) then {
4650:       P4613;
            if (l4var4z.i = indexreg[1]) then {
                l4var5z.i := 30723;
4654:           l4var1z.i := macro * l4var5z.i + l4var6z.i;
                l4var6z.i := allocSymtab(l4var1z.m * [12:47]);
                addToInsnList(l4var7z.i + l4var3z.i + l4var6z.i);
            } else if (l4var4z.i <> 0) then {
                addInsnAndModify(l4var4z.i + insnTemp[UTC], l4var6z.i);
                addToInsnList(l4var7z.i + l4var3z.i);
            } else (q) {
                addInsnAndModify(l4var7z.i + l4var3z.i, l4var6z.i);
                (*=z-*)exit q(*=z+*)
            }
        } else if (l4var2z.i = 17) then {
            P4613;
            l4var4z := insnList@.f[6];
            l4var5z.i := insnList@.f[0].s@.f[2].i - insnTemp[UTC];
            if (l4var4z.i <> 0) then {
                l4var1z.i := macro * l4var5z.i + l4var4z.i;
                l4var5z.i := allocSymtab(l4var1z.m * [12:47]);
            };
            insnList@.f[0].s@.f[2].i := l4var7z.i + l4var5z.i + l4var3z.i;
        } else if (l4var2z.i = 16) then {
            P4613;
            if (l4var4z.i <> 0) then
                addToInsnList(l4var4z.i + insnTemp[UTC]);
            addInsnAndModify(l4var7z.i + l4var3z.i, l4var6z.i);
        } else if (l4var2z.i = 15) then {
            addToInsnList(insnTemp[ATI] + reg);
            l4var3z.i := insnTemp[UTM];
            goto 4650;
        } else {
            addToInsnList(indexreg[l4var2z.i] + insnTemp[UTC]);
            goto 4650;
        }
    }; (* with *)
    insnList@.f[4].c := '_001';
    insnList@.f[7].i := reg;
    insnList@.f[6].i := 0;
    insnList@.f[5].i := 0;
}; (* P4621 *)
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
procedure P4755;
var
    l4var1z, l4var2z, l4var3z, l4var4z, l4var5z, l4var6z, l4var7z: word;
{
    with insnList@ do
        l4var1z := f[7];
    if (15 < l4var1z.i) then {
        (* nothing? *)
    } else if (l4var1z.i = 15) then {
        addToInsnList(macro + 6)
    } else (q) {
        addToInsnList(indexreg[l4var1z.i] + insnTemp[UTC]);
        (*=z-*)exit q(*=z+*)
    };
    l4var4z.b := 0 in insnList@.f[3].m;
    l4var6z := insnList@.f[8];
    if (l4var6z.c <> '_000') or l4var4z.b then
        addxToInsnList(macro + 5);
    if (l4var6z.c = '_000') then {
        if (l4var4z.b) then {
            addInsnAndModify(insnList@.f[5].i + insnTemp[UTC],
                             insnList@.f[6].i);
            addToInsnList(macro+19);
        } else {
            addInsnAndModify(insnList@.f[5].i, insnList@.f[6].i);
        }
    } else {
        l4var7z := insnList@.f[2].s@.f[2];
        l4var1z := insnList@.f[2].s@.f[1];
        l4var5z.b := (l4var7z.c < '_004') or
                     (l4var7z.c = '_006') and (S6 in optSflags.m);
        if (l4var6z.c = '_001') then {
            l4var2z := insnList@.f[10];
            l4var3z.i := (l4var2z.i + insnList@.f[9].i);
            if l4var5z.b then {
                if (l4var2z.i <> 0) then
                    addxToInsnList(ASN64 - l4var2z.i);
            } else {
                if (l4var3z.i <> 48) then
                    addxToInsnList(ASN64 + 48 - l4var3z.i);
            };
            addInsnAndModify(insnTemp[UTC] + insnList@.f[5].i,
                             insnList@.f[6].i);
            curVal.m := [0..47] - [(48-l4var3z.i)..(47 -l4var2z.i)];
            addInsnAndModify(macro+22, getFCSToffset);
        } else {
            if not l4var5z.b then {
                l4var2z.i := (insnList@.f[9].i - l4var1z.i);
                if (l4var2z.i <> 0) then
                    addxToInsnList(ASN64 - l4var2z.i);
                addxToInsnList(insnTemp[YTA]);
                addxToInsnList(ASN64 - l4var1z.i);
            };
            addToInsnList(getHelperProc(77)); (* "P/STAR" *)
            insnList@.f[0].s@.f[1].i := 1;
        }
    }
}; (* P4755 *)
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
procedure P5117(op: operator);
{
    addInsnAndModify(curFrameRegTemplate, l2var20z);
    new(curExpr);
    with curExpr@ do
        typ := insnList@.f[2].t;
    genOneOp;
    curExpr@.op := op;
    curExpr@.f[2].i := l2var20z;
    l2var20z := l2var20z + 1;
    if (l2var21z < l2var20z) then
        l2var21z := l2var20z;
}; (* P5117 *)
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function F5142: integer;
var
    l4var1z: integer;
    l4var2z: @insnltyp;
{
    l4var1z := 0;
    l4var2z := insnList@.f[1].s;
    while (l4var2z <> NIL) do {
        l4var2z := l4var2z@.f[0].s;
        l4var1z := l4var1z + 1;
    };
    F5142 := l4var1z;
}; (* F5142 *)
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
procedure genFullExpr(l4arg1z: @expr);
label
    7567, 7760, 10075, 10122;
var
    arg1Const, arg2Const: boolean;
    l4var3z: @insnltyp;
    l4var4z, l4var5z: word;
    curOP: operator;
    l4var7z: word;
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
procedure P5155;
{
    P4343;
    insnList@.f[4].c := '_001';
    insnList@.f[8].c := '_000';
    insnList@.f[6].i := 0;
    insnList@.f[5].i := 0;
    insnList@.f[7].i := 18;
}; (* P5155 *)
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
procedure P5170;
label
    5220;
var
    l5var1z, l5var2z: word;
    l5var3z: boolean;
{
    l5var3z := checkBounds and not (NoPtrCheck in optSflags.m)
               and (curOP = DEREF);
    if not l5var3z and (
        (insnList@.f[8].c = '_000') or
        (insnList@.f[8].c = '_001') and
        (insnList@.f[10].i = 0))
    then {
        l5var1z := insnList@.f[7];
        l5var2z := insnList@.f[6];
        if (l5var1z.i = (18)) or (l5var1z.i = (16)) then {
5220:       addInsnAndModify((insnList@.f[5].i + insnTemp[WTC]), l5var2z.i);
        } else {
            if (l5var1z.i = (17)) then {
                if (l5var2z.i = (0)) then {
                    insnList@.f[0].s@.f[2].i := insnList@.f[0].s@.f[2].i +
                                                insnTemp[XTA];
                } else
                    goto 5220;
            } else if (l5var1z.i = (15)) then {
                addToInsnList(macro + 6);
                goto 5220;
            } else (q) {
                addInsnAndModify((indexreg[l5var1z.i] + insnTemp[WTC]),
                                 l5var2z.i);
                (*=z-*)exit q(*=z+*)
            }
        }
    } else {
        P5155;
        if (l5var3z) then {
            addToInsnList((KVTM+I14 + lineCnt));
            addToInsnList(getHelperProc(7)); (* "P/CA"*)
            insnList@.f[0].s@.f[1].i := 1;
        };
        addToInsnList(macro + 6);
    };
    insnList@.f[6].i := 0;
    insnList@.f[5].i := 0;
    insnList@.f[7].i := (16);
}; (* P5170 *)
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
procedure P5270;
{
    P4606;
    l3var12z := insnList;
    insnList := l4var3z;
    P4343;
    addToInsnList(getHelperProc(l3var4z));
    insnList@.f[3].m := insnList@.f[3].m + l3var12z@.f[3].m + [11:14];
    l3var12z@.f[0].s@.f[0] := insnList@.f[1];
    insnList@.f[1] := l3var12z@.f[1];
}; (* P5270 *)
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
procedure P5314;
var
    l5var1z: boolean;
    l5var2z: @insnltyp;
{
    l5var1z := 12 in l4var3z@.f[3].m;
    P4621(12);
    if (l5var1z) then {
        addToInsnList(KITA+12);
        addToInsnList(macro + 5);
    };
    l5var2z := insnList;
    insnList := l4var3z;
    P4621((14));
    if (l5var1z) then {
        addToInsnList(macro + 4);
        addToInsnList(KATI+12);
    };
    l5var2z@.f[3].m := (insnList@.f[3].m + l5var2z@.f[3].m);
    l5var2z@.f[0].s@.f[0] := insnList@.f[1];
    l5var2z@.f[0] := insnList@.f[0];
    insnList := l5var2z;
}; (* P5314 *)
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
procedure P5354(l5arg1z: @types);
var
    l5var1z: integer;
    l5var2z, l5var3z, l5var4z: word;
{
    l5var1z := l5arg1z@.s8.f[4].i;
    if (l5var1z = (0)) then {
        curVal := l5arg1z@.s8.f[5];
        l5var4z := l5arg1z@.s8.f[6];
        if (l5arg1z@.base <> integerType) then {
            curVal.m := curVal.m * [7:47];
            l5var4z.m := l5var4z.m * [7:47];
        };
        prevOpcode := 0;
        formInsnAndLabel((KUJ+5 + moduleOffset));
        l5arg1z@.s8.f[4].i := moduleOffset;
        l5var1z := moduleOffset;
        P0715(1, l5var4z.i);
        formInsnAndLabel(KUJ+I13);
    };
    P4343;
    addToInsnList((KVTM+I14 + lineCnt));
    addToInsnList((KVJM+I13 + l5var1z));
    insnList@.f[0].s@.f[1].i := 1;
}; (* P5354 *)
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
procedure P5420;
{
    if (insnList@.f[4].c = '_000') then {
        insnList@.f[5].b := not insnList@.f[5].b;
    } else {
        insnList@.f[3].m := insnList@.f[3].m mod [16];
    }
}; (* P5420 *)
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
procedure P5433(l5arg1z: boolean);
label
    100, 22, 33;
var
    l5var1z: integer;
    l5var2z: @insnltyp;
{
    if not (0 in l4var3z@.f[3].m) then {
        l5var1z := 0;
    } else
(stmt)
    if not (0 in insnList@.f[3].m) then {
        l5var1z := ord(l5arg1z) + 1;
    } else {
        l5var1z := 3;
        (*=z-*)exit stmt;(*=z+*)
    };
    case l5var1z of
    0:
100: {
        P4343;
        l3var12z := insnList;
        insnList := l4var3z;
        curInsnTemplate := l3var4z;
        P4343;
        curInsnTemplate := insnTemp[XTA];
    };
    1:
        if (l3var4z = insnTemp[SUB]) then {
            l3var4z := insnTemp[RSUB];
            goto 22;
        } else
            goto 33;
   2:
22: {
        l3var12z := insnList;
        insnList := l4var3z;
        l4var3z := l3var12z;
        goto 100;
    };
    3:
33: {
        P4343;
        addToInsnList(indexreg[15] + l3var4z);
        l5var2z := insnList;
        insnList := l4var3z;
        P4606;
        l3var12z := insnList;
        insnList := l5var2z;
    };
    end; (* case *)
    insnList@.f[0].s@.f[1].i := 0;
    l3var12z@.f[0].s@.f[0] := insnList@.f[1];
    insnList@.f[1] := l3var12z@.f[1];
    insnList@.f[3].m := insnList@.f[3].m + [0];
}; (* P5433 *)
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
procedure P5531;
var
    l5var1z, l5var2z: boolean;
    l5var3z, l5var4z, l5var5z, l5var6z, l5var7z: integer;
    l5var8z: @insnltyp;
    l5var9z: word;
{
    if (arg1Const) then {
        if (l4var4z.b) then
            insnList := l4var3z;
    } else if (arg2Const) then {
        if (not l4var5z.b) then
            insnList := l4var3z;
    } else {
        l5var1z := 16 in insnList@.f[3].m;
        l5var2z := 16 in l4var3z@.f[3].m;
        l5var5z := int94z;
        int94z := (int94z + (1));
        bool49z := false;
        l5var6z := ord(l5var1z) + macro;
        l5var7z := ord(l5var2z) + macro;
        if (insnList@.f[4].c = '_003') then {
            l5var3z := insnList@.f[5].i;
        } else {
            l5var3z := 0;
            P4343;
        };
        if (l4var3z@.f[4].c = '_003') then {
            l5var4z := l4var3z@.f[5].i;
        } else {
            l5var4z := 0;
        };
        l5var9z.m := (insnList@.f[3].m + l4var3z@.f[3].m);
        if (l5var3z = (0)) then {
            if (l5var4z = (0)) then {
                addInsnAndModify(l5var6z, l5var5z);
                l5var8z := insnList;
                insnList := l4var3z;
                P4343;
                addInsnAndModify(l5var7z, l5var5z);
            } else {
                if (l5var2z) then {
                    addInsnAndModify(l5var6z, l5var5z);
                    l5var8z := insnList;
                    insnList := l4var3z;
                    addInsnAndModify(macro + 2,
                                     10000B * l5var5z + l5var4z);
                } else {
                    addInsnAndModify(l5var6z, l5var4z);
                    l5var5z := l5var4z;
                    l5var8z := insnList;
                    insnList := l4var3z;
                }
            };
        } else {
            if (l5var4z = (0)) then {
                if (l5var1z) then {
                    addInsnAndModify(macro + 2,
                                     10000B * l5var5z + l5var3z);
                    l5var8z := insnList;
                    insnList := l4var3z;
                    P4343;
                    addInsnAndModify(l5var7z, l5var5z);
                } else {
                    l5var8z := insnList;
                    insnList := l4var3z;
                    P4343;
                    addInsnAndModify(l5var7z, l5var3z);
                    l5var5z := l5var3z;
                };
            } else {
                if (l5var1z) then {
                    if (l5var2z) then {
                        addInsnAndModify(macro + 2,
                                         10000B * l5var5z + l5var3z);
                        l5var8z := insnList;
                        insnList := l4var3z;
                        addInsnAndModify(macro + 2,
                                         10000B * l5var5z + l5var4z);
                    } else {
                        addInsnAndModify(macro + 2,
                                         10000B * l5var4z + l5var3z);
                        l5var8z := insnList;
                        insnList := l4var3z;
                        l5var5z := l5var4z;
                    }
                } else {
                    l5var8z := insnList;
                    insnList := l4var3z;
                    l5var5z := l5var3z;
                    if (l5var2z) then
                        addInsnAndModify(macro + 2,
                                         10000B * l5var3z + l5var4z)
                    else
                        addInsnAndModify(macro + 3,
                                         10000B * l5var3z + l5var4z);
                }
            }
        };
        insnList@.f[3].m := l5var9z.m - [16];
        l5var8z@.f[0].s@.f[0] := insnList@.f[1];
        insnList@.f[1] := l5var8z@.f[1];
        insnList@.f[4].c := '_003';
        insnList@.f[5].i := l5var5z;
        bool49z := true;
        (*=z-*)exit;(*=z+*)
    }
}; (* P5531 *)
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
procedure P5757;
var
    l5var1z, l5var2z, l5var3z, l5var4z, l5var5z, l5var6z,
        l5var7z, l5var8z: integer;
    l5var9z: insnltyp;
    l5var20z, l5var21z: @insnltyp;
    l5var22z, l5var23z: word;
    l5var24z: boolean;
    l5var25z: word;
    l5var26z: @insnltyp;
    l5var27z: @types;
    l5var28z: word;
    l5var29z: @expr;
    l5var30z: array [1..10] of word;
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function myminel(l6arg1z: bitset): integer;
{
    myminel := minel(l6arg1z);
}; (* myminel *)
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
{ (* P5757 *)
    l5var2z := 0;
    l5var29z := l4arg1z;
    while (l5var29z@.f[1].c = '_034') do {
        genFullExpr(l5var29z@.f[3].e);
        l5var2z := (l5var2z + (1));
        l5var30z[l5var2z].s := insnList;
        l5var29z := l5var29z@.f[2].e;
    };
    genFullExpr(l5var29z);
    l5var21z := insnList;
    l5var9z := insnList@;
    l5var20z := ref(l5var9z);
    l5var22z.m := set147z;
    for l5var3z to l5var2z do
       l5var22z.m := l5var22z.m - l5var30z[l5var3z].s@.f[3].m;
    for l5var3z := l5var2z downto 1 do {
        l5var26z := l5var9z.f[2].s@.f[3].s;
        l5var27z := l5var9z.f[2].s@.f[4].t;
        l5var25z := l5var9z.f[2].s@.f[5];
        l5var7z := l5var27z@.left;
        l5var8z := l5var26z@.f[0].i;
        if not l5var25z.b then
            l5var9z.f[6].i := l5var9z.f[6].i - l5var8z * l5var7z;
        insnList := l5var30z[l5var3z].s;
        l5var28z := insnList@.f[4];
        if (l5var28z.c = '_000') then {
            curVal := insnList@.f[5];
            curVal.m := curVal.m +  intZero;
            if (curVal.i < l5var7z) or
               (l5var27z@.right < curVal.i) then
                error(29); (* errIndexOutOfBounds *)
            if (l5var25z.b) then {
                l5var4z := (curVal.i - l5var7z);
                l5var5z := l5var9z.f[2].s@.f[6].i;
                l5var9z.f[3].m := l5var9z.f[3].m + [0];
                l5var9z.f[6].i := l5var4z DIV l5var5z + l5var9z.f[6].i;
                l5var6z := (l5var5z-1-l5var4z MOD l5var5z) *
                           l5var9z.f[2].s@.f[7].i;
                case l5var9z.f[8].c of
                '_000': l5var9z.f[10].i := l5var6z;
                '_001': l5var9z.f[10].i := l5var9z.f[10].i + l5var6z +
                                           l5var9z.f[2].s@.f[1].i - 48;
                '_002': error(errUsingVarAfterIndexingPackedArray);
                end; (* case *)
                l5var9z.f[9] := l5var9z.f[2].s@.f[7];
                l5var9z.f[8].b := true;
            } (* 6116 *) else {
                l5var9z.f[6].i := curVal.i  * l5var26z@.f[0].i +
                                  l5var9z.f[6].i;
            }
        } else { (* 6123*)
            if (checkBounds) then {
                l5var24z := typeCheck(l5var27z, insnList@.f[2].t);
                if (rangeMismatch) then
                    P5354(l5var27z);
            };
            if (l5var8z <> (1)) then {
                P4343;
                if (l5var27z@.base = integerType) then {
                    l5var4z := KYTA+64;
                } else {
                    l5var4z := KYTA+64-40;
                };
                addToInsnList(l5var9z.f[2].s@.f[6].i);
                insnList@.f[0].s@.f[1].i := 1;
                if (l5var7z >= (0)) then
                    addToInsnList(l5var4z)
                else
                    addToInsnList(macro + mcMULTI);
           };
           if (l5var28z.c = '_003') or
              (l5var28z.c = '_001') and
              (insnList@.f[8].c <> '_000') then
               P4343;
           l5var23z.m := (l5var9z.f[3].m + insnList@.f[3].m);
           if (not l5var25z.b) then {
               if (l5var9z.f[7].i = (18)) then {
                    if (insnList@.f[4].c = '_002') then {
                        l5var9z.f[7].i := 15;
                    } else { (* 6200 *)
                        l5var9z.f[7].i := 16;
                        curInsnTemplate := insnTemp[WTC];
                        P4343;
                        curInsnTemplate := insnTemp[XTA];
                    }; (* 6205 *)
                    l5var9z.f[0] := insnList@.f[0];
                    l5var9z.f[1] := insnList@.f[1];
                } else { (* 6211 *)
                    if (l5var9z.f[7].i >= (15)) then {
                        l5var1z :=  myminel(l5var22z.m);
                        if ((0) >= l5var1z) then {
                            l5var1z := myminel(set147z - l5var9z.f[3].m);
                            if ((0) >= l5var1z) then
                                l5var1z := (9);
                        };
                        l3var12z := insnList;
                        insnList := l5var20z;
                        l5var23z.m := l5var23z.m + [l5var1z];
                        if (l5var9z.f[7].i = (15)) then {
                            addToInsnList(insnTemp[ATI] + l5var1z);
                        } else {
                            addToInsnList(indexreg[l5var1z] + insnTemp[VTM]);
                        };
                        l5var9z.f[7].i := l5var1z;
                        l5var9z.f[3].m := l5var9z.f[3].m + [l5var1z];
                        insnList := l3var12z;
                    } else {
                            l5var1z := l5var9z.f[7].i;
                    }; (* 6251 *)
                    if (l5var1z IN insnList@.f[3].m) then {
                         P4606;
                         insnList@.f[0].s@.f[0] := l5var9z.f[1];
                         l5var9z.f[1] := insnList@.f[1];
                         insnList := l5var20z;
                         addInsnAndModify(macro+8, l5var1z);
                    } else {
                         if (insnList@.f[4].c = '_002') then {
                             addInsnAndModify(macro+9, l5var1z);
                         } else {
                             curInsnTemplate := insnTemp[WTC];
                             P4343;
                             curInsnTemplate := insnTemp[XTA];
                             addToInsnList(indexreg[l5var1z] + insnTemp[UTM]);
                         };
                         l5var9z.f[0].s@.f[0] := insnList@.f[1];
                         l5var9z.f[0] := insnList@.f[0];
                     }
                }; (* 6305 *)
           } else { (* 6306 *)
                if (l5var9z.f[8].c = '_000') then {
                    P4343;
                    if (l5var7z <> (0)) then {
                        curVal.i := ((0) - l5var7z);
                        if (not typeCheck(insnList@.f[2].t, integerType)) then
                            curVal.m := curVal.m - intZero;
                        addToInsnList(KADD+I8 + getFCSToffset);
                        insnList@.f[0].s@.f[1].i := 1;
                    };
                    l5var24z := 0 in l5var9z.f[3].m;
                    if (l5var24z) then
                        addToInsnList(macro + 5);
                    l3var12z := insnList;
                    insnList := l5var20z;
                    P4621((14));
                    if (l5var24z) then
                        addToInsnList(macro + 4);
                    l5var23z.m := l5var23z.m + [0, 10, 11, 13, 14];
                    l5var9z.f[8].c := '_002';
                    l5var9z.f[6].i := 0;
                    l5var9z.f[5].i := 0;
                    l5var9z.f[9] := l5var9z.f[2].s@.f[7];
                    curVal := l5var9z.f[9];
                    if (curVal.i = (24)) then
                        curVal.i := (7);
                    curVal := curVal;besm(ASN64-24);curVal:=;
                    addToInsnList(allocSymtab(  (* P/00C *)
                        helperNames[76] + curVal.m)+(KVTM+I11));
                    l5var9z.f[7].i := 16;
                    l5var9z.f[10].i := 0;
                    l3var12z@.f[0].s@.f[0] := l5var9z.f[1];
                    l5var9z.f[1] := l3var12z@.f[1];
                } else {
                    error(errUsingVarAfterIndexingPackedArray);
                }
            }; (* 6403 *)
            l5var9z.f[3] := l5var23z;
        };
        l5var9z.f[2].s := l5var26z;
    }; (* 6406 *)
    insnList := l5var21z;
    insnList@ := l5var9z;
}; (* P5757 *)
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
procedure P6470;
var
    l5var1z, l5var2z, l5var3z, l5var4z: word;
    l5var5z: @identrec;
    l5var6z, l5var7z, l5var8z, l5var9z, l5var10z,
    l5var11z, l5var12z, l5var13z, l5var14z: word;
    l5var15z: integer;
    l5var16z, l5var17z, l5var18z, l5var19z, l5var20z,
    l5var21z, l5var22z: word;
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function allocGlobalObject(l6arg1z: @identrec): integer;
{
    if (l6arg1z@.f[10].i = (0)) then {
        if (l6arg1z@.flags * [20, 21] <> []) then {
            curVal := l6arg1z@.id;
            curVal.m := makeNameWithStars(true);
            l6arg1z@.f[10].i := allocExtSymbol(extSymMask);
        } else {
            l6arg1z@.f[10].i := symTabPos;
            putToSymTab([]);
        }
    };
    allocGlobalObject := l6arg1z@.f[10].i;
}; (* allocGlobalObject *)
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
procedure traceEntry(isEntry: boolean);
{
    if not (debugEntry in optSflags.m) then
        exit;
    curVal := l5var5z@.id;
    addToInsnList(KVTM+I10 + addCurValToFCST);
    if (isEntry) then
        addToInsnList(KVTM+I11 + lineCnt);
    addToInsnList(getHelperProc(ord(isEntry) * 22 + 57)); (* P/C(E|I) *)
}; (* traceEntry *)
%
{ (* P6470 *)
    l5var1z := l4arg1z@.f[2];
    l5var5z := l4arg1z@.f[3].q;
    l5var7z.b := (l5var5z@.typ = NIL);
    l5var9z.b := (l5var5z@.list = NIL);
    if (l5var7z.b) then
        l5var13z.i := 3 else l5var13z.i := 4;
    l5var12z.m := l5var5z@.flags;
    l5var10z.b := (21 in l5var12z.m);
    l5var11z.b := (24 in l5var12z.m);
    if (l5var9z.b) then {
        l5var14z.i := F3307(l5var5z);
        l5var6z := l5var5z@.f[7];
    } else {
        l5var13z.i := (l5var13z.i + (2));
    };
    new(insnList);
    insnList@.f[1].s := NIL;
    insnList@.f[0].s := NIL;
    insnList@.f[2] := l5var5z@.f[3];
    insnList@.f[3].m := (l5var5z@.flags + [7:15]) * [0:8, 10:15];
    insnList@.f[4].c := '_002';
    if (l5var10z.b) then {
        l5var8z.b := not l5var7z.b;
        if (checkFortran) then {
            addToInsnList(getHelperProc(92)); (* "P/MF" *)
        }
    } else {
        l5var8z.b := true;
        if (not l5var9z.b) and (l5var1z.s <> NIL)
            or (l5var9z.b) and (l5var14z.i >= (2)) then {
            addToInsnList((KUTM+SP + l5var13z.i));
        };
    };
    l5var14z.i := 0;
(loop)
    while l5var1z.s <> NIL do { (* 6574 *)
        l5var2z := l5var1z.s@.f[3];
        l5var1z := l5var1z.s@.f[2];
        l5var21z := l5var2z.s@.f[1];
        l5var14z.i := (l5var14z.i + (1));
        l5var20z.s := insnList;
        if (l5var21z.c = '_046') or (l5var21z.c = '_047') then {
            l5var4z := l5var2z.s@.f[3];
            new(insnList);
            insnList@.f[1].s := NIL;
            insnList@.f[0].s := NIL;
            insnList@.f[3].m := [];
            set145z := set145z + l5var4z.q@.flags;
            if (l5var4z.s@.f[5].s <> NIL) then {
                addToInsnList(l5var4z.s@.f[1].i + insnTemp[XTA] +
                              l5var4z.s@.f[6].i);
                if (l5var10z.b) then
                    addToInsnList(getHelperProc(19)); (* "P/EA" *)
            } else
(a)         { (* 6636 *)
                if (l5var4z.s@.f[6].i = (0)) then {
                    if (l5var10z.b) and (21 in l5var4z.q@.flags) then {
                        addToInsnList(allocGlobalObject(l5var4z.q) +
                                      (KVTM+I14));
                        addToInsnList(KITA+14);
                        exit a;
                    } else { (* 6651 *)
                        l5var16z.i := 0;
                        formJumpOnCond(l5var16z.i);
                        padToLeft;
                        l5var4z.s@.f[6].i := moduleOffset;
                        l5var3z := l5var4z.s@.f[7];
                        l5var15z := ord(l5var4z.s@.f[3].s <> NIL);
                        l5var17z.i := F3307(l5var4z.q);
                        form3Insn(KVTM+I10+ 4+moduleOffset,
                                  KVTM+I9 + l5var15z,
                                  KVTM+I8 + 74001B);
                        formInsnAndLabel(getHelperProc(62)); (* "P/BP" *)
                        l5var15z := l5var17z.i + 2 + l5var15z;
                        form1Insn(KXTA+SP + l5var15z);
                        if ((1) < l5var17z.i) then
                            form1Insn(KUTM+SP + l5var15z)
                        else
                            form1Insn(0);
                        form2Insn(
                            getHelperProc(63(*P/B6*)) + 6437777777300000C,
                            allocGlobalObject(l5var4z.q) + KUJ);
                        if (l5var3z.s <> NIL) then {
                            repeat
                                l5var22z := l5var3z.s@.f[4];
                                if (l5var22z.c = '_002') and
                                   (l5var3z.s@.f[3].s <> NIL) then
                                    l5var22z.c := '_001';
                                form2Insn(0, ord(l5var22z.c));
                                l5var3z := l5var3z.s@.f[5];
                            until (l5var4z = l5var3z);
                        }; (* 6745 *)
                        storeObjWord([]);
                        P0715(0, l5var16z.i);
                    }
                }; (* 6752 *)
                addToInsnList((KVTM+I14 + l5var4z.q@.f[6].i));
                if 21 in l5var4z.q@.flags then
                    addToInsnList(KITA+14)
                else
                    addToInsnList(getHelperProc(64)); (* "P/PB" *)
            }; (* 6765 *)
            if (l5var21z.c = '_046') then
                l5var22z.c := '_002'
            else
                l5var22z.c := '_001';
        } else { (* 6772 *)
            genFullExpr(l5var2z.e);
            if (insnList@.f[4].c = '_001') then
                l5var22z.c := '_004'
            else
                l5var22z.c := '_003';
        }; (* 7001 *)
        if not (not l5var9z.b or (l5var22z.c <> '_004') or
               (l5var6z.s@.f[4].c <> '_003')) then
            l5var22z.c := '_003';
(loop)      if (l5var22z.c = '_004') or (l5var11z.b) then {
            P4621(14);
            addToInsnList(KITA+14);
        } else if (l5var22z.c = '_003') then {
            if (insnList@.f[2].s@.f[0].i <> (1)) then {
                l5var22z.c := '_004';
                goto loop;
            } else {
                P4343;
                (*=z-*)(q) exit q(*=z+*)
            }
        }; (* 7027 *)
        if not l5var8z.b then
            addxToInsnList(macro + 5);
        l5var8z.b := false;
        if (l5var20z.s@.f[0].s <> NIL) then {
            l5var20z.s@.f[0].s@.f[0] := insnList@.f[1];
            insnList@.f[1] := l5var20z.s@.f[1];
        };
        insnList@.f[3].m := insnList@.f[3].m + l5var20z.s@.f[3].m;
        if not l5var9z.b then {
            curVal := l5var22z;
            addToInsnList(KXTS+I8 + getFCSToffset);
        };
        if l5var9z.b and not l5var11z.b then
            l5var6z := l5var6z.s@.f[5];
    }; (* while -> 7061 *)
    traceEntry(true);
    if l5var10z.b then {
        addToInsnList(KNTR+2);
        insnList@.f[0].s@.f[1].i := 4;
    };
    if l5var9z.b then {
        addToInsnList(allocGlobalObject(l5var5z) + (KVJM+I13));
        if (20 in l5var5z@.flags) then {
            l5var17z.i := 1;
        } else {
            l5var17z.i := l5var5z@.offset div 4000000B;
        } (* 7102 *)
    } else { (* 7103 *)
        l5var15z := 0;
        if (l5var14z.i = (0)) then {
            l5var17z.i := (l5var13z.i + (1));
        } else {
            l5var17z.i := -(2 * l5var14z.i + l5var13z.i);
            l5var15z := 1;
        }; (* 7115 *)
        addInsnAndModify(macro+16 + l5var15z,
                         getValueOrAllocSymtab(l5var17z.i));
        addToInsnList(l5var5z@.offset + insnTemp[UTC] + l5var5z@.value);
        addToInsnList(macro+18);
        l5var17z.i := 1;
    }; (* 7132 *)
    insnList@.f[0].s@.f[1].i := 2;
    if (curProcNesting <> l5var17z.i) then {
        if not l5var10z.b then {
            if ((l5var17z.i + (1)) = curProcNesting) then {
                addToInsnList((KMTJ+I7 + curProcNesting));
            } else {
                l5var15z := frameRestore[curProcNesting][l5var17z.i];
                if (l5var15z = (0)) then {
                    curVal.i := 6017T; (* P/ *)
                    l5var19z.i := (curProcNesting + (16));
                    besm(ASN64-30);
                    l5var19z := ;
                    l5var18z.i := (l5var17z.i + (16));
                    besm(ASN64-24);
                    l5var18z := ;
                    curVal.m := curVal.m + l5var19z.m + l5var18z.m;
                    l5var15z := allocExtSymbol(extSymMask);
                    frameRestore[curProcNesting][l5var17z.i] := l5var15z;
                };
                addToInsnList((KVJM+I13 + l5var15z));
            }
        }
    }; (* 7176 *)
    if not l5var9z.b or ([20, 21] * l5var12z.m <> []) then {
        addToInsnList(KVTM+40074001B);
    };
    set145z := (set145z + l5var12z.m) * [1:15];
    traceEntry(false);
    if l5var10z.b then {
        if (not checkFortran) then
            addToInsnList(KNTR+7)
        else
            addToInsnList(getHelperProc(93));    (* "P/FM" *)
        insnList@.f[0].s@.f[1].i := 2;
    } else {
        if not l5var7z.b then
            addToInsnList(KXTA+SP + l5var13z.i - (1));
    }; (* 7226 *)
    if not l5var7z.b then {
        insnList@.f[2] := l5var5z@.f[3];
        insnList@.f[3].m := insnList@.f[3].m + [0];
        insnList@.f[4].c := '_002';
        set146z := set146z - l5var12z.m;
    }
    (* 7237 *)
}; (* P6470 *)
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
procedure startInsnList(l5arg1z: char);
{
    new(insnList);
    insnList@.f[0].s := NIL;
    insnList@.f[1].s := NIL;
    insnList@.f[2] := l4arg1z@.f[0];
    insnList@.f[3].m := [];
    insnList@.f[4].c := l5arg1z;
    if (l5arg1z = '_000') then {
        insnList@.f[5] := l4arg1z@.f[2];
        insnList@.f[7] := l4arg1z@.f[3];
    } else {
        insnList@.f[8].c := '_000';
        insnList@.f[7].i := (18);
        insnList@.f[5].i := curFrameRegTemplate;
        insnList@.f[6] := l4arg1z@.f[2];
    }
}; (* startInsnList *)
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
procedure P7272;
var
    l5var1z: integer;
{
    l5var1z := insnList@.f[2].s@.f[0].i;
    if (l5var1z = (1)) then {
        l3var12z := insnList;
        insnList := l4var3z;
        P4343;
        genOneOp;
        insnList := l3var12z;
        P4755;
        genOneOp;
    } else {
        P5314;
        genOneOp;
        l5var1z := (l5var1z - (1));
        formInsnAndLabel(KVTM+I13 + getValueOrAllocSymtab(-l5var1z));
        l4var7z.i := moduleOffset;
        form2Insn(KUTC+I14 + l5var1z, KXTA+I13);
        form3Insn(KUTC+I12 + l5var1z, KATX+I13,
                  KVLM+I13 + l4var7z.i);
        set145z := set145z + [12:14];
    }
}; (* P7272 *)
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
procedure genConstDiv;
    function PASDIV(r: real): word;
        external;
{
    curVal := PASDIV(1/l4var5z.i);
    addToInsnList(KMUL+I8 + getFCSToffset);
}; (* genConstDiv *)
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
procedure genEqComp;
label
    7475, 7504, 7514, 7530;
var
    l5var1z, l5var2z, l5var3z, l5var4z: word;
{
    l3var3z.i := ord(curOP) - 8;
    l5var1z.b := odd(l3var3z.i);
    if (l3var3z.i = 6) then {
        if (arg1Const) then {
            if (arg2Const) then {
                insnList@.f[5].b := (l4var4z.i IN l4var5z.m);
            } else {
                l5var2z.m := [l4var4z.i];
                if (l5var2z.m = []) then {
                    insnList@.f[5].b := false;
                } else {
                    insnList := l4var3z;
                    P4343;
                    curVal := l5var2z;
                    addToInsnList(KAAX+I8 + getFCSToffset);
                    insnList@.f[5].i := 0;
                    insnList@.f[4].c := '_003';
                }
            }; (* 7412 *)
        } else { (* 7413 *)
            l3var12z := insnList;
            insnList := l4var3z;
            l4var3z := l3var12z;
            l3var4z := (66);
            P5270;
            insnList@.f[4].c := '_002';
        }
    } else { (* 7423 *)
        if l5var1z.b then
            l3var3z.i := (l3var3z.i - (1));
        l2var13z := insnList@.f[2].t;
        curVarKind := l2var13z@.k;
        l5var4z.i := l2var13z@.size;
        if (l2var13z = realType) then {
            if (fuzzReals) then
                l4var7z.i := 0
            else
                l4var7z.i := 1;
        } else if (curVarKind = kindSet) then
            l4var7z.i := 2
        else if (curVarKind IN [kindScalar, kindRange]) then
            l4var7z.i := 3
        else {
            l4var7z.i := 4;
            (*=z-*)(a) exit a(*=z+*)
        };
        if (l5var4z.i <> (1)) then {
            P5314;
            addInsnAndModify(KVTM+I11, 1 - l5var4z.i);
            addToInsnList(getHelperProc(89 + l3var3z.i)); (* P/EQ *)
            insnList@.f[4].c := '_002';
            l5var1z.b := not l5var1z.b;
        } else (* 7471 *) if l3var3z.i = 0 then {
            if l4var7z.i = 0 then {
                l3var4z := (15);
7475:           P5270;
                insnList@.f[4].c := chr(2C);
            } else { (* 7501 *)
                l3var4z := insnTemp[AEX];
                P5433(true);
7504:           insnList@.f[4].c := chr(3C);
                insnList@.f[5].i := 0;
            };
        } else { (* 7510 *)
            case l4var7z.i of
            0: { (*7511*)
                l3var4z := 16;
                goto 7475;
            };
            1: { (*7513*)
                l5var3z.i := 3;
7514:           l3var4z := insnTemp[SUB];
                P5433(false);
                insnList@.f[0].s@.f[1] := l5var3z;
                if l5var3z.i = 3 then {
                    addToInsnList(KNTR+23B);
                    insnList@.f[0].s@.f[1].i := 2;
                };
                goto 7504;
            };
            2: { (*7527*)
                l3var4z := insnTemp[AAX];
7530:           P4343;
                addToInsnList(KAEX+ALLONES);
                P5433(true);
                goto 7504;
            };
            3: { (*7536*)
                l5var3z.i := 1;
                goto 7514;
            };
            4: { (*7540*)
                l3var4z := insnTemp[ARX];
                goto 7530;
            };
            end; (* case *)
        }; (* 7554 *)
        insnList@.f[3].m := insnList@.f[3].m - [16];
        if (l5var1z.b)
            then P5420;
    }; (* 7562 *)
    (* 7562 *)
}; (* genEqComp *)
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
{ (* genFullExpr *);
    if l4arg1z = NIL then
        exit;
7567:
    curOP := l4arg1z@.op;
    if (curOP < GETELT) then {
        genFullExpr(l4arg1z@.f[3].e);
        l4var3z := insnList;
        if (curOP = badop33) then
            l3var13z.c := chr(0C);
        genFullExpr(l4arg1z@.f[2].e);
        if (curOP = badop33) then
            l3var13z.c := chr(1C);
        if (insnList@.f[4].c = chr(0C)) then {
            arg1Const := true;
            l4var4z := insnList@.f[5];
        } else
            arg1Const := false;
        if (l4var3z@.f[4].c = chr(0C)) then {
            arg2Const := true;
            l4var5z := l4var3z@.f[5];
        } else
            arg2Const := false;
        if (curOP IN [NEOP, EQOP, LTOP, GEOP, GTOP, LEOP, INOP]) then {
            genEqComp;
        } else { (* 7625 *)
            if arg1Const and arg2Const then {
                case curOP of
                MUL:        l4var4z.r := l4var4z.r * l4var5z.r;
                RDIVOP:     l4var4z.r := l4var4z.r / l4var5z.r;
                AMPERS:     l4var4z.b := l4var4z.b and l4var5z.b;
                IDIVOP:     l4var4z.i := l4var4z.i DIV l4var5z.i;
                IMODOP:     l4var4z.i := l4var4z.i MOD l4var5z.i;
                PLUSOP:     l4var4z.r := l4var4z.r + l4var5z.r;
                MINUSOP:    l4var4z.r := l4var4z.r - l4var5z.r;
                OROP:       l4var4z.b := l4var4z.b or l4var5z.b:
                IMULOP:     l4var4z.i := l4var4z.i * l4var5z.i;
                SETAND:     l4var4z.m := l4var4z.m * l4var5z.m;
                SETXOR:     l4var4z.m := l4var4z.m MOD l4var5z.m;
                INTPLUS:    l4var4z.i := l4var4z.i + l4var5z.i;
                INTMINUS:   l4var4z.i := l4var4z.i - l4var5z.i;
                SETOR:      l4var4z.m := l4var4z.m + l4var5z.m;
                IDIVROP:    l4var4z.r := l4var4z.i / l4var5z.i;
                SETSUB:
                    goto 10075;
                NEOP, EQOP, LTOP, GEOP, GTOP, LEOP, INOP,
                badop27, badop30, badop31, MKRANGE, badop33:
                    error(200);
                end; (* case 7750 *)
                insnList@.f[5] := l4var4z;
            } else { (*7752*)
                l3var3z.i := opToMode[curOP];
                flags := opFlags[curOP];
                l3var4z := opToInsn[curOP];
                case flags of
                opf0:
7760:               P5433(curOP in [MUL, PLUSOP, SETAND, INTPLUS]);
                opf1:
                    P5270;
                opf7: {
                    P7272;
                    exit
                };
                opf2: {
                    P5531;
                    exit
                };
                opf3: {
                    P5420;
                    l3var12z := insnList;
                    insnList := l4var3z;
                    P5420;
                    l4var3z := insnList;
                    insnList := l3var12z;
                    P5531;
                    P5420;
                    exit
                };
                opf5:
                    if (arg2Const) then {
                        P4343;
                        if card(l4var5z.m) = 4 then {
                            curVal.m := [minel(l4var5z.m-intZero)+1..47];
                            (* TODO + [0,1,3] *)
                            addToInsnList(KAAX+I8 +getFCSToffset);
                            l3var3z.i := 0;
                        } else { (* 10016 *)
                            addToInsnList(macro + 5);
                            genConstDiv;
                            insnList@.f[0].s@.f[1].i := 1;
                            curVal.m := l4var5z.m - [1, 3];
                            addToInsnList(KMUL+I8 + getFCSToffset);
                            addToInsnList(KYTA+64);
                            addToInsnList(KRSUB+SP);
                            l3var3z.i := 1;
                        } (* 10036 *)
                    } else { (* 10037 *)
                        P5270;
                    };
                opf4: {
                    if arg2Const then {
                        P4343;
                        genConstDiv;
                        l3var3z.i := 1;
                    } else
                        P5270;
                };
                opf6: {
                    if (arg1Const) then {
                        insnList@.f[5].m := l4var4z.m MOD [1, 3];
                    } else {
                        if (arg2Const) then {
                            l4var3z@.f[5].m := l4var5z.m MOD [1, 3];
                        } else (q) {
                            P4343;
                            addToInsnList(KAEX+MULTMASK);
                            (*=z-*)exit q(*=z+*)
                        }
                    };
                    P5433(true);
                    insnList@.f[0].s@.f[1].i := 1;
                    if (fixMult) then
                        addToInsnList(macro + mcMULTI)
                    else
                        addToInsnList(KYTA+64);
                };
                opf8: {
10075:              l3var12z := insnList;
                    insnList := l4var3z;
                    l4var3z := l3var12z;
                    P4343;
                    addToInsnList(KAEX+ALLONES);
                    goto 7760
                }
                end; (* case 10122 *)
10122:          insnList@.f[0].s@.f[1] := l3var3z;
            }
        }
    } else { (* 10125 *)
        if (FILEPTR >= curOP) then {
            if (curOP = GETVAR) then {
                new(insnList);
                curIdRec := l4arg1z@.f[2].q;
                with insnList@ do {
                    f[0].s := NIL;
                    f[1].s := NIL;
                    f[3].b := false;
                    f[4].b := true;
                    f[5].i := curIdRec@.offset;
                    f[6] := curIdRec@.f[6];
                    f[8].b := false;
                    f[7].i := 18;
                };
                if (curIdRec@.cl = FORMALID) then {
                    P5170;
                } else if (curIdRec@.cl = ROUTINEID) then {
                    insnList@.f[6].i := 3;
                    insnList@.f[5].i := (insnList@.f[5].i + frameRegTemplate);
                } else if (insnList@.f[6].i >= 74000B) then {
                    addToInsnList(insnTemp[UTC] + insnList@.f[6].i);
                    insnList@.f[6].i := 0;
                    insnList@.f[7].i := 17;
                    insnList@.f[5].i := 0;
                }
            } else (* 10171 *)
            if (curOP = GETFIELD) then {
                genFullExpr(l4arg1z@.f[2].e);
                curIdRec := l4arg1z@.f[3].q;
                with insnList@ do {
                    f[6].i := f[6].i + curIdRec@.offset;
                    if (curIdRec@.f[7].b) then {
                        case f[8].c of
                        '_000':
                            f[10] := curIdRec@.f[8];
                        '_001': {
                            f[10].i := f[10].i + curIdRec@.f[8].i;
                            if not (S6 IN optSflags.m) then
                                f[10].i := f[10].i +
                                           curIdRec@.f[6].s@.f[1].i - 48;
                        };
                        '_002':
                            if (not l3var13z.b) then
                                error(errUsingVarAfterIndexingPackedArray)
                            else {
                                P5155;
                                insnList@.f[10] := curIdRec@.f[8];
                            }
                        end; (* 10235*)
                        insnList@.f[9] := curIdRec@.f[9];
                        insnList@.f[8].b := true;
                        insnList@.f[3].m := insnList@.f[3].m + [0];
                    }
                };
            } else (* 10244 *)
            if (curOP = GETELT) then
                P5757
            else
            if (curOP = DEREF) or (curOP = FILEPTR) then {
                genFullExpr(l4arg1z@.f[2].e);
                P5170;
            } else
            if (curOP = op36) then {
                startInsnList(chr(1));
            } else
            if (curOP = op37) then {
                startInsnList(chr(1));
                P5170;
            } else
            if (curOP = GETENUM) then
                startInsnList(chr(0))
            (*=z-*)else ;(*=z+*)
        } else (* 10272 *)
        if (curOP = ALNUM) then
            P6470
        else if (curOP IN [BOUNDS..RNEGOP]) then {
            genFullExpr(l4arg1z@.f[2].e);
            if (insnList@.f[4].c = chr(0C)) then {
                l4var4z := insnList@.f[5];
                case curOP of
                BOUNDS: {
                    l4var5z.m := [0, 1, 3] + l4var4z.m;
                    with l4arg1z@.f[3].s@ do {
                        if (l4var5z.i < f[5].i) or
                           (f[6].i < l4var5z.i) then
                            error(errNeedOtherTypesOfOperands)
                    }
                };
                TOREAL: l4var4z.r := l4var4z.i;
                NOTOP:  l4var4z.b := not l4var4z.b;
                RNEGOP: l4var4z.r := -l4var4z.r;
                INEGOP: l4var4z.i := -l4var4z.i;
                end; (* case 10345 *)
                insnList@.f[5] := l4var4z;
            } else (* 10347 *)
            if (curOP = NOTOP) then {
                P5420;
            } else {
                P4343;
                if (curOP = BOUNDS) then {
                    if (checkBounds) then
                        P5354(l4arg1z@.f[3].t);
                } else if (curOP = TOREAL) then {
                    addToInsnList(insnTemp[AVX]);
                    l3var3z.i := 3;
                    goto 10122;
                } else {
                    addToInsnList(KAVX+MINUS1);
                    if (curOP = RNEGOP) then
                        l3var3z.i := 3
                    else
                        l3var3z.i := 1;
                    goto 10122;
                }
            }
        } else (* 10376 *)
        if (curOP = STANDPROC) then {
            genFullExpr(l4arg1z@.f[2].e);
            l4var7z := l4arg1z@.f[3];
            if ((100) < l4var7z.i) then {
                P4343;
                addToInsnList(getHelperProc(l4var7z.i - 100));
            } else {
                if (insnList@.f[4].c = chr(0C)) then {
                    arg1Const := true;
                    l4var4z := insnList@.f[5];
                } else
                    arg1Const := false;
                arg2Const := (insnList@.f[2].t = realType);
                if (arg1Const) then {
                    case l4var7z.i of
                    fnSQRT:  l4var4z.r := sqrt(l4var4z.r);
                    fnSIN:   l4var4z.r := sin(l4var4z.r);
                    fnCOS:   l4var4z.r := cos(l4var4z.r);
                    fnATAN:  l4var4z.r := arctan(l4var4z.r);
                    fnASIN:  l4var4z.r := arcsin(l4var4z.r);
                    fnLN:    l4var4z.r := ln(l4var4z.r);
                    fnEXP:   l4var4z.r := exp(l4var4z.r);
                    fnABSR:  l4var4z.r := abs(l4var4z.r);
                    fnTRUNC: l4var4z.i := trunc(l4var4z.r);
                    fnODD:   l4var4z.b := odd(l4var4z.i);
                    fnORD:   l4var4z.i := ord(l4var4z.c);
                    fnCHR:   l4var4z.c := chr(l4var4z.i);
                    fnSUCC:  l4var4z.c := succ(l4var4z.c);
                    fnPRED:  l4var4z.c := pred(l4var4z.c);
                    fnPTR:   l4var4z.s := ptr(l4var4z.i);
                    fnSQRR:  l4var4z.r := l4var4z.r*l4var4z.r;
                    fnROUND: l4var4z.i := round(l4var4z.r);
                    fnCARD:  l4var4z.i := card(l4var4z.m);
                    fnMINEL: l4var4z.i := minel(l4var4z.m);
                    fnABSI:  l4var4z.i := abs(l4var4z.i);
                    fnSQRI:  l4var4z.i := l4var4z.i*l4var4z.i;
                    fnEOF,
                    fnREF,
                    fnEOLN:
                        error(201);
                    end; (* 10546 *)
                    insnList@.f[5] := l4var4z;
                } else (* 10550 *)
                if (l4var7z.i >= 14) and (16 >= l4var7z.i) then {
                    if (l4var7z.i = 15) then {
                        P4621(14);
                        addToInsnList(KITA+14);
                    } else {
                        P4621(12);
                        addToInsnList(getHelperProc(l4var7z.i - 6));
                    };
                    with insnList@ do {
                        f[4].c := chr(2C);
                        f[3].m := f[3].m + [0];
                    }
                } else {
                    P4343;
                    if (l4var7z.i = (8)) then {
                        l3var3z.i := 2;
                        addToInsnList(getHelperProc(58)); (*"P/TR"*)
                        goto 10122;
                    };
                    if (l4var7z.i IN [0, 1, 2, 3, 4, 5, 6,
                                      9, 10, 11, 12, 19, 21]) then {
                        l3var3z.i := 0;
                    } else if (l4var7z.i IN [7, 17]) then
                        l3var3z.i := 3
                    else {
                        l3var3z.i := 1;
                        (*=z-*)(q) exit q(*=z+*)
                    };
                    addToInsnList(funcInsn[l4var7z.i]);
                    goto 10122;
                }
            }
        } else { (* 10621 *)
            if (curOP = NOOP) then {
                curVal := l4arg1z@.f[0];
                if (curVal.i IN set146z) then {
                    new(insnList);
                    with insnList@ do {
                        f[2] := l4arg1z@.f[3].s@.f[0];
                        f[0].s := NIL;
                        f[1] := ;
                        f[3].m := [];
                        f[4].c := chr(1C);
                        f[7].i := (18);
                        f[5].i := indexreg[curVal.i];
                        f[6].i := 0;
                        f[8].b := false;
                    }
                } else {
                    curVal.i := (14);
                    l4arg1z@.f[0] := curVal;
                    l4arg1z := l4arg1z@.f[3].e;
                    goto 7567;
                };
                exit
            } else (q) {
                error(220);
                (*=z-*)exit q(*=z+*)
            }
        };
    }; (* 10654 *)
    insnList@.f[2] := l4arg1z@.f[0];
    (* 10656 *)
}; (* genFullExpr *)
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
procedure formFileInit;
var l4var1z, l4var2z, l4var3z, l4var4z, l4var5z: word;
{
    if (S5 IN optSflags.m) then {
        formInsnAndLabel(KUJ+I13);
    } else {
        form2Insn(KITS+13, KATX+SP);
        while (curExpr <> NIL) do {
            l4var1z.s := ptr(ord(curExpr@.f[0].s));
            l4var3z := curExpr@.f[3];
            l4var4z := l4var3z.s@.f[6];
            l4var2z := l4var3z.s@.f[3].s@.f[3];
            l4var5z := l4var3z.s@.f[3].s@.f[4];
            if (l4var4z.i < 74000B) then {
                form1Insn(getValueOrAllocSymtab(l4var4z.i) +
                          insnTemp[UTC] + I7);
                l4var4z.i := 0;
            };
            form3Insn(KVTM+I12 + l4var4z.i, KVTM+I10 + fileBufSize,
                      KVTM+I9 + l4var5z.i);
            form1Insn(KVTM+I11 + l4var2z.s@.f[0].i);
            if (l4var1z.s = NIL) then {
                form1Insn(insnTemp[XTA]);
            } else {
                curVal := l4var1z.s@.f[3];
                if (curVal.i = (512)) then
                    curVal := l4var1z.s@.f[1];
                form1Insn(KXTA+I8 + getFCSToffset);
            };
            formInsnAndLabel(getHelperProc(69)); (*"P/CO"*)
            curVal := l4var3z.s@.f[0];
            form2Insn(KXTA+I8+getFCSToffset, KATX+I12+26);
            if (l4var5z.i <> 0) and
               typeCheck(l4var2z.t, integerType) then
                form2Insn(KXTA+ZERO, KATX+I12+25);
            curExpr := curExpr@.f[2].e;
        };
        form1Insn(getHelperProc(70)(*"P/IT"*) + (-I13-100000B));
        padToLeft;
    }
}; (* formFileInit *)
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
{ (* formOperator *)
    l3var13z.c := chr(1C);
    if (errors and (l3arg1z <> SETREG)) or (curExpr = NIL) then
        exit;
    if not (l3arg1z IN [gen3, gen6, gen9, gen14, gen16]) then
        genFullExpr(curExpr);
    case l3arg1z of
    gen7: genOneOp;
    SETREG: {
        with insnList@ do {
            l3var3z.i := F5142;
            new(l3var5z.e);
            l3var5z.s@.f[2].e := strp63z;
            strp63z := l3var5z.e;
            l3var5z.e@.op := NOOP;
            case f[8].c of
            '_000': {
                if (l3var3z.i = (0)) then {
                    l3var2z.i := (14);
                } else {
                    l3var10z.m := set148z * set147z;
                    if (l3var10z.m <> []) then {
                        l3var2z.i := minel(l3var10z.m);
                    } else {
                        l3var2z.i := (14);
                    };
                    if (l3var3z.i <> (1)) then {
                        P4621(l3var2z.i);
                        addToInsnList(KITA + l3var2z.i);
                        P5117(op37);
                    } else if (l3var2z.i <> (14)) then {
                        P4621(l3var2z.i);
                        genOneOp;
                    };
                    l3var11z.m := [l3var2z.i] - [14];
                    set145z := set145z - l3var11z.m;
                    set147z := set147z - l3var11z.m;
                    set146z := set146z + l3var11z.m;
                };
                curVal := l3var2z;
                l3var5z.s@.f[0] := curVal;
            };
            '_001': {
                curVal.i := (14);
                l3var5z.s@.f[0] := curVal;
            };
            '_002':
                error(errVarTooComplex);
            end; (* case *)
        }; (* with *)
        l3var5z.s@.f[3].e := curExpr;
    }; (* SETREG *)
    gen0: {
        P4343;
        if (F5142 > 1) then
            P5117(op36)
    };
    STORE: {
        P4755;
        genOneOp
    };
    gen3: {
        curInsnTemplate := curVal.i;
        formOperator(LOAD);
        curInsnTemplate := insnTemp[XTA];
    };
    gen5: {
        if (insnList@.f[8].c <> chr(0C)) then
            error(errVarTooComplex);
        P4621((9));
        genOneOp;
    };
    gen6: {
        l3var1z := curVal;
        genFullExpr(curExpr);
        P4343;
        if (9 IN insnList@.f[3].m) then
            error(errVarTooComplex);
        genOneOp;
        form1Insn(KATX+I9 + l3var1z.i);
    };
    gen8: {
        P4621(12);
        genOneOp
    };
    gen9: {
        curVal.m := curVal.m + intZero;
        form1Insn(KXTA+I8 + getFCSToffset);
    };
    gen10: {
        P4343;
        addxToInsnList(macro + 5);
        genOneOp;
    };
    gen11, gen12: {
        P4621((11));
        if (l3arg1z = gen12) then
            addxToInsnList(macro + 5);
        genOneOp;
        set145z := (set145z + [12]);
    };
    FILEACCESS: {
        P4621((12));
        genOneOp;
        formInsnAndLabel(jumpTarget);
    };
    gen14:
        formFileInit;
    LOAD: {
        P4343;
        genOneOp
    };
    gen15:
        with insnList@ do {
            l3var9z.b := jumpTarget = 0;
            l3var3z.i := jumpTarget;
            if (f[4].c = chr(0C)) then {
                if (f[5].b) then {
                    jumpTarget := 0;
                } else {
                    if (l3var9z.b) then {
                        formJumpOnCond(jumpTarget);
                    } else {
                        form1Insn(insnTemp[UJ] + jumpTarget);
                    }
                }
            } else {
                l3var8z.b := (16 in insnList@.f[3].m);
                if (insnList@.f[4].c = chr(3C)) and
                   (insnList@.f[5].i <> (0)) then {
                    genOneOp;
                    if (l3var8z.b) then {
                        if (l3var9z.b) then
                            formJumpOnCond(l3var3z.i)
                        else
                            form1Insn(insnTemp[UJ] + l3var3z.i);
                        P0715(0, jumpTarget);
                        jumpTarget := l3var3z.i;
                    } else {
                        if (not l3var9z.b) then {
                            if (not putLeft) then
                                padToLeft;
                            P0715(l3var3z.i, jumpTarget);
                        }
                    };
                } else {
                    if (insnList@.f[4].c =chr(1C)) then {
                        bool49z := false;
                        P4343;
                        bool49z := true;
                    };
                    genOneOp;
                    if (l3var8z.b) then
                        l3var4z := insnTemp[U1A]
                    else
                        l3var4z := insnTemp[UZA];
                    if (l3var9z.b) then {
                        int51z := l3var4z;
                        formJumpOnCond(l3var3z.i);
                        int51z := insnTemp[UJ];
                        jumpTarget := l3var3z.i;
                    } else {
                        form1Insn(l3var4z + l3var3z.i);
                    }
                }
            }
        }; (* gen15 *)
    gen16: {
        l3var5z.e := curExpr;
        curExpr := curExpr@.f[2].e;
        formOperator(gen11);
        genFullExpr(l3var5z.s@.f[3].e);
        if (11 IN insnList@.f[3].m) then
            error(44); (* errIncorrectUsageOfStandProcOrFunc *)
        P4621(12);
        genOneOp;
        arg1Type := l3var5z.s@.f[3].e@.typ;
        with arg1Type@.range@ do
            l3var3z.i := right - left + 1;
        form2Insn((KVTM+I14) + l3var3z.i,
                  (KVTM+I10+64) - arg1Type@.pcksize);
        l3var3z.i := ord(l3var5z.s@.f[0].s);
        l3var1z.i := arg1Type@.perword;
        if (l3var3z.i = 72) then
            l3var1z.i := 1 - l3var1z.i;
        form1Insn(getValueOrAllocSymtab(l3var1z.i) + (KVTM+I9));
        if typeCheck(curExpr@.typ, integerType) then {
            l3var1z.i := KXTA+ZERO;
        } else {
            l3var1z.i := insnTemp[XTA];
        };
        form1Insn(l3var1z.i);
        formInsnAndLabel(getHelperProc(l3var3z.i));
   };
   LITINSN: {
        with insnList@ do {
            if (f[4].c <> chr(0C)) then
                error(errNoConstant);
            if (insnList@.f[2].s@.f[0].i <> (1)) then
                error(errConstOfOtherTypeNeeded);
            curVal := insnList@.f[5];
        }
    };
    end; (* case *)
}; (* formOperator *)
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
procedure parseTypeRef(var newtype: @types; skipTarget: setofsys);
label
    12247, 12366, 12476, 12760, 13020;
type
    pair = record
            first, second: integer
        end;
    pair7 = array [1..7] of pair;
    caserec = record
            f1, f2: integer;
            pairs: pair7;
        end;
var
    l3var1z: word;
    cond: boolean;
    cases: caserec;
    leftBound, rightBound: word;
    numBits: integer;
    l3var22z: word;
    span: integer;
    curEnum: @identrec;
    curField: @identrec;
    l3var26z, nestedType, tempType, curType: @types;
    l3var30z: word;
    l3var31z: @identrec;
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
procedure definePtrType(toType: @types);
{
    new(curType = 4);
    curType@ := [1, 15, kindPtr, toType];
    new(curEnum = 5);
    curEnum@ := [curIdent, lineCnt, typelist, curType, TYPEID];
    typelist := curEnum;
}; (* definePtrType *)
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
procedure parseRecordDecl(rectype: @types; isOuterDecl: boolean);
var
    l4typ1z, selType, l4var3z, l4var4z, l4var5z: @types;
    l4var6z: @identrec;
    l4var7z, l4var8z: word;
    l4var9z: integer;
    l4var10z, l4var26z: caserec;
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
procedure addToTypeHashTab;
{
    curEnum@ := [curIdent, , typeHashTabBase[bucket], ,
                    FIELDID, NIL, curType, l3var1z];
    typeHashTabBase[bucket] := curEnum;
}; (* addToTypeHashTab *)
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
procedure computeFieldOffsets;
label
    11523, 11622;
var
    l5var1z, pairIdx, l5var3z, l5var4z, l5var5z: integer;
    l5var6z: @pair;
{
    parseTypeRef(selType, skipTarget + [CASESY]);
    if (curType@.ptr2 = NIL) then {
        curType@.ptr2 := curField;
    } else {
        l3var31z@.list := curField;
    };
    cond := isFileType(selType);
    if (not isOuterDecl) and cond then
        error(errTypeMustNotBeFile);
    curType@.s8.f[5].b := cond or curType@.s8.f[5].b;
    l3var31z := curEnum;
    repeat
        curField@.typ := selType;
(q)     if (l3var1z.b) then {
            l5var1z := selType@.bits;
            curField@.width := l5var1z;
            if (l5var1z <> 48) then {
                for pairIdx to cases.f2 do
11523:          {
                    l5var6z := ref(cases.pairs[pairIdx]);
                    if (l5var6z@.first >= l5var1z) then {
                        curField@.shift := 48 - l5var6z@.first;
                        curField@.offset := l5var6z@.second;
                        if not (S6 IN optSflags.m) then
                            curField@.shift := 48 - curField@.width -
                                                  curField@.shift;
                        l5var6z@.first := l5var6z@.first - l5var1z;
                        if l5var6z@.first = 0 then {
                            cases.pairs[pairIdx] :=
                                cases.pairs[cases.f2];
                            cases.f2 := cases.f2 - 1;
                        }; (* 11562 *)
                        goto 11622;
                    }
                }; (* 11564 *)
                if (cases.f2 <> 7) then {
                    cases.f2 := cases.f2 + 1;
                    pairIdx := cases.f2;
                } else {
                    l5var3z := 48;
                    for l5var4z to 7 do {
                        l5var5z := cases.pairs[l5var4z].first;
                        if (l5var5z < l5var3z) then {
                            l5var3z := l5var5z;
                            pairIdx := l5var4z;
                        }
                    }; (* for *)
                }; (* 11606 *)
                cases.pairs[pairIdx] := [48, cases.f1];
                cases.f1 := cases.f1 + 1;
                goto 11523;
            }
        }; (* 11615 *)
        curField@.pckfield := false;
        curField@.offset := cases.f1;
        cases.f1 := cases.f1 + selType@.size;
11622:
        if (PASINFOR.listMode = 3) then {
            write(' ':16);
            if (curField@.pckfield) then
                write('PACKED');
            write(' FIELD ');
            printTextWord(curField@.id);
            write('.OFFSET=', curField@.offset:5 oct, 'B');
            if (curField@.pckfield) then {
                write('.<<=SHIFT=', curField@.shift:2,
                      '. WIDTH=', curField@.width:2, ' BITS');
            } else {
                write('.WORDS=', selType@.size:0);
            };
            writeLN;
        };
        cond := (curField = curEnum);
        curField := curField@.list;
    until cond;
    (* 11674 *)
}; (* computeFieldOffsets *)
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
{ (* parseRecordDecl *)
    int93z := 3;
    inSymbol;
    (*11702*)
    while (SY = IDENT) do {
        l4var6z := NIL;
        repeat
            if (SY <> IDENT) then {
                error(errNoIdent);
            } else {
                if (hashTravPtr <> NIL) then
                    error(errIdentAlreadyDefined);
                new(curEnum = 10);
                addToTypeHashTab;
                if (l4var6z = NIL) then {
                    curField := curEnum;
                } else {
                    l4var6z@.list := curEnum;
                };
                l4var6z := curEnum;
                int93z := 3;
                inSymbol;
            };
            cond := (SY <> COMMA);
            if (not cond) then {
                int93z := 3;
                inSymbol;
            }
        until cond;
        checkSymAndRead(COLON);
        computeFieldOffsets;
        if (SY = SEMICOLON) then {
            int93z := 3;
            inSymbol;
        }
    }; (*11752*)
    if (SY = CASESY) then {
        int93z := 3;
        inSymbol;
        selType := integerType;
(identif)
        if (SY <> IDENT) then {
            error(3);
            skip((skipTarget + [OFSY]));
        } else { (* 11766 *)
            l4var8z := curIdent;
            l4var9z := bucket;
            curEnum := hashTravPtr;
            inSymbol;
            if (SY = COLON) then {
                if (curEnum <> NIL) then
                    error(errIdentAlreadyDefined);
                new(curEnum = 10);
                curIdent := l4var8z;
                bucket := l4var9z;
                addToTypeHashTab;
                inSymbol;
                curField := curEnum;
                computeFieldOffsets;
            } else {
                curEnum := symHashTabBase[l4var9z];
                while (curEnum <> NIL) do {
                    if (curEnum@.id <> l4var8z) then {
                        curEnum := curEnum@.next;
                    } else {
                        if (curEnum@.cl <> TYPEID) then {
                            error(errNotAType);
                            selType := integerType;
                        } else {
                            selType := curEnum@.typ;
                        };
                        exit identif;
                    };
                };
                error(errNotDefined)
            };
        }; (* 12035 *)
        if (selType@.k = kindRange) then
            selType := selType@.base;
        checkSymAndRead(OFSY);
        l4var10z := cases;
        l4var26z := cases;
        l4typ1z := NIL;
        repeat
            l4var3z := NIL;
            repeat
                parseLiteral(l4var4z, l4var7z, false);
                if (l4var4z = NIL) then
                    error(errNoConstant)
                else if (not typeCheck(l4var4z, selType)) then
                    error(errConstOfOtherTypeNeeded);
                new(l4var5z = 7);
                l4var5z@ := [cases, 48, kindCases,
                                    l4var7z, NIL, NIL, NIL];
                if (l4var3z = NIL) then {
                    tempType := l4var5z;
                } else {
                    l4var3z@.s8.f[6].t := l4var5z;
                };
                l4var3z := l4var5z;
                inSymbol;
                cond := (SY <> COMMA);
                if (not cond) then
                    inSymbol;
            until cond;
            if (l4typ1z = NIL) then {
                if (curType@.base = NIL) then {
                    curType@.base := tempType;
                } else {
                    rectype@.s8.f[4].t := tempType;
                }
            } else {
                l4typ1z@.s8.f[5].t := tempType;
            };
            l4typ1z := tempType;
            checkSymAndRead(COLON);
            if (SY <> LPAREN) then
                requiredSymErr(LPAREN);
            parseRecordDecl(tempType, false);
            if (l4var26z.f1 < cases.f1) or
               l3var1z.b and (cases.f1 = 1) and (l4var26z.f1 = 1) and
                (cases.f2 = 1) and (l4var26z.f2 = 1) and
                (cases.pairs[1].first < l4var26z.pairs[1].first) then {
                l4var26z := cases;
            }; (* 12201 *)
            cases := l4var10z;
            checkSymAndRead(RPAREN);
            cond := SY <> SEMICOLON;
            if (not cond) then
                inSymbol;
            if (SY = ENDSY) then
                cond := true;
        until cond;
        cases := l4var26z;
    }; (* 12232 *)
    rectype@.size := cases.f1;
    if l3var1z.b and (cases.f1 = 1) and (cases.f2 = 1) then {
        rectype@.bits := 48 - cases.pairs[1].first;
    }
    (* 12242 *)
}; (* parseRecordDecl*)
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
{ (* parseTypeRef *)
    l3var1z.b := false;
12247:
    if (SY = LPAREN) then {
        span := 0;
        int93z := 0;
        inSymbol;
        curField := NIL;
        new(curType = 6);
        while (SY = IDENT) do {
            if (isDefined) then
                error(errIdentAlreadyDefined);
            new(curEnum = 7);
            curEnum@ := [curIdent, curFrameRegTemplate,
                            symHashTabBase[bucket], curType,
                            ENUMID, NIL, ptr(span)];
            symHashTabBase[bucket] := curEnum;
            span := span + 1;
            if (curField = NIL) then {
                curType@.enums := curEnum;
            } else {
                curField@.list := curEnum;
            };
            curField := curEnum;
            inSymbol;
            if (SY = COMMA) then {
                int93z := 0;
                inSymbol;
            } else {
                if (SY <> RPAREN) then
                    requiredSymErr(RPAREN);
            };
        }; (* 12324 *)
        checkSymAndRead(RPAREN);
        if (curField = NIL) then {
            curType := booleanType;
            error(errNoIdent);
        } else {
            curType@ := [1, nrOfBits(span - 1), kindScalar, ,
                          span, 0];
        };
    } else (* 12344 *)
    if (SY = ARROW) then {
        inSymbol;
        if (SY <> IDENT) then {
            error(errNoIdent);
            curType := pointerType;
        } else {
            if (hashTravPtr = NIL) then {
                if (inTypeDef) then {
                    if (knownInType(curEnum)) then {
                        curType := curEnum@.typ;
                    } else {
                        definePtrType(integerType);
                    };
                } else {
12366:              error(errNotAType);
                    curType := pointerType;
                };
            } else {
                if (hashTravPtr@.cl <> TYPEID) then {
                    goto 12366
                };
                new(curType = 4);
                with curType@ do {
                    size := 1;
                    bits := 15;
                    k := kindPtr;
                    base := hashTravPtr@.typ;
                }
            }; (* 12405 *)
            inSymbol;
        }
    } else (* 12410 *)
    if (SY = IDENT) then {
        if (hashTravPtr <> NIL) then {
            if (hashTravPtr@.cl = TYPEID) then {
                curType := hashTravPtr@.typ;
            } else {
                goto 12760;
            }
        } else {
            if (inTypeDef) then {
                if (knownInType(curEnum)) then {
                    curType := curEnum@.typ;
                    curType@.base := booleanType;
                } else {
                    definePtrType(booleanType);
                };
            } else {
                error(errNotAType);
                curType := integerType;
            };
        };
        inSymbol;
    } else { (* 12440 *)
        if (SY = PACKEDSY) then {
            l3var1z.b := true;
            inSymbol;
            goto 12247;
        };
        if (SY = RECORDSY) then { (* 12446 *)
            new(curType = 7);
            strp121z := curType;
            with curType@ do {
                size := 0;
                bits := 48;
                k := kindRecord;
                ptr1 := NIL;
                ptr2 := NIL;
                flag := false;
                pckrec := l3var1z.b;
            };
            cases.f1 := 0;
            cases.f2 := 0;
            parseRecordDecl(curType, true);
            checkSymAndRead(ENDSY);
        } else (* 12467 *)
        if (SY = ARRAYSY) then {
            inSymbol;
            if (SY = LBRACK) then
                inSymbol;
            tempType := NIL;
12476:      parseTypeRef(nestedType, skipTarget + [OFSY]);
            curVarKind := nestedType@.k;
            if (curVarKind <> kindRange) then {
                if (curVarKind = kindScalar) and
                   (nestedType <> integerType) then {
                    span := nestedType@.numen;
                } else {
                    error(8); (* errNotAnIndexType *)
                    nestedType := integerType;
                    span := 10;
                };
                defineRange(nestedType, 0, span - 1);
            }; (* 12524 *)
            new(l3var26z, kindArray);
            with l3var26z@ do {
                size := ord(tempType);
                bits := 48;
                k := kindArray;
                range := nestedType;
            };
            if (tempType = NIL) then
                curType := l3var26z
            else
                tempType@.base := l3var26z;
            tempType := l3var26z;
            if (SY = COMMA) then {
                inSymbol;
                goto 12476;
            };
            if (SY = RBRACK) then
                inSymbol;
            checkSymAndRead(OFSY);
            parseTypeRef(nestedType, skipTarget);
            l3var26z@.base := nestedType;
            if isFileType(nestedType) then
                error(errTypeMustNotBeFile);
            repeat with l3var26z@, s8.f[4].s@ do {
                span := f[6].i - f[5].i + 1;
                tempType := ptr(size);
                l3var22z.i := base@.bits;
                if (24 < l3var22z.i) then
                    l3var1z.b := false;
                bits := 48;
                if (l3var1z.b) then {
                    l3var22z.i := 48 DIV l3var22z.i;
                    if (l3var22z.i = 9) then {
                        l3var22z.i := 8;
                    } else if (l3var22z.i = 5) then {
                        l3var22z.i := 4
                    } (*=z-*)else(*=z+*) ;
                    perword := l3var22z.i;
                    pcksize := 48 DIV l3var22z.i;
                    l3var22z.i := span * pcksize;
                    if l3var22z.i mod 48 = 0 then
                        numBits := 0
                    else
                        numBits := 1;
                    size := l3var22z.i div 48 + numBits;
                    if (size = 1) then
                        bits := l3var22z.i;
                } else { (* 12633 *)
                    size := span * base@.size;
                    curVal.i := base@.size;
                    curVal.m := ((curVal.m * [7:47]) + [0]);
                    if (range@.base <> integerType) then
                        curVal.m := (curVal.m + [1, 3]);
                    l3var26z@.perword := KMUL+ I8 + getFCSToffset;
                }; (* 12652 *)
                l3var26z@.pck := l3var1z.b;
                l3var1z.b := false;
                cond := (curType = l3var26z);
                l3var26z := tempType;
            } until cond;
        } else (* 12663 *)
        if (SY = FILESY) then {
            inSymbol;
            checkSymAndRead(OFSY);
            parseTypeRef(nestedType, skipTarget);
            if (isFileType(nestedType)) then
                error(errTypeMustNotBeFile);
            if (l3var1z.b) then {
                l3var22z.i := nestedType@.bits;
                if ((24) < l3var22z.i) then
                    l3var1z.b := false;
            };
            new(curType, kindFile);
            if (not l3var1z.b) then
                l3var22z.i := 0;
            with curType@ do {
                size := (30);
                bits := (48);
                k := kindFile;
                base := nestedType;
                elsize := l3var22z.i;
            }
        } else (* 12721 *)
        if (SY = SETSY) then {
            inSymbol;
            checkSymAndRead(OFSY);
            parseTypeRef(nestedType, skipTarget);
            with nestedType@ do {
                if (k = kindRange) and
                   (left >= (0)) and
                   ((47) >= right) then
                    numBits := (right + (1))
                else if (k = kindScalar) and
                        ((48) >= numen) then
                    numBits := numen
                else (q) {
                    numBits := (48);
                    error(63); (* errBadBaseTypeForSet *)
                    (*=z-*)exit q(*=z+*)
                }
            };
            new(curType, kindSet);
            with curType@ do {
                size := 1;
                bits := numBits;
                k := kindSet;
                base := nestedType;
            }
        } else (q) {
12760:      ;
            parseLiteral(tempType, leftBound, true);
            if (tempType <> NIL) then {
                inSymbol;
                if (SY <> COLON) then {
                    requiredSymErr(COLON);
                } else {
                    inSymbol;
                };
                parseLiteral(curType, rightBound, true);
                if (curType = tempType) and
                   (curType@.k = kindScalar) then {
                    defineRange(curType, leftBound.i, rightBound.i);
                    inSymbol;
                    goto 13020;
                }
            };
            error(64); (* errIncorrectRangeDefinition *)
            curType := booleanType;
            (*=z-*)exit q(*=z+*)
        };
    };
13020:
    if (errors) then
        skip(skipToSet + [RPAREN, RBRACK, SEMICOLON, OFSY]);
    newtype := curType;
}; (* parseTypeRef *)
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
procedure P13026(l3arg1z: @insnltyp);
var
    l3var1z: @insnltyp;
{
    if (l3arg1z@.f[5].i = (0)) then {
        l3arg1z@.f[5].i := FcstCnt;
        l3var1z := l3arg1z@.f[3].s;
        while (l3var1z <> NIL) do {
            curVal := l3var1z@.f[0];
            l3var1z := l3var1z@.f[5].s;
            toFCST;
        }
    }
}; (* P13026 *)
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
procedure formPMD;
var
    l3var1z, l3var2z, l3var3z: word;
    l3var4z: boolean;
    l3var5z: kind;
{
    for l3var4z := false to true do {
        if l3var4z then {
            optSflags.m := (optSflags.m + [S3]);
            curVal.i := 74001B;
            P0715(2, 34); (*"P/DS"*)
            curVal := l2arg2z@.id;
            toFCST;
            curVal.i := lineCnt;
            toFCST;
        }; (* 13063 *)
        for l2var22z := 0 to 127 do {
            curIdRec := symHashTabBase[l2var22z];
            (*13066*)
            while (curIdRec <> NIL) and
                  (l2arg2z < curIdRec) do with curIdRec@ do {
                l3var2z.i := typ@.size;
                if (cl IN [VARID, FORMALID]) and
                  (value < 74000B) then {
                    curVal := id;
                    if (l3var4z) then
                        toFCST;
                    l3var1z.t := typ;
                    l3var5z := l3var1z.t@.k;
                    l3var3z.c := chr(0C);
                    if (l3var5z = kindPtr) then {
                        l3var1z := l3var1z.s@.f[3];
                        l3var5z := l3var1z.t@.k;
                        l3var3z.m := [0];
                    };
                    if (l3var1z.t = realType) then
                        curVal.i := 0
                    else if typeCheck(l3var1z.t, integerType) then
                        curVal.i := 100000B
                    else if typeCheck(l3var1z.t, charType) then
                        curVal.i := 200000B
                    else if (l3var5z = kindArray) then
                        curVal.i := 400000B
                    else if (l3var5z = kindScalar) then {
                        P13026(l3var1z.s);
                        curVal.i := 1000000B * l3var1z.s@.f[5].i + 300000B;
                    } else if (l3var5z = kindFile) then
                        curVal.i := 600000B
                    else {
                        curVal.i := 500000B;
                        (*=z-*)(q) exit q(*=z+*)
                    };
                    curVal.i := (curVal.i + curIdRec@.f[6].i);
                    l3var2z := l3var2z;
                    besm(ASN64-33);
                    l3var2z := ;
                    curVal.m := curVal.m * [15:47] + l3var2z.m + l3var3z.m;
                    if (l3var4z) then
                        toFCST;
                }; (* 13164 *)
                curIdRec := curIdRec@.next;
            }; (* 13166 *)
        }; (*13167+*)
        curVal.m := [];
        if l3var4z then
            toFCST;
    }
}; (* formPMD *)
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
procedure parseDecls(l3arg1z: integer);
var
    l3var1z, l3var2z: word; l3var3z: boolean;
{
    case l3arg1z of
    0: {
        int93z := 0;
        inSymbol;
        if (SY <> IDENT) then
            errAndSkip(3, skipToSet + [IDENT]);
    };
    1: {
        prevErrPos := 0;
        write('IDENT ');
        printTextWord(l2var12z);
        write(' IN LINE ', curIdRec@.offset:0);
    };
    2: {
        with l2arg2z@ do
            ; (* useless *)
        padToLeft;
        l3var3z := 22 IN l2arg2z@.flags;
        l3arg1z := l2arg2z@.f[10].i;
        l3var2z.i := moduleOffset - 40000B;
        if (l3arg1z <> (0)) then
            symTab[l3arg1z] := [24, 29] + l3var2z.m * halfWord;
        l2arg2z@.f[10].i := moduleOffset;
        l3arg1z := F3307(l2arg2z);
        if l3var3z then {
            if ((41) >= entryPtCnt) then {
                curVal := l2arg2z@.id;
                entryPtTable[entryPtCnt] := makeNameWithStars(true);
                entryPtTable[entryPtCnt+1] := [1] + l3var2z.m - [0, 3];
                entryPtCnt := (entryPtCnt + (2));
            } else
                error(87); (* errTooManyEntryProcs *)
        };
        if (l2arg2z@.typ = NIL) then {
            l3var2z.i := 3;
        } else {
            l3var2z.i := 4;
        };
        if l3var3z then
            form2Insn((KVTM+I14) + l3arg1z + (l3var2z.i - 3) * 1000B,
                      getHelperProc(94 (*"P/NN"*)) - 10000000B);
        if 1 < l3arg1z then {
            l3var2z.i := getValueOrAllocSymtab(-(l3var2z.i+l3arg1z));
        };
        if (S5 IN optSflags.m) and
           (curProcNesting = 1) then
            l3var1z.i := 59
        else
            l3var1z.i := curProcNesting;
        l3var1z.i := getHelperProc(l3var1z.i) - (-4000000B);
        if l3arg1z = 1 then {
            form1Insn((KATX+SP) + l3var2z.i);
        } else if (l3arg1z <> 0) then {
            form2Insn(KATX+SP, (KUTM+SP) + l3var2z.i);
        } (*=z-*)else(*=z+*) ;
        formInsnAndLabel(l3var1z.i);
        savedObjIdx := objBufIdx;
        if (curProcNesting <> (1)) then
            form1Insn((0));
        if l3var3z then
            form1Insn(KVTM+I8+74001B);
        if (l2var11z.i <> 0) then {
            form1Insn(insnTemp[XTA]);
            formInsnAndLabel(KVJM+I13 + l2var11z.i);
            curVal := l2var11z;
            P0715(2, 49 (* "P/RDC" *));
        };
        if (curProcNesting = (1)) then {
            if (heapCallsCnt <> (0)) and
               (heapSize = (0)) then
                error(65 (*errCannotHaveK0AndNew*));
            l3var3z := (heapSize = (0)) or
                (heapCallsCnt = (0)) and (heapSize = (100));
            if (heapSize = (100)) then
                heapSize := 4;
            if (not l3var3z) then {
                form2Insn(KVTM+I14+getValueOrAllocSymtab(heapSize*2000B),
                          getHelperProc(26 (*"P/GD"*)));
                padToLeft;
            }
        };
        if (doPMD) then
            formPMD;
    }
    end; (* case *)
}; (* parseDecls *)
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
procedure statement;
label
    8888;
var
    l3var1z: @insnltyp;
    l3var2z: @numLabel;
    l3var3z: @strLabel;
    l3var4z, l3var5z: word;
    l3var6z: idclass;
    l3var7z, l3var8z: word;
    l3var9z: integer;
    l3var10z, l3var11z, l3var12z: word;
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function isCharArray(l4arg1z: @types): boolean;
{
    with l4arg1z@ do
        isCharArray := (k = kindArray) and (base = charType);
}; (* isCharArray *)
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
procedure expression;
    forward;
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
procedure parseLval;
label
    13462, 13530;
var
    l4var1z, l4var2z: word;
    l4var3z: @types;
    l4var4z: kind;
{
    if (hashTravPtr@.cl = FIELDID) then {
        curExpr := strp62z;
        goto 13530;
    } else {
        new(curExpr);
        with curExpr@ do {
            typ := hashTravPtr@.typ;
            op := GETVAR;
            f[2].q := hashTravPtr;
        };
13462:  inSymbol;
        l4var3z := curExpr@.typ;
        l4var4z := l4var3z@.k;
        if (SY = ARROW) then {
            new(l4var1z.e);
            with l4var1z.e@ do {
                f[2].e := curExpr;
                if (l4var4z = kindPtr) then {
                    typ := l4var3z@.base;
                    op := DEREF;
                } else if (l4var4z = kindFile) then {
                    typ := l4var3z@.base;
                    op := FILEPTR;
                } else (q) {
                    stmtName := '  ^   ';
                    error(errWrongVarTypeBefore);
                    l4var1z.e@.typ := l4var3z;
                    (*=z-*)exit q(*=z+*)
                }
            };
            curExpr := l4var1z.e;
        } else if (SY = PERIOD) then {
            if (l4var4z = kindRecord) then {
                int93z := 3;
                strp121z := l4var3z;
                inSymbol;
                if (hashTravPtr = NIL) then {
                    error(20); (* errDigitGreaterThan7 ??? *)
                } else 13530: {
                    new(l4var1z.e);
                    with l4var1z.e@ do {
                        typ := hashTravPtr@.typ;
                        op := GETFIELD;
                        f[2].e := curExpr;
                        f[3].q := hashTravPtr;
                    };
                    curExpr := l4var1z.e;
                }
            } else {
                stmtName := '  .   ';
                error(errWrongVarTypeBefore);
            };
        } else if (SY = LBRACK) then {
            stmtName := '  [   ';
            repeat
                l4var1z.e := curExpr;
                expression;
                l4var3z := l4var1z.e@.typ;
                if (l4var3z@.k <> kindArray) then {
                    error(errWrongVarTypeBefore);
                } else {
                    if (not typeCheck(l4var3z@.range, curExpr@.typ)) then
                        error(66 (*errOtherIndexTypeNeeded *));
                    new(l4var2z.e);
                    with l4var2z.e@ do {
                        typ := l4var3z@.base;
                        f[2] := l4var1z;
                        f[3].e := curExpr;
                        op := GETELT;
                    };
                    l4var1z := l4var2z;
                };
                curExpr := l4var1z.e;
                stmtName := '  ,   ';
            until (SY <> COMMA);
            if (SY <> RBRACK) then
                error(67 (*errNeedBracketAfterIndices*));
        } else exit;
    };
    goto 13462;
}; (* parseLval *)
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
procedure castToReal(var value: @expr);
var
    cast: @expr;
{
    new(cast);
    with cast@ do {
        typ := realType;
        op := TOREAL;
        arg1.e := value;
        value := cast;
    }
}; (* castToReal *)
%
function areTypesCompatible(var l4arg1z: @expr): boolean;
{
    if (arg1Type = realType) then {
        if typeCheck(integerType, arg2Type) then {
            castToReal(l4arg1z);
            areTypesCompatible := true;
            exit
        };
    } else if (arg2Type = realType) and
               typeCheck(integerType, arg1Type) then {
        castToReal(curExpr);
        areTypesCompatible := true;
        exit
    };
    areTypesCompatible := false;
}; (* areTypesCompatible *)
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
procedure parseCallArgs(l4arg1z: @identrec);
label
    13736;
var
    l4var1z: boolean;
    l4var2z: @expr;
    l4var3z, l4var4z: @expr;
    l4var5z: @identrec;
    l4var6z: operator;
    l4var7z: idclass;
{
    with l4arg1z@ do {
        if typ <> NIL then
            set146z := set146z - flags;
        l4var1z := (f[5].s = NIL) and not (24 in flags);
    };
    new(l4var3z);
    l4var4z := l4var3z;
    bool48z := true;
    with l4var3z@ do {
        typ := l4arg1z@.typ;
        op := ALNUM;
        f[3].q := l4arg1z;
        f[2].s := NIL;
    };
    if (SY = LPAREN) then {
        if (l4var1z) then {
            l4var5z := l4arg1z@.f[7].q;
            if (l4var5z = NIL) then {
                error(errTooManyArguments);
                goto 8888;
            }
        };
        repeat
            if (l4var1z) and (l4arg1z = l4var5z) then {
                error(errTooManyArguments);
                goto 8888;
            };
            bool47z := true;
            expression;
            l4var6z := curExpr@.op;
(a)         if l4var1z then {
                l4var7z := l4var5z@.cl;
                if (l4var6z = FCALL) then {
                    if (l4var7z <> ROUTINEID) or
                       (l4var5z@.typ <> NIL) then {
13736:                  error(39); (*errIncompatibleArgumentKinds*)
                        exit a
                    }
                } else { (* 13741 *)
                    if (l4var6z = op47) then {
                        if (l4var7z = ROUTINEID) then {
                            if (l4var5z@.typ = NIL) then
                                goto 13736
                        } else (* 13750 *)
                        if (curExpr@.f[3].s@.f[7].s = NIL) and
                           (l4var7z = VARID) then {
                            curExpr@.op := ALNUM;
                            curExpr@.f[2].s := NIL;
                        } else
                            goto 13736;
                    } else (* 13762 *)
                    if (l4var6z IN lvalOpSet) then {
                        if (l4var7z <> VARID) and
                           (l4var7z <> FORMALID) then
                            goto 13736;
                    } else {
                        if (l4var7z <> VARID) then
                            goto 13736;
                        (*=z-*)(q) exit q(*=z+*)
                    }
                };
                arg1Type := curExpr@.typ;
                if (arg1Type <> NIL) then {
                    if not typeCheck(arg1Type, l4var5z@.typ) then
                        error(40); (*errIncompatibleArgumentTypes*)
                }
            }; (* 14006 *)
            new(l4var2z);
            with l4var2z@ do {
                typ := NIL;
                f[2].s := NIL;
                f[3].e := curExpr;
            };
            l4var4z@.f[2].e := l4var2z;
            l4var4z := l4var2z;
            if (l4var1z) then
                l4var5z := l4var5z@.list;
        until (SY <> COMMA);
        if (SY <> RPAREN) or
           l4var1z and (l4var5z <> l4arg1z) then
            error(errNoCommaOrParenOrTooFewArgs)
        else
            inSymbol;
    } else { (* 14035 *)
        if (l4var1z) and (l4arg1z@.f[7].s <> NIL) then
            error(42); (*errNoArgList*)
    };
    curExpr := l4var3z;
    (* 14042 *)
}; (* parseCallArgs *)
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
procedure factor;
label
    14567;
var
    l4var1z: word;
    l4var2z: boolean;
    l4var3z, l4var4z: word;
    l4var5z, l4var6z: @expr;
    l4var7z, l4var8z: @expr;
    l4var9z: @identrec;
    l4var10z: operator;
    l4var11z: word;
    l4var12z: boolean;
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
procedure stdCall;
var
    l5var1z: operator;
    l5var2z: @types;
    l5var3z: word;
    l5var4z: bitset;
    l5var5z, l5var6z: integer;
{
    curVal := l4var9z@.f[5];
    l5var5z := curVal.i;
    if (SY <> LPAREN) then {
        requiredSymErr(LPAREN);
        goto 8888;
    };
    expression;
    if (l5var5z >= 14) and
       (16 >= l5var5z) and
       not (curExpr@.op IN [GETELT..FILEPTR]) then {
        error(27); (* errExpressionWhereVariableExpected *)
        exit;
    };
    arg1Type := curExpr@.typ;
    if (arg1Type@.k = kindRange) then
        arg1Type := arg1Type@.base;
    l5var3z.k := arg1Type@.k;
    if (arg1Type = realType) then
        l5var6z := 0
    else if (arg1Type = integerType) then
        l5var6z := 1
    else if (arg1Type = charType) then
        l5var6z := 2
    else if (l5var3z.k = kindScalar) then
        l5var6z := 3
    else if (l5var3z.k = kindPtr) then
        l5var6z := 4
    else if (l5var3z.k = kindFile) then
        l5var6z := 5
    else if (l5var3z.k = kindSet) then
        l5var6z := 6
    else {
        l5var6z := 7;
        (*=z-*)(q) exit q(*=z+*)
    };
    l5var4z := [l5var5z];
    if not ((l5var6z = 0) and (l5var4z <= [0:8, 15, 17, 18, 29]) or
           ((l5var6z = 1) and (l5var4z <= [0:7, 9, 11, 15, 17, 21])) or
           ((l5var6z IN [2, 3, 4]) and (l5var4z <= [10, 12, 13, 15])) or
           ((l5var6z = 5) and (l5var4z <= [14, 15, 16])) or
           ((l5var6z = 6) and (l5var4z <= [15, 19, 20])) or
           ((l5var6z = 7) and (l5var5z = 15))) then
        error(errNeedOtherTypesOfOperands);
    if not (l5var4z <= [7, 12, 13, 17]) then {
        arg1Type := l4var9z@.typ;
    } else if (l5var6z = 1) and (l5var4z <= [7, 17]) then {
        if l5var5z = 7 then
            l5var5z := 22
        else
            l5var5z := 23;
    };
    new(l4var6z);
    l4var6z@.op := STANDPROC;
    l4var6z@.f[2].e := curExpr;
    l4var6z@.f[3].i := l5var5z;
    if l5var5z = 24 then {
        if SY <> COMMA then {
            requiredSymErr(COMMA);
            goto 8888;
        };
        expression;
        l5var2z := curExpr@.typ;
        l5var1z := badop27;
        if (l5var2z <> realType) and
            not typeCheck(l5var2z, integerType) then
            error(errNeedOtherTypesOfOperands);
        if (l5var2z = realType) then
            l5var1z := badop30
        else if (l5var6z = (0)) then
            l5var1z := badop31;
        l4var6z@.f[3].e := curExpr;
        l4var6z@.op := l5var1z;
    };
    curExpr := l4var6z;
    curExpr@.typ := arg1Type;
    checkSymAndRead(RPAREN);
    (* 14247 *)
}; (* stdCall *)
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
{ (* factor *)
    l4var2z := bool47z;
    bool47z := false;
    if (SY < MULOP) then {
        case SY of
        IDENT: {
            if (hashTravPtr = NIL) then {
                error(errNotDefined);
                curExpr := uVarPtr;
            } else
                case hashTravPtr@.cl of
                TYPEID: {
                    error(23); (* errTypeIdInsteadOfVar *)
                    curExpr := uVarPtr;
                };
                ENUMID: {
                    new(curExpr);
                    with curExpr@ do {
                        typ := hashTravPtr@.f[3].t;
                        op := GETENUM;
                        f[2] := hashTravPtr@.f[6];
                        f[3].i := 0;
                    };
                    inSymbol;
                };
                ROUTINEID: {
                    l4var9z := hashTravPtr;
                    inSymbol;
                    if (l4var9z@.offset = (0)) then {
                        if (l4var9z@.typ <> NIL) and
                           (SY = LPAREN) then {
                            stdCall;
                            exit;
                            (*=z-*)} else {{(*=z+*)
                        };
                        error(44) (* errIncorrectUsageOfStandProcOrFunc *)
                        (*=z-*)}(*=z+*)
                    } else if (l4var9z@.typ =  NIL) then {
                        if (l4var2z) then {
                            l4var10z := FCALL;
                        } else {
                            error(68); (* errUsingProcedureInExpression *)
                        }
                   } else (* 14330 *) {
                        if (SY = LPAREN) then {
                            parseCallArgs(l4var9z);
                            exit
                        };
                        if (l4var2z) then {
                            l4var10z := op47;
                        } else {
                            parseCallArgs(l4var9z);
                            exit
                        };
                        (q) exit q
                    }; (* 14342 *)
                    new(curExpr);
                    if not (SY IN [RPAREN, COMMA]) then {
                        error(errNoCommaOrParenOrTooFewArgs);
                        goto 8888;
                    };
                    with curExpr@ do {
                        typ := l4var9z@.typ;
                        op := l4var10z;
                        arg1.q := NIL;
                        arg2.q := l4var9z;
                    }
                };
                VARID, FORMALID, FIELDID:
                    parseLval;
                end (* case *)
        };
        LPAREN: {
            expression;
            checkSymAndRead(RPAREN);
        };
        INTCONST, REALCONST, CHARCONST, LTSY, GTSY: {
            new(curExpr);
            parseLiteral(curExpr@.typ, curExpr@.f[2], false);
            curExpr@.f[3].i := ord(octalMode);
            curExpr@.op := GETENUM;
            inSymbol;
        };
        NOTSY: {
            inSymbol;
            factor;
            if (curExpr@.typ <> booleanType) then
                error(1); (* errNoCommaNorSemicolon *)
            l4var6z := curExpr;
            new(curExpr);
            with curExpr@ do {
                typ := booleanType;
                op := NOTOP;
                f[2].e := l4var6z;
            }
        };
        LBRACK: {
            new(curExpr);
            inSymbol;
            l4var8z := curExpr;
            l4var1z.b := false;
            if (SY <> RBRACK) then {
                l4var12z := true;
                bool102z := false;
                repeat
                    l4var6z := curExpr;
                    expression;
                    if (l4var12z) then {
                        l4var11z := curExpr@.f[0];
                        if not (l4var11z.s@.f[2].i IN [1, 2]) then
                            error(23); (* errTypeIdInsteadOfVar *)
                    } else {
                        if not typeCheck(l4var11z.t, curExpr@.typ) then
                            error(24); (*errIncompatibleExprsInSetCtor*)
                    };
                    l4var12z := false;
                    l4var5z := curExpr;
                    if (SY = COLON) then {
                        expression;
                        if not typeCheck(l4var11z.t, curExpr@.typ) then
                            error(24); (*errIncompatibleExprsInSetCtor*)
                        if (l4var5z@.op = GETENUM) and
                           (curExpr@.op = GETENUM) then {
                            l4var4z := l4var5z@.f[2];
                            l4var3z := curExpr@.f[2];
                            l4var4z.m := l4var4z.m - intZero;
                            l4var3z.m := l4var3z.m - intZero;
                            l4var1z.m := l4var1z.m + [l4var4z.i..l4var3z.i];
                            curExpr := l4var6z;
                            goto 14567;
                        };
                        new(l4var7z);
                        with l4var7z@ do {
                            typ := setType;
                            op := MKRANGE;
                            f[2].e := l4var5z;
                            f[3].e := curExpr;
                        };
                        l4var5z := l4var7z;
                        (*=z-*)(q);(*=z+*)
                   } else {(* 14535 *)
                        if (l4var5z@.op = GETENUM) then {
                            l4var4z := l4var5z@.f[2];
                            l4var4z.m := l4var4z.m - intZero;
                            l4var1z.m := l4var1z.m + [l4var4z.i];
                            curExpr := l4var6z;
                            goto 14567;
                        };
                        new(l4var7z);
                        with l4var7z@ do {
                            typ := setType;
                            op := STANDPROC;
                            f[2].e := l4var5z;
                            f[3].i := (109);
                            l4var5z := l4var7z;
                        }
                    }; (* 14560 *)
                    new(curExpr);
                    with curExpr@ do {
                        typ := setType;
                        op := SETOR;
                        f[2].e := l4var6z;
                        f[3].e := l4var5z;
                    };
14567:              ;
                until SY <> COMMA;
            }; (* 14571 *)
            checkSymAndRead(RBRACK);
            with l4var8z@ do {
                op := GETENUM;
                typ := setType;
                f[2] := l4var1z;
            }
        };
        end; (* case *)
    } else {
        error(errBadSymbol);
        goto 8888;
    }
    (* 14623 *)
}; (* factor *)
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
procedure term;
label
    14650;
var
    l4var1z: operator;
    l4var2z: @expr;
    l4var3z: word;
    l4var4z: boolean;
{
    factor;
    while (SY = MULOP) do {
        l4var1z := charClass;
        inSymbol;
        l4var2z := curExpr;
        factor;
        arg1Type := curExpr@.typ;
        arg2Type := l4var2z@.typ;
        l4var4z := typeCheck(arg1Type, arg2Type);
        if (not l4var4z) and
           (RDIVOP < l4var1z) then
14650:      error(errNeedOtherTypesOfOperands)
        else {
            case l4var1z of
            MUL, RDIVOP: {
                if (l4var4z) then {
                    if (arg1Type = realType) then {
                        (* empty *)
                    } else {
                        if (strp120z = integerType) then {
                            if (l4var1z = MUL) then {
                                arg1Type := integerType;
                            } else {
                                arg1Type := realType;
                            };
                            l4var1z := imulOpMap[l4var1z];
                        } else {
                            if (arg1Type@.k = kindSet) then {
                                l4var1z := setOpMap[l4var1z];
                            } else
                                goto 14650;
                        }
                    }
                } else {
                    if areTypesCompatible(l4var2z) then {
                        arg1Type := realType;
                    } else
                        goto 14650;
                }
            };
            AMPERS: {
                if (arg1Type <> booleanType) then
                    goto 14650;
            };
            IDIVOP: {
                if (strp120z <> integerType) then
                    goto 14650;
                arg1Type := integerType;
            };
            IMODOP: {
                if (strp120z = integerType) then {
                    arg1Type := integerType;
                } else {
                    if (arg1Type@.k = kindSet) then
                        l4var1z := SETXOR
                    else
                        goto 14650;
                }
            };
            end;
            new(l4var3z.e);
            with l4var3z.e@ do {
                op := l4var1z;
                f[2].e := l4var2z;
                f[3].e := curExpr;
                curExpr := l4var3z.e;
                typ := arg1Type;
            }
        }
    }
    (* 14746 *)
}; (* term *)
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
procedure simpleExpression;
label
    15031;
var
    l4var1z, l4var2z: @expr;
    l4var3z: operator;
    l4var4z: word;
    l4var5z: boolean;
{
    l4var5z := false;
    if (charClass IN [PLUSOP, MINUSOP]) then {
        if (charClass = MINUSOP) then
            l4var5z := true;
        inSymbol;
    };
    term;
(minus)
    if (l4var5z) then {
        arg1Type := curExpr@.typ;
        new(l4var2z);
        with l4var2z@ do {
            typ := arg1Type;
            f[2].e := curExpr;
            if (arg1Type = realType) then {
                op := RNEGOP;
            } else if typeCheck(arg1Type, integerType) then {
                l4var2z@.op := INEGOP;
                l4var2z@.typ := integerType;
            } else {
                error(69); (* errUnaryMinusNeedRealOrInteger *)
                exit minus
            };
            curExpr := l4var2z;
        }
    }; (* 15010 *)
    while (SY = ADDOP) do {
        l4var3z := charClass;
        inSymbol;
        l4var2z := curExpr;
        term;
        arg1Type := curExpr@.typ;
        arg2Type := l4var2z@.typ;
        l4var5z := typeCheck(arg1Type, arg2Type);
        l4var4z.k := arg2Type@.k;
        if (kindSet < l4var4z.k) then {
15031:      error(errNeedOtherTypesOfOperands);
        } else {
            new(l4var1z);
            with l4var1z@ do {
                if (l4var3z = OROP) then {
                    if (not l4var5z) or
                       (arg1Type <> booleanType) then
                        goto 15031;
                    typ := booleanType;
                    op := l4var3z;
                } else (* 15046 *) {
                    if (l4var5z) then {
                        if (arg1Type = realType) then {
                            op := l4var3z;
                            typ := realType;
                        } else if (strp120z = integerType) then {
                            op := iAddOpMap[l4var3z];
                            typ := integerType;
                        } else if (l4var4z.k = kindSet) then {
                            op := setOpMap[l4var3z];
                            typ := arg1Type;
                        } else {
                            goto 15031
                        }
                    } else if areTypesCompatible(l4var2z) then {
                        l4var1z@.typ := realType;
                        l4var1z@.op := l4var3z;
                    } else
                        goto 15031
                }; (* 15077 *)
                l4var1z@.f[2].e := l4var2z;
                l4var1z@.f[3].e := curExpr;
                curExpr := l4var1z;
            }
        };
    }
    (* 15104 *)
}; (* simpleExpression *)
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
procedure expression;
var
    l4var1z: word;
    l4var2z, l4var3z: @expr;
{
    if (bool102z) then
        inSymbol
    else
        bool102z := true;
    simpleExpression;
    if (SY = RELOP) then {
        l4var1z.o := charClass;
        inSymbol;
        l4var3z := curExpr;
        simpleExpression;
        arg1Type := curExpr@.typ;
        arg2Type := l4var3z@.typ;
        if typeCheck(arg1Type, arg2Type) then {
            if (l4var1z.o = INOP) or
               (arg1Type@.k = kindFile) or
               (arg1Type@.size <> 1) and
               (l4var1z.o >= LTOP) and
               not isCharArray(arg1Type) then
                error(errNeedOtherTypesOfOperands);
        } else (* 15150 *) {
            if not areTypesCompatible(l4var3z) and
               ((arg1Type@.k <> kindSet) or
               not (arg2Type@.k IN [kindScalar, kindRange]) or
               (l4var1z.o <> INOP)) then {
                (*=z-*)besm(2200000B); besm(2200000B);(*=z+*)
                error(errNeedOtherTypesOfOperands);
            } (*=z-*)else;(*=z+*)
        }; (* 15167 *)
        new(l4var2z);
        if (arg2Type@.k = kindSet) and
           (l4var1z.o IN [LTOP, GTOP]) then
            error(errNeedOtherTypesOfOperands);
        with l4var2z@ do {
            f[0].t := booleanType;
            if (l4var1z.o IN [GTOP, LEOP]) then {
                f[2].e := curExpr;
                f[3].e := l4var3z;
                if (l4var1z.o = GTOP) then
                    op := LTOP
                else
                    op := GEOP;
            } else {
                f[2].e := l4var3z;
                f[3].e := curExpr;
                f[1] := l4var1z;
            };
            curExpr := l4var2z;
        }
    }
    (* 15217 *)
}; (* expression *)
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
procedure forStatement;
var
    l4var1z: @types;
    l4var2z, l4var3z: @expr;
    l4var4z: @expr;
    l4var5z, l4var6z: integer;
    l4var7z: integer;
    l4var8z: integer;
    l4var9z: boolean;
{
    inSymbol;
    disableNorm;
    curExpr := NIL;
    if (SY = IDENT) then {
        if (hashTravPtr <> NIL) and (hashTravPtr@.cl = VARID) then {
            parseLval;
            if (curExpr@.op <> GETVAR) then
                error(errNoSimpleVarForLoop);
        } else
            error(errNoSimpleVarForLoop);
    } else {
        errAndSkip(errNoIdent, skipToSet + [BECOMES, DOSY, TOSY, DOWNTOSY]);
    }; (* 15251 *)
    if (curExpr = NIL) then
        curExpr := uVarPtr;
    l4var2z := curExpr;
    l4var1z := l4var2z@.typ;
    if not (l4var1z@.k IN [kindScalar, kindRange]) then
        error(25); (* errExprNotOfADiscreteType *)
    if typeCheck(integerType, l4var1z) then
        l4var5z := KATX+PLUS1
    else
        l4var5z := KATX+E1;
    if (SY = BECOMES) then {
        expression;
        l4var9z := true;
    } else {
        l4var9z := false;
    };
    l4var3z := curExpr;
    l4var6z := insnTemp[ADD];
    if not typeCheck(l4var1z, l4var3z@.typ) then
        error(31); (* errIncompatibleTypesOfLoopIndexAndExpr *)
(todownto)
    if (SY = TOSY) then
        exit todownto
    else if (SY = DOWNTOSY) then
        l4var6z := insnTemp[SUB]
    else (q) {
        error(70); (* errNeitherToNorDownto *)
        (*=z-*)exit q(*=z+*)
    };
    expression;
    if not typeCheck(l4var1z, curExpr@.typ) then
        error(31); (* errIncompatibleTypesOfLoopIndexAndExpr *)
    formOperator(gen0);
    l4var4z := curExpr;
    if (l4var9z) then {
        curExpr := l4var3z;
        formOperator(LOAD);
    } else {
        form1Insn(insnTemp[XTA] + l4var5z);
    };
    l4var7z := 0;
    disableNorm;
    formJumpOnCond(l4var7z);
    padToLeft;
    l4var8z := moduleOffset;
    checkSymAndRead(DOSY);
    statement;
    disableNorm;
    curExpr := l4var2z;
    formOperator(LOAD);
    form1Insn(l4var6z + l4var5z);
    P0715(0, l4var7z);
    formOperator(STORE);
    curExpr := l4var4z;
    if (l4var6z = insnTemp[SUB]) then
        curVal.i := l4var6z
    else
        curVal.i := insnTemp[RSUB];
    (*15401*)
    formOperator(gen3);
    form1Insn(insnTemp[UZA] + l4var8z);
}; (* forStatement *)
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
procedure withStatement;
var
    l4var1z: @expr;
    l4var2z, l4var3z: bitset;
    l4var4z: integer;
{
    l4var1z := strp63z;
    l4var4z := l2var20z;
    l4var2z := set147z;
    l4var3z := [];
    repeat
        inSymbol;
        if (hashTravPtr <> NIL) and
           (hashTravPtr@.cl >= VARID) then {
            parseLval;
            if (curExpr@.typ@.k = kindRecord) then {
                formOperator(SETREG);
                l4var3z := (l4var3z + [curVal.i]) * set148z;
            } else {
                error(71); (* errWithOperatorNotOfARecord *)
            };
        } else {
            error(72); (* errWithOperatorNotOfAVariable *)
        }
    until (SY <> COMMA);
    checkSymAndRead(DOSY);
    statement;
    strp63z := l4var1z;
    l2var20z := l4var4z;
    set147z := l4var2z;
    set145z := (set145z + l4var3z);
}; (* withStatement *)
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
procedure reportStmtType(l4arg1z: integer);
{
    writeln(' STATEMENT ', stmtname:0, ' IN ', l3var9z:0, ' LINE');
}; (* reportStmtType *)
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function structBranch(isGoto: boolean): boolean;
var
    curLab: @strLabel;
{
    structBranch := true;
    if (SY = IDENT) or not isGoto then {
        curLab := strLabList;
        l2var19z := 1;
        while (curLab <> NIL) do {
            with curLab@ do {
                if (ident.m = []) then {
                    l2var19z := (l2var19z - (1));
                } else {
                    if (ident = curIdent) then {
                        if (l2var19z = (1)) then {
                            if (isGoto) then {
                                form1Insn(insnTemp[UJ] + offset);
                            } else {
                                formJumpOnCond(curLab@.exitTarget);
                            };
                        } else {
                            form1Insn(getValueOrAllocSymtab(l2var19z) +
                                      (KVTM+I13));
                            if (isGoto) then {
                                form1Insn(KVTM+I10 + curLab@.offset);
                            } else {
                                int51z := KVTM+I10;
                                formJumpOnCond(curLab@.exitTarget);
                                int51z := insnTemp[UJ];
                            };
                            form1Insn(getHelperProc(60) +
                                      6437777713700000C); (* P/ZAM *)
                        };
                        exit
                    }
                };
                curLab := curLab@.next;
            }
        };
        if not isGoto and (SY <> IDENT) then {
            if (l2var19z <> (1)) then {
                form1Insn(getValueOrAllocSymtab(l2var19z) + (KVTM+I13));
                form1Insn(getHelperProc(60)); (* P/ZAM *)
            };
            formJumpOnCond(int53z);
        } else {
            error(errNotDefined);
        }
    } else
        structBranch := false;
}; (* structBranch *)
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
procedure caseStatement;
label
    16211;
type
    casechain = record
        next:   @casechain;
        value:  word;
        offset: integer;
    end;
var
    allClauses, curClause, clause, unused: @casechain;
    isIntCase: boolean;
    otherSeen: boolean;
    otherOffset: integer;
    itemsEnded, goodMode: boolean;
    firstType, itemtype, exprtype: @types;
    itemvalue: word;
    itemSpan: integer;
    expected: word;
    startLine, l4var17z, endOfStmt: integer;
    minValue, unused2, maxValue: word;
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function max(a, b: integer): integer;
{
    if (b < a) then
        max := a
    else
        max := b;
}; (* max *)
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
{ (* caseStatement *)
    startLine := lineCnt;
    expression;
    exprtype := curExpr@.typ;
    otherSeen := false;
    if (exprtype = alfaType) or
       (exprtype@.k IN [kindScalar, kindRange]) then
        formOperator(LOAD)
    else
        error(25); (* errExprNotOfADiscreteType *)
    disableNorm;
    l4var17z := 0;
    endOfStmt := 0;
    allClauses := NIL;
    formJumpOnCond(l4var17z);
    checkSymAndRead(OFSY);
    firstType := NIL;
    goodMode := true;
    (* 15640 *)
    repeat
        if not (SY IN [SEMICOLON, ENDSY]) then {
            padToLeft;
            arithMode := 1;
            if (SY = OTHERSY) then {
                if (otherSeen) then
                    error(73); (* errCaseLabelsIdentical *)
                inSymbol;
                otherSeen := true;
                otherOffset := moduleOffset;
            } else (* 15657 *) repeat
                parseLiteral(itemtype, itemvalue, true);
                if (itemtype <> NIL) then {
                    if (firstType = NIL) then {
                        firstType := itemtype;
                    } else {
                        if not typeCheck(itemtype, firstType) then
                            error(errConstOfOtherTypeNeeded);
                    }; (* 15700 *)
                    new(clause);
                    clause@.value := itemvalue;
                    clause@.offset := moduleOffset;
                    curClause := allClauses;
(loop)              while (curClause <> NIL) do {
                        if (itemvalue = curClause@.value) then {
                            error(73); (* errCaseLabelsIdentical *)
                            exit loop
                        } else if (itemvalue.i < curClause@.value.i) then {
                            exit loop
                        } else (q) {
                            unused := curClause;
                            curClause := curClause@.next;
                            (*=z-*)exit q(*=z+*)
                        }
                    }; (* 15723 *)
                    if (curClause = allClauses) then {
                        clause@.next := allClauses;
                        allClauses := clause;
                    } else {
                        clause@.next := curClause;
                        unused@.next := clause;
                    };
                    inSymbol;
                }; (* 15735 *)
                itemsEnded := (SY <> COMMA);
                if not itemsEnded then
                    inSymbol;
            until itemsEnded; (* 15745 *)
            checkSymAndRead(COLON);
            statement;
            goodMode := goodMode and (arithMode = 1);
            formJumpOnCond(endOfStmt);
        }; (* 15762 *)
        itemsEnded := (SY = ENDSY);
        if not itemsEnded then
            inSymbol;
        (* 15771 *)
    until itemsEnded;
    if (SY <> ENDSY) then {
        requiredSymErr(ENDSY);
        stmtName := 'CASE  ';
        reportStmtType(startLine);
    } else
        inSymbol;
    if not typeCheck(firstType, exprtype) then {
        error(88); (* errDifferentTypesOfLabelsAndExpr *);
        exit
    };
    padToLeft;
    isIntCase := typeCheck(exprtype, integerType);
    if (allClauses <> NIL) then {
        expected := allClauses@.value;
        minValue := expected;
        curClause := allClauses;
        while (curClause <> NIL) do {
            if (expected = curClause@.value) and
               (exprtype@.k = kindScalar) then {
                maxValue := expected;
                if (isIntCase) then {
                    expected.i := expected.i + 1;
                } else {
                    curVal := expected;
                    curVal.c := succ(curVal.c);
                    expected := curVal;
                };
                curClause := curClause@.next;
            } else {
                itemSpan := 34000;
                P0715(0, l4var17z);
                if (firstType@.k = kindRange) then {
                    itemSpan := max(abs(firstType@.left),
                                    abs(firstType@.right));
                } else {
                    if (firstType@.k = kindScalar) then
                        itemSpan := firstType@.numen;
                };
                itemsEnded := (itemSpan < 32000);
                if (itemsEnded) then {
                    form1Insn(KATI+14);
                } else {
                    form1Insn(KATX+SP+1);
                };
                minValue.i := (minValue.i - minValue.i); (* WTF? *)
                while (allClauses <> NIL) do {
                    if (itemsEnded) then {
                        curVal.i := (minValue.i - allClauses@.value.i);
                        curVal.m := (curVal.m + intZero);
                        form1Insn(getValueOrAllocSymtab(curVal.i) +
                                  (KUTM+I14));
                        form1Insn(KVZM+I14 + allClauses@.offset);
                        minValue := allClauses@.value;
                    } else {
                        form1Insn(KXTA+SP+1);
                        curVal := allClauses@.value;
                        form2Insn(KAEX + I8 + getFCSToffset,
                                  insnTemp[UZA] + allClauses@.offset);
                    };
                    allClauses := allClauses@.next;
                };
                if (otherSeen) then
                    form1Insn(insnTemp[UJ] + otherOffset);
                goto 16211;
            }; (* if 16141 *)
        }; (* while 16142 *)
        if (not otherSeen) then {
            otherOffset := moduleOffset;
            formJumpOnCond(endOfStmt);
        };
        P0715(0, l4var17z);
        curVal := minValue;
        P0715(-(insnTemp[U1A]+otherOffset), maxValue.i);
        curVal := minValue;
        curVal.m := (curVal.m + intZero);
        form1Insn(KATI+14);
        curVal.i := ((moduleOffset + (1)) - curVal.i);
        if (curVal.i < 40000B) then {
            curVal.i := (curVal.i - 40000B);
            curVal.i := allocSymtab([24, 29] +
                        (curVal.m * O77777.m));
        };
        form1Insn(KUJ+I14 + curVal.i);
        while (allClauses <> NIL) do {
            padToLeft;
            form1Insn(insnTemp[UJ] + allClauses@.offset);
            allClauses := allClauses@.next;
        };
        16211:
        P0715(0, endOfStmt);
        if (not goodMode) then
           disableNorm;
        (* 16217 *)
    }
}; (* caseStatement *)
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
procedure assignStatement(l4arg1z: boolean);
label
    16332;
var
    l4var1z, l4var2z, l4var3z, l4var4z, l4var5z: word;
{
    if (l4arg1z) then
        parseLval
    else {
        new(curExpr);
        with curExpr@ do {
            f[0] := hashTravPtr@.f[3];
            op := GETVAR;
            f[2].q := hashTravPtr;
        };
        inSymbol;
    };
    checkSymAndRead(BECOMES);
    bool102z := false;
    l4var5z := curExpr@.f[0];
    if (l4var5z.t@.k = kindRecord) and
       (SY = LBRACK) then {
        formOperator(gen5);
        l4var3z.i := 0;
        inSymbol;
        l3var5z.c := chr(0C);
(indices)
        {
            if (SY = COMMA) then {
                l4var3z.i := (l4var3z.i + (1));
                inSymbol;
            } else if (SY = RBRACK) then {
                inSymbol;
                exit indices;
            } else (* 16262 *) (q) {
                bool102z := false;
                expression;
                curVal := l4var3z;
                formOperator(gen6);
                (*=z-*)exit q(*=z+*)
            }; (* 16270 *)
            goto indices;
        };
        curExpr := NIL;
    } else (* 16273 *)
    if (SY = SEMICOLON) and allowCompat then {
        formOperator(STORE);
        bool102z := true;
        curExpr := NIL;
    } else (* 16303 *) {
        l4var1z.e := curExpr;
        expression;
        l4var4z := curExpr@.f[0];
        if (typeCheck(l4var5z.t, l4var4z.t)) then {
            if (l4var4z.t@.k = kindFile) then
                error(75) (*errCannotAssignFiles*)
            else {
                if rangeMismatch and (l4var5z.s@.f[2].c = chr(2C)) then {
                    new(l4var2z.e);
                    with l4var2z.e@ do {
                        f[0] := l4var4z;
                        op := BOUNDS;
                        f[2].e := curExpr;
                        f[3] := l4var5z;
                    };
                    curExpr := l4var2z.e;
                };
16332:          new(l4var2z.e);
                with l4var2z.e@ do {
                    f[0] := l4var5z;
                    op := badop33;
                    f[2] := l4var1z;
                    f[3].e := curExpr;
                };
                curExpr := l4var2z.e;
            }
        } else if (l4var5z.t = realType) and
            typeCheck(integerType, l4var4z.t) then {
            castToReal(curExpr);
            goto 16332;
        } else {
            error(33); (*errIllegalTypesForAssignment*)
        }
    }
    (* 16356 *)
}; (* assignStatement *)
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
procedure compoundStatement;
{
(loop) {
        statement;
        if (SY = SEMICOLON) then {
            inSymbol;
            goto loop;
        }
    }
}; (* compoundStatement *)
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
procedure ifWhileStatement(l4arg1z: symbol);
{
    disableNorm;
    expression;
    if (curExpr@.typ <> booleanType) then
        error(errBooleanNeeded)
    else {
        jumpTarget := 0;
        formOperator(gen15);
        l3var10z.i := jumpTarget;
    };
    checkSymAndRead(l4arg1z);
    statement;
}; (* ifWhileStatement *)
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
procedure P16517;
label
    16545;
type
    DATAREC = record case boolean of
            false: (a: packed array [0..3] of 0..4095);
            true:  (b: bitset)
        end;
var
    l4var1z, l4var2z, l4var3z, l4var4z, l4var5z,
    l4var6z, l4var7z, l4var8z, l4var9z: word;
    F: file of DATAREC;
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
procedure P16432(l5arg1z: integer);
var
    l5var1z: DATAREC;
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function F16417(l6arg1z: integer): integer;
{
    if (l6arg1z >= 2048) then {
        curVal.i := l6arg1z;
        F16417 := allocSymtab((curVal.m + [24]) * halfWord);
    } else {
        F16417 := l6arg1z;
    }
}; (* F16417 *)
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
{ (* P16432 *)
    l5var1z.a[0] := F16417(l4var4z.i);
    if (FcstCnt = l4var3z.i) then {
        curVal := l4var8z;
        curVal.i := addCurValToFCST;
    } else {
        curVal := l4var3z;
    };
    l5var1z.a[1] := allocSymtab([12,23] + curVal.m * halfWord);
    l5var1z.a[2] := F16417(l5arg1z);
    if (l4var9z.i = (0)) then {
        curVal := l4var7z;
        besm(ASN64+24);
        curVal := ;
    } else {
        curVal.i := allocSymtab(l4var7z.m + l4var9z.m * halfWord);
    };
    l5var1z.a[3] := curVal.i;
    l4var9z.i := l5arg1z * l4var4z.i + l4var9z.i;
    F@ := l5var1z;
    put(F);
    l4var2z.i := (l4var2z.i + (1));
    l4var4z.i := 0;
    l4var3z.i := FcstCnt;
}; (* P16432 *)
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
{ (* P16517 *)
    l4var1z.i := FcstCnt;
    inSymbol;
    l4var2z.i := 0;
(loop)
    repeat (* 16530 *)
        inSymbol;
        setup(l4var6z.s);
        if SY <> IDENT then {
            if SY = ENDSY then
                exit loop;
            error(errNoIdent);
            curExpr := uVarPtr;
        } else (* 16543 *) {
            if (hashTravPtr = NIL) then {
16545:          error(errNotDefined);
                curExpr := uVarPtr;
                inSymbol;
            } else {
                if (hashTravPtr@.cl = VARID) then {
                    parseLval;
                } else goto 16545;
            }
        }; (* 16557 *)
        putLeft := true;
        objBufIdx := 1;
        formOperator(gen5);
        if (objBufIdx <> (1)) then
            error(errVarTooComplex);
        l4var7z.m := (isLeftInsn.m * [12,13,14,15,16,17,18,19,20,21,22,23]);
        l4var3z.i := FcstCnt;
        l4var4z.i := 0;
        l4var9z.i := 0;
        repeat (* 16574 *)
            expression;
            formOperator(LITINSN);
            l4var8z := curVal;
            if (SY = COLON) then {
                inSymbol;
                l4var5z := curToken;
                if (SY <> INTCONST) then {
                    error(62); (* errIntegerNeeded *)
                    l4var5z.i := 0;
                } else
                    inSymbol;
            } else
                l4var5z.i := 1;
            if (l4var5z.i <> (1)) then {
                if (l4var4z.i <> (0)) then
                    P16432((1));
                l4var4z.i := 1;
                P16432(l4var5z.i);
            } else {
                l4var4z.i := (l4var4z.i + (1));
                if (SY = COMMA) then {
                    curVal := l4var8z;
                    toFCST;
                } else {
                    if (l4var4z.i <> (1)) then {
                        curVal := l4var8z;
                        toFCST;
                    };
                    P16432((1));
                }
            }; (* 16641 *)
        until SY <> COMMA;
        rollup(l4var6z.s);
    until SY <> SEMICOLON; (* 16645 *)
    if (SY <> ENDSY) then
        error(errBadSymbol);
    reset(F);
    while not eof(F) do {
        write(FCST, F@.b);
        get(F);
    };
    int92z := (FcstCnt - l4var1z.i);
    FcstCnt := l4var1z.i;
    int93z := l4var2z.i;
    (* 16666 *)
}; (* P16517 *)
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
procedure standProc;
label
    17753, 20041;
var
    l4typ1z: @types;
    l4var2z, l4var3z, l4var4z, l4var5z,
    l4var6z, l4var7z, l4var8z: word;
    l4var9z: @expr;
    l4var10z,
    l4var11z, l4var12z, l4var13z, l4var14z, l4var15z: word;
    procNo: integer;
    l4var17z: word;
    l4var18z: opgen;
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
procedure P16667(l5arg1z: @types);
{
    if (hashTravPtr <> NIL) and
       (hashTravPtr@.cl >= VARID) then {
        parseLval;
        if (l5arg1z <> NIL) and
           not typeCheck(l5arg1z, curExpr@.typ) then
            error(errNeedOtherTypesOfOperands);
    } else {
        error(errNotDefined);
        curExpr := uVarPtr;
    }
}; (* P16667 *)
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
procedure startReadOrWrite(l5arg1z: boolean);
{
    expression;
    l4var3z := curExpr@.f[0];
    l4var7z.e := curExpr;
    if not (l5arg1z) then {
        if not (curExpr@.op IN lvalOpSet) then
            error(27); (* errExpressionWhereVariableExpected *)
    };
    if (l4var9z = NIL) then {
        if (l4var3z.t@.k = kindFile) then {
            l4var9z := curExpr;
        } else {
            new(l4var9z);
            l4var9z@.typ := textType;
            l4var9z@.op := GETVAR;
            if (l5arg1z) then {
                l4var9z@.f[2].q := outputFile;
            } else {
                if (inputFile <> NIL) then
                    l4var9z@.f[2].q := inputFile
                else (q) {
                    error(37); (* errInputMissingInProgramHeader *)
                    (*=z-*)exit q(*=z+*)
                }
            }
        };
        arg2Type := l4var9z@.typ;
        l4var13z.b := typeCheck(arg2Type@.base, charType);
        l4var12z.c := chr(1C);
        new(l4var8z.e);
        l4var8z.e@.typ := arg2Type@.base;
        l4var8z.e@.op := FILEPTR;
        l4var8z.e@.f[2].e := l4var9z;
        new(l4var6z.e);
        l4var6z.e@.typ := l4var8z.e@.typ;
        l4var6z.e@.op := badop33;
        if (l5arg1z) then
            l4var6z.e@.f[2] := l4var8z
        else
            l4var6z.e@.f[3] := l4var8z;
    } (* 17002 *)
}; (* startReadOrWrite *)
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
procedure parseWidthSpecifier(var l5arg1z: @expr);
{
    expression;
    if not typeCheck(integerType, curExpr@.typ) then {
        error(14); (* errExprIsNotInteger *)
        curExpr := uVarPtr;
    };
    l5arg1z := curExpr;
}; (* parseWidthSpecifier *)
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
procedure P17020;
{
    if ([12] <= set145z) or (l4var12z.b) then {
        curExpr := l4var9z;
        formOperator(gen8);
    };
    l4var12z.b := false;
    formInsnAndLabel(getHelperProc(l4var17z.i));
    disableNorm;
}; (* P17020 *)
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
procedure P17037;
{
    set145z := (set145z - [12]);
    if (l4var17z.i <> (49)) and
       not typeCheck(l4var8z.e@.typ, l4var7z.e@.typ) then
        error(34) (* errTypeIsNotAFileElementType *)
    else {
        if (l4var17z.i = (29)) then {
            l4var6z.s@.f[3] := l4var7z;
        } else {
            if (l4var17z.i = (49)) then
                l4var17z.i := (30);
            l4var6z.s@.f[2] := l4var7z;
        };
        curExpr := l4var6z.e;
        formOperator(gen7);
        P17020;
    }
}; (* P17037 *)
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
procedure checkElementForReadWrite;
var
    l5var1z: word;
{
    set145z := (set145z - [12]);
    if (l4var3z.s@.f[2].c = chr(2C)) then
        l4var3z := l4var3z.s@.f[3];
    curVarKind := l4var3z.s@.f[2].k;
    l4var17z.i := (36);
    if (l4var3z.t = integerType) then
        l4var15z.i := (10)
    else if (l4var3z.t = realType) then {
        l4var17z.i := (37);
        l4var15z.i := (14);
    } else if (l4var3z.t = charType) then {
        l4var17z.i := (38);
        l4var15z.i := 1;
    } else if (curVarKind = kindScalar) then {
        l4var17z.i := (41);
        P13026(l4var3z.s);
        l4var15z.i := (8);
    } else if (isCharArray(l4var3z.t)) then {
        l5var1z.s := ref(l4var3z.s@.f[4].s@.f[0]);
        l4var15z.i := ((l5var1z.s@.f[6].i - l5var1z.s@.f[5].i) + (1));
        if not (l4var3z.s@.f[5].b) then
            l4var17z.i := (81)
        else if ((6) >= l4var15z.i) then
            l4var17z.i := (39)
        else
            l4var17z.i := (40);
    } else if (l4var3z.s@.f[0].i = (1)) then {
        l4var17z.i := (42);
        l4var15z.i := (17);
    } else (q) {
        error(34); (* errTypeIsNotAFileElementType *)
        (*=z-*)exit q(*=z+*)
    }
}; (* checkElementForReadWrite *)
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
procedure writeProc;
{
    l4var9z := NIL;
    l4var13z.b := true;
    repeat {
        startReadOrWrite(true);
        if (l4var7z.e <> l4var9z) then {
            if not (l4var13z.b) then {
                l4var17z.i := (29);
                P17037;
            } else {
                checkElementForReadWrite;
                l4var5z.s := NIL;
                l4var4z.s := NIL;
                if (SY = COLON) then
                    parseWidthSpecifier(l4var4z.e);
                if (SY = COLON) then {
                    parseWidthSpecifier(l4var5z.e);
                    if (l4var17z.i <> (37)) then
                        error(35); (* errSecondSpecifierForWriteOnlyForReal *)
                } else {
                    if (curToken = litOct) then {
                        l4var17z.i := (42);
                        l4var15z.i := (17);
                        if (l4var3z.s@.f[0].i <> (1)) then
                            error(34); (* errTypeIsNotAFileElementType *)
                        inSymbol;
                    }
                };
                l4var11z.c := chr(0C);
                if (l4var4z.s = NIL) and
                   (l4var17z.i IN [38,39,40]) then {
                    l4var17z.i := (l4var17z.i + (5));
                    l4var11z.c := chr(1C);
                } else {
                    if (l4var4z.s = NIL) then {
                        curVal := l4var15z;
                        formOperator(gen9);
                    } else {
                        curExpr := l4var4z.e;
                        formOperator(LOAD);
                    }
                };
                if (l4var17z.i = (37)) then {
                    if (l4var5z.s = NIL) then {
                        curVal.i := 4;
                        form1Insn(KXTS+I8 + getFCSToffset);
                    } else {
                        curExpr := l4var5z.e;
                        formOperator(gen10);
                    }
                };
                curExpr := l4var7z.e;
                if (l4var11z.b) then {
                    if (l4var17z.i = 45) then
                        l4var18z := gen11
                    else
                        l4var18z := LOAD;
                } else {
                    if (l4var17z.i = (40)) or
                       (l4var17z.i = (81)) then
                        l4var18z := gen12
                    else
                        l4var18z := gen10;
                };
                formOperator(l4var18z);
                if (l4var17z.i IN [39,40,44,45]) or
                   (l4var17z.i = (81)) then
                    form1Insn((KVTM+I10 + l4var15z.i))
                else {
                    if (l4var17z.i = (41)) then
                        form1Insn((KVTM+I11 + l4var3z.s@.f[5].i));
                };
                P17020;
            }
        }
    } until (SY <> COMMA);
    if (procNo = (11)) then {
        l4var17z.i := (46);
        P17020;
    };
    set145z := (set145z + [12]);
    if (l4var14z.i = moduleOffset) then
        error(36); (*errTooFewArguments *)
}; (* writeProc *)
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
procedure readProc;
label
    17346, 17362;
{
    l4var9z := NIL;
    l4var13z.b := true;
    l4var14z.i := moduleOffset;
    repeat {
        startReadOrWrite(false);
        if (l4var7z.e <> l4var9z) then {
            if not (l4var13z.b) then {
                l4var17z.i := (30);
17346:
                P17037;
           } else {
                checkElementForReadWrite;
                if (l4var17z.i = (38)) then {
                    l4var17z.i := (49);
                    goto 17346;
                };
                if (l4var17z.i = (39)) or
                   (l4var17z.i = (40)) then {
                    l4var17z.i := (51);
17362:
                    curExpr := l4var7z.e;
                    formOperator(gen5);
                    form1Insn((KVTM+I10 + l4var15z.i));
                    P17020;
                } else (q) {
                    if (l4var17z.i = (81)) then {
                        l4var17z.i := (90);
                        goto 17362;
                    };
                    l4var17z.i := (l4var17z.i + (11));
                    P17020;
                    curExpr := l4var7z.e;
                    formOperator(STORE);
                    (*=z-*)exit q(*=z+*)
                }
            }
        }
    } until (SY <> COMMA);
    set145z := (set145z + [12]);
    if (procNo = (13)) then {
        l4var17z.i := (53);
        P17020;
    };
    if (l4var14z.i = moduleOffset) then
        error(36); (* errTooFewArguments *)
}; (* readProc *)
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
procedure P17417;
{
    P16667(NIL);
    l4var9z := curExpr;
    l4typ1z := curExpr@.typ;
    if (l4typ1z@.pck) or
       (l4typ1z@.k <> kindArray) then
        error(errNeedOtherTypesOfOperands);
    checkSymAndRead(COMMA);
    bool102z := false;
    expression;
    l4var8z.e := curExpr;
    if not typeCheck(l4typ1z@.range, l4var8z.e@.typ) then
        error(errNeedOtherTypesOfOperands);
}; (* P17417 *)
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
procedure P17451;
var
    l5var1z: @types;
{
    new(l4var7z.e);
    l4var7z.e@.typ := l4typ1z@.base;
    l4var7z.e@.op := GETELT;
    l4var7z.e@.f[2].e := l4var9z;
    l4var7z.e@.f[3] := l4var8z;
    l5var1z := ref(l4var6z.s@.f[0].s@);
    if (l5var1z@.k <> kindArray) or
       not l5var1z@.pck or
       not typeCheck(l5var1z@.base, l4typ1z@.base) or
       not typeCheck(l4typ1z@.range, l5var1z@.range) then
        error(errNeedOtherTypesOfOperands);
    new(curExpr);
    curExpr@.f[0].c := chr(procNo + (50));
    curExpr@.f[2] := l4var7z;
    curExpr@.f[3] := l4var6z;
    formOperator(gen16);
}; (* P17451 *)
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
{ (* standProc *)
    curVal := l3var12z.s@.f[5];
    procNo := curVal.i;
    l4var10z.b := (SY = LPAREN);
    l4var14z.i := moduleOffset;
    if not l4var10z.b and
       (procNo IN [0:5,8:10,12,16:28]) then
        error(45); (* errNoOpenParenForStandProc *)
    if (procNo IN [0,1,2,3,4,5,8,9]) then {
        inSymbol;
        if (hashTravPtr@.cl < VARID) then
            error(46); (* errNoVarForStandProc *)
        parseLval;
        arg1Type := curExpr@.typ;
        curVarKind := arg1Type@.k;
    };
    if (procNo IN [0..6]) then
        jumpTarget := getHelperProc(29 + procNo); (* P/PF *)
    case procNo of
    0, 1, 2, 3: { (* put, get, rewrite, reset *)
        if (curVarKind <> kindFile) then
            error(47); (* errNoVarOfFileType *)
        if (procNo = 3) and
           (SY = COMMA) then {
            formOperator(gen8);
            expression;
            if (not typeCheck(integerType, curExpr@.typ)) then
                error(14); (* errExprIsNotInteger *)
            formOperator(LOAD);
            formInsnAndLabel(getHelperProc(97)); (*"P/RE"*)
        } else {
            formOperator(FILEACCESS);
        }
    };
    4, 5: { (* new, dispose *)
        if (curVarKind <> kindPtr) then
            error(13); (* errVarIsNotPointer *)
        heapCallsCnt := (heapCallsCnt + (1));
        l4var9z := curExpr;
        if (procNo = 5) then
            formOperator(gen5);
        l2var13z := arg1Type@.base;
        l2var19z := l2var13z@.size;
        if (charClass = EQOP) then {
            expression;
            if not typeCheck(integerType, curExpr@.typ) then
                error(14); (* errExprIsNotInteger *)
            formOperator(LOAD);
            form1Insn(KATI+14);
        } else {
            if (arg1Type@.base@.k = kindRecord) then (*=z-*)(x)(*=z+*) {
                l4typ1z := l2var13z@.base;
(loop)          while (SY = COMMA) and (l4typ1z <> NIL) do {
                    with l4typ1z@ do
                        ; (* useless *)
                    inSymbol;
                    parseLiteral(l4var2z.t, curVal, true);
                    if (l4var2z.s = NIL) then
                        exit loop
                    else (q) {
                        inSymbol;
(loop2)                 while (l4typ1z <> NIL) do {
                            l4var2z.t := l4typ1z;
                            while (l4var2z.s <> NIL) do {
                                if (l4var2z.s@.f[3] = curVal) then {
                                    l2var19z := l4typ1z@.size;
                                    exit loop2;
                                };
                                l4var2z := l4var2z.s@.f[6];
                                (*=z-*)(x);(*=z+*)
                            };
                            l4typ1z := l4typ1z@.s8.f[5].t;
                        };
                        (*=z-*)exit q(*=z+*)
                    };
                }
            };
            form1Insn(KVTM+I14+getValueOrAllocSymtab(l2var19z));
        };
        formInsnAndLabel(jumpTarget);
        if (procNo = (4)) then {
            curExpr := l4var9z;
            formOperator(STORE);
        }
    };
    6: { (* halt *)
        formInsnAndLabel(jumpTarget);
        exit
    };
    7: { (* stop *)
        form1Insn(KE74);
        exit
    };
    8, 9: { (* setup, rollup *)
        if (curVarKind <> kindPtr) then
            error(13); (* errVarIsNotPointer *)
        if (procNo = (8)) then {
            form1Insn(KXTA+HEAPPTR);
            formOperator(STORE);
        } else {
            formOperator(LOAD);
            form1Insn(KATX+HEAPPTR);
        }
    };
    10: { (* write *)
        writeProc;
    };
    11:
17753: { (* writeln *)
        if (SY = LPAREN) then {
            writeProc;
        } else {
            formInsnAndLabel(getHelperProc(54)); (*"P/WOLN"*)
            exit
        }
    };
    12: { (* read *)
        readProc;
    };
    13: { (* readln *)
        if (SY = LPAREN) then {
            readProc;
        } else {
            formInsnAndLabel(getHelperProc(55)); (*"P/RILN"*)
            exit
        }
    };
    14: { (* exit *)
        l4var10z.b := (SY = LPAREN);
        if (l4var10z.b) then
            inSymbol;
        if (SY = IDENT) then {
            if not structBranch(false) then
                error(1); (* errCommaOrSemicolonNeeded *)
            inSymbol;
        } else {
            formJumpOnCond(int53z);
        };
        if not (l4var10z.b) then
            exit
    };
    15: { (* debug *)
        if (debugPrint IN optSflags.m) then {
            procNo := 11;
            goto 17753;
        };
        while (SY <> RPAREN) do
            inSymbol;
    };
    16: { (* besm *)
        expression;
        formOperator(LITINSN);
        formInsnAndLabel(curVal.i);
    };
    17: { (* mapia *)
        l4typ1z := integerType;
        l4var2z.t := alfaType;
20041:
        expression;
        if not typeCheck(curExpr@.typ, l4typ1z) then
            error(errNeedOtherTypesOfOperands);
        checkSymAndRead(COMMA);
        formOperator(LOAD);
        if (procNo = 17) then {
            form3Insn(ASN64-33, KAUX+BITS15, KAEX+ASCII0);
        } else {
            form3Insn(KAPX+BITS15, ASN64+33, KAEX+ZERO);
        };
        P16667(l4var2z.t);
        formOperator(STORE);
    };
    18: { (* mapai *)
        l4typ1z := alfaType;
        l4var2z.t := integerType;
        goto 20041;
    };
    19, 20: { (* pck, unpck *)
        inSymbol;
        P16667(charType);
        checkSymAndRead(COMMA);
        formOperator(gen8);
        P16667(alfaType);
        if (procNo = (20)) then {
            formOperator(LOAD);
        };
        formInsnAndLabel(getHelperProc(procNo - 6));
        if (procNo = (19)) then
            formOperator(STORE);
    };
    21: { (* pack *)
        inSymbol;
        P17417;
        checkSymAndRead(COMMA);
        P16667(NIL);
        l4var6z.e := curExpr;
        P17451;
    };
    22: { (* unpack *)
        inSymbol;
        P16667(NIL);
        l4var6z.e := curExpr;
        checkSymAndRead(COMMA);
        P17417;
        P17451;
    };
    23, 24, 25, 26, 27, 28: { (* MARS procedures *)
        l3var5z.b := ((24) < procNo);
        repeat {
            expression;
            if (curExpr@.f[0].s@.f[0].i <> (1)) then
                error(5); (*errSimpleTypeReq*)
            formOperator(LOAD);
            if (l3var5z.b) then {
                checkSymAndRead(COMMA);
                P16667(NIL);
                l4var9z := curExpr;
                if (SY = COLON) then {
                    expression;
                    formOperator(gen10);
                } else {
                    form2Insn(KVTM + I14 + l4var9z@.typ@.size,
                              KITS + 14);
                };
                curExpr := l4var9z;
                formOperator(gen12);
            } else {
                form2Insn(insnTemp[XTS], insnTemp[XTS]);
            };
            form1Insn(KWTC + I14 + 77751B + procNo);
            formInsnAndLabel(getHelperProc(80)); (*"PAIB"*)
        } until (SY <> COMMA);
    };
    end; (* 20257 *)
    if procNo in [0,1,2,3,5,10,11,12,13,21,22] then
        arithMode := 1;
    checkSymAndRead(RPAREN);
    (* 20265 *)
}; (* standProc *)
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
{ (* statement *)
    setup(l3var1z);
    bool110z := false;
    l3var9z := lineCnt;
    if set147z = halfWord then
        P16517
    else {
        if SY = INTCONST then {
            set146z := [];
            l3var2z := numLabList;
            disableNorm;
            l3var5z.b := true;
            padToLeft;
            while l3var2z <> l2var16z do { with l3var2z@ do
                if id <> curToken then {
                    l3var2z := next;
                } else {
                    l3var5z.b := false;
                    if (defined) then {
                        curVal.i := line;
                        error(17); (* errLblAlreadyDefinedInLine *);
                    } else {
                        l3var2z@.line := lineCnt;
                        l3var2z@.defined := true;
                        padToLeft;
                        if l3var2z@.offset = 0 then {
                            (* empty *)
                        } else if (l3var2z@.offset >= 74000B) then {
                            curVal.i := (moduleOffset - 40000B);
                            symTab[l3var2z@.offset] := [24,29] +
                                                         curVal.m * O77777.m;
                        } else (q) {
                            P0715(0, l3var2z@.offset);
                            (*=z-*)exit q(*=z+*)
                        }; (* 20342 *)
                        l3var2z@.offset := moduleOffset;
                    };
                    l3var2z := l2var16z;
                };
            }; (* while 20346 *)
            if (l3var5z.b) then
                error(16); (* errLblNotDefinedInBlock *);
            inSymbol;
            checkSymAndRead(COLON);
        }; (* 20355*)
        if (DebugInteractive IN optSflags.m) and
           (debugLine <> lineCnt) then {
            P0715(-1, 96 (* "P/DD" *));
            debugLine := lineCnt;
            arithMode := 1;
        };
        l3var4z.b := (SY IN [BEGINSY,CASESY,REPEATSY,SELECTSY]);
        if (l3var4z.b) then
            lineNesting := (lineNesting + (1));
(ident)
        if SY = IDENT then {
            if hashTravPtr <> NIL then {
                l3var6z := hashTravPtr@.cl;
                if l3var6z >= VARID then {
                    assignStatement(true);
                } else {
                    if l3var6z = ROUTINEID then {
                        if hashTravPtr@.f[3].s = NIL then {
                            l3var12z.q := hashTravPtr;
                            inSymbol;
                            if l3var12z.s@.f[1].i = 0 then {
                                standProc;
                                exit ident;
                            };
                            parseCallArgs(l3var12z.q);
                        } else {
                            assignStatement(false);
                        };
                    } else {
                        error(32); (* errWrongStartOfOperator *)
                        goto 8888;
                    }
                };
                formOperator(gen7);
            } else {
                error(errNotDefined);
8888:           skip(skipToSet + statEndSys);
            };
        } else (* 20431 *) if (SY = LPAREN) then {
            set146z := [];
            inSymbol;
            if (SY <> IDENT) then {
                error(errNoIdent);
                goto 8888;
            };
            new(l3var3z);
            padToLeft;
            disableNorm;
            with l3var3z@ do {
                next := strLabList;
                ident := curIdent;
                offset := moduleOffset;
                exitTarget := 0;
            };
            strLabList := l3var3z;
            inSymbol;
            checkSymAndRead(RPAREN);
            statement;
            P0715(0, l3var3z@.exitTarget);
            strLabList := strLabList@.next;
        } else (* 20463 *) if (SY = BEGINSY) then
(rep)   {
            inSymbol;
(skip)      {
                compoundStatement;
                if (SY <> ENDSY) then {
                    stmtName := ' BEGIN';
                    requiredSymErr(SEMICOLON);
                    reportStmtType(l3var9z);
                    skip(bigSkipSet);
                    if (SY IN statBegSys) then
                        goto skip;
                    if (SY <> SEMICOLON) then
                        exit rep;
                    goto rep;
                    (*=z-*)(q) exit rep;(*=z+*)
                };
            };
            inSymbol;
        } else (* 20511 *) if (SY = GOTOSY) then {
            inSymbol;
            if (SY <> INTCONST) then {
                if structBranch(true) then {
                    inSymbol;
                    exit;
                } else
                    goto 8888;
            };
            disableNorm;
            l3var2z := numLabList;
(loop)      if (l3var2z <> NIL) then with l3var2z@ do {
                if (id <> curToken) then {
                    l3var2z := next;
                } else {
                    if (curFrameRegTemplate = frame) then {
                        if (offset >= 40000B) then {
                            form1Insn(insnTemp[UJ] + offset);
                        } else {
                            formJumpOnCond(offset);
                        }
                    } else {
                        if offset = 0 then {
                            offset := symTabPos;
                            putToSymTab([]);
                        };
                        form3Insn(frame + (KMTJ + 13), KVTM+I14 + offset,
                                  getHelperProc(18(*"P/RC"*)) + (-64100000B));
                    };
                    exit loop;
                };
                goto loop;
            } else
                error(18); (* errLblNotDefined *)
            inSymbol;
        } else (* 20571 *) if (SY = IFSY) then {
            ifWhileStatement(THENSY);
            if (SY = ELSESY) then {
                l3var11z.i := 0;
                formJumpOnCond(l3var11z.i);
                P0715(0, l3var10z.i);
                l3var8z.i := arithMode;
                arithMode := 1;
                inSymbol;
                statement;
                P0715(0, l3var11z.i);
                if (l3var8z.i <> arithMode) then {
                    arithMode := 2;
                    disableNorm;
                }
            } else {
                P0715(0, l3var10z.i);
            }
        } else (* 20625 *) if (SY = WHILESY) then {
            set146z := [];
            disableNorm;
            padToLeft;
            l3var8z.i := moduleOffset;
            ifWhileStatement(DOSY);
            disableNorm;
            form1Insn(insnTemp[UJ] + l3var8z.i);
            P0715(0, l3var10z.i);
            arithMode := 1;
        } else (* 20644 *) if (SY = REPEATSY) then {
            set146z := [];
            disableNorm;
            padToLeft;
            l3var7z.i := moduleOffset;
            repeat
                inSymbol;
                statement;
            until (SY <> SEMICOLON);
            if (SY <> UNTILSY) then {
                requiredSymErr(UNTILSY);
                stmtName := 'REPEAT';
                reportStmtType(l3var9z);
                goto 8888;
            };
            disableNorm;
            expression;
            if (curExpr@.typ <> booleanType) then {
                error(errBooleanNeeded)
            } else {
                jumpTarget := l3var7z.i;
                formOperator(gen15);
            };
        } else (* 20676 *)
        if (SY = FORSY) then {
            set146z := [];
            forStatement;
        } else (* 20702 *) if (SY = SELECTSY) then {
            disableNorm;
            l3var5z.b := true;
            l3var11z.i := 0;
            (* 20707 *)
            repeat
                arithMode := 1;
                expression;
                if (curExpr@.typ <> booleanType) then {
                    error(errBooleanNeeded);
                } else {
                    jumpTarget := 0;
                    formOperator(gen15);
                    l3var10z.i := jumpTarget;
                };
                checkSymAndRead(COLON);
                statement;
                formJumpOnCond(l3var11z.i);
                l3var5z.b := l3var5z.b and (arithMode = 1);
                P0715(0, l3var10z.i);
            until (SY <> SEMICOLON);
            checkSymAndRead(ENDSY);
            P0715(0, l3var11z.i);
            if not l3var5z.b then {
                arithMode := 2;
                disableNorm;
            }
        } else (* 20751 *) if (SY = CASESY) then {
            caseStatement
        } else if (SY = WITHSY) then {
            withStatement;
            (*=z-*)(q) exit q;(*=z+*)
        }; (* 20757 *)
        if (l3var4z.b) then
            lineNesting := (lineNesting - (1));
        rollup(l3var1z);
        if (bool110z) then {
            bool110z := false;
            goto 8888;
        }
    }
    (* 20766 *)
}; (* statement *)
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
procedure outputObjFile;
var
    idx: integer;
{
    padToLeft;
    objBufIdx := objBufIdx - 1;
    for idx to objBufIdx do
        write(CHILD, objBuffer[idx]);
    lineStartOffset := moduleOffset;
    prevOpcode := 0;
}; (* outputObjFile *)
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
procedure defineRoutine;
var
    l3var1z, l3var2z, l3var3z, l3var4z, l3var5z, l3var6z, l3var7z: word;
{
    objBufIdx := 1;
    objBuffer[objBufIdx] := [];
    curInsnTemplate := insnTemp[XTA];
    bool48z := 22 IN l2arg2z@.flags;
    lineStartOffset := moduleOffset;
    l3var1z := ;
    int92z := 2;
    strp63z := NIL;
    arithMode := 1;
    set146z := [];
    set147z := [curProcNesting+1..6];
    set148z := set147z - [minel(set147z)];
    l3var7z.m := set147z;
    int53z := 0;
    set145z := [1:15] - set147z;
    if (curProcNesting <> 1) then
        parseDecls(2);
    l2var21z := l2var20z;
    if (SY <> BEGINSY) then
        requiredSymErr(BEGINSY);
    if 23 IN l2arg2z@.flags then {
        l3var5z := l2arg2z@.f[7];
        l3var4z.i := 3;
        if (l2arg2z@.f[3].s <> NIL) then
        l3var4z.i := 4;
        while (l3var5z.q <> l2arg2z) do {
            if (l3var5z.q@.cl = VARID) then {
                l3var2z := l3var5z.s@.f[3].s@.f[0];
                if (l3var2z.i <> (1)) then {
                    form3Insn(KVTM+I14 + l3var4z.i,
                              KVTM+I12 + l3var2z.i,
                              KVTM+I11 + l3var5z.s@.f[6].i);
                    formInsnAndLabel(getHelperProc(73)); (* "P/LNGPAR" *)
                }
            };
            l3var4z.i := l3var4z.i + 1;
            l3var5z := l3var5z.s@.f[5];
        }
    }; (* 21105 *)
    if checkBounds or not (NoStackCheck IN optSflags.m) then
        P0715(-1, 95); (* P/SC *)
    l3var2z.i := lineNesting;
    repeat
        statement;
        if (SY = SEMICOLON) then {
            if (curProcNesting = (1)) then
                requiredSymErr(PERIOD);
            inSymbol;
            l2bool8z := (SY IN blockBegSys);
            if not l2bool8z and not errors then
                error(84); (* errErrorInDeclarations *)
        } else {
            if (SY = PERIOD) and (curProcNesting = (1)) then
                l2bool8z := true
            else (q) {
                errAndSkip(errBadSymbol, skipToSet);
                l2bool8z := (SY IN blockBegSys);
                (*=z-*)exit q(*=z+*)
            }
        };
    until l2bool8z;
    l2arg2z@.flags := (set145z * [0:15]) + (l2arg2z@.flags - l3var7z.m);
    lineNesting := (l3var2z.i - (1));
    if (int53z <> 0) then
        P0715(0, int53z);
    if not bool48z and not doPMD and (l2var21z = 3) and
       (curProcNesting <> 1) and (set145z * [1:15] <> [1:15]) then {
        objBuffer[1] := [7:11,21:23,28,31];
        with l2arg2z@ do
            flags := flags + [25];
        if (objBufIdx = 2) then {
            objBuffer[1] := [0,1,3:5];
            putLeft := true;
        } else {
            l2arg2z@.f[10] := l3var1z;
            if 13 IN set145z then {
                curVal.i := minel([1:15] - set145z);
                besm(ASN64-24);
                l3var7z := ;
                objBuffer[2] := objBuffer[2] + [0,1,3,6,9] + l3var7z.m;
            } else {
                curVal.i := (13);
            };
            form1Insn(insnTemp[UJ] + indexreg[curVal.i]);
        }
    } else (* 21220 *) {
        if (l2var11z.i = 0) then
            l2var22z := 27
        else
            l2var22z := 28;
        form1Insn(getHelperProc(l2var22z) + (-I13-100000B));
        if (curProcNesting = (1)) then {
            parseDecls((2));
            if S3 IN optSflags.m then
                formInsnAndLabel(getHelperProc(78)); (* "P/PMDSET" *)
            form1Insn(insnTemp[UJ] + l3var1z.i);
            curVal.i := l2arg2z@.f[10].i - 40000B;
            symTab[74002B] := [24,29] + (curVal.m * halfWord);
        };
        curVal.i := l2var21z;
        if (curProcNesting <> (1)) then {
            curVal.i := curVal.i - 2;
            l3var7z := curVal;
            besm(ASN64-24);
            l3var7z := ;
            objBuffer[savedObjIdx] := objBuffer[savedObjIdx] +
                                       l3var7z.m + [0,1,2,3,4,6,8];
        }
    }; (* 21261 *)
    outputObjFile;
}; (* defineRoutine *)
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
procedure initScalars;
var
    l3var1z, noProgram, l3var3z, l3var4z: word;
    l3var5z, l3var6z: integer;
    l3var7z: word;
    l3var8z, l3var9z: integer;
    temptype: @types;
    l3var11z: word;
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
procedure regSysType(l4arg1z:integer; l4arg2z: @types);
{
    new(curIdRec = 5);
    curIdRec@ := [l4arg1z, 0, , l4arg2z, TYPEID];
    addToHashTab(curIdRec);
}; (* regSysType *)
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
procedure regSysEnum(l4arg1z: integer; l4arg2z: integer);
{
    new(curIdRec = 7);
    curIdRec@ := [l4arg1z, 48, , temptype, ENUMID, NIL, l4arg2z];
    addToHashTab(curIdRec);
}; (* regSysEnum *)
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
procedure regSysProc(l4arg1z: integer);
{
    new(curIdRec = 6);
    curIdRec@ := [l4arg1z, 0, , temptype, ROUTINEID, l3var9z];
    l3var9z := l3var9z + 1;
    addToHashTab(curIdRec);
}; (* registerSysProc *)
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
{ (* initScalars *)
    new(booleanType, kindScalar);
    with booleanType@ do {
        size := 1;
        bits := 1;
        k := kindScalar;
        numen := 2;
        start := 0;
    };
    new(integerType, kindScalar);
    with integerType@ do {
        size := 1;
        bits := (48);
        k := kindScalar;
        numen := 100000;
        start := -1;
        enums := NIL;
    };
    new(charType, kindScalar);
    with charType@ do {
        size := 1;
        bits := (8);
        k := kindScalar;
        numen := (256);
        start := -1;
        enums := NIL;
    };
    new(realType,kindReal);
    with realType@ do {
        size := 1;
        bits := (48);
        k := kindReal;
    };
    new(setType, kindSet);
    with setType@ do {
        size := 1;
        bits := (48);
        k := kindSet;
        base := integerType;
    };
    new(pointerType, kindPtr);
    with pointerType@ do {
        size := 1;
        bits := (48);
        k := kindPtr;
        base := pointerType;
    };
    new(textType, kindFile);
    with textType@ do {
        size := (30);
        bits := (48);
        k := kindFile;
        base := charType;
        elsize := (8);
    };
    new(alfaType,kindArray);
    with alfaType@ do {
        size := 1;
        bits := (48);
        k := kindArray;
        base := charType;
        range := temptype;
        pck := true;
        perword := (6);
        pcksize := (8);
    };
    smallStringType[6] := alfaType;
    regSysType(51566445474562C(*" INTEGER"*), integerType);
    regSysType(42575754454156C(*" BOOLEAN"*), booleanType);
    regSysType(43504162C(*"    CHAR"*), charType);
    regSysType(62454154C(*"    REAL"*), realType);
    regSysType(41544641C(*"    ALFA"*), alfaType);
    regSysType(64457064C(*"    TEXT"*), textType);
    temptype := booleanType;
    regSysEnum(64626545C(*"    TRUE"*), (1C));
    hashTravPtr := curIdRec;
    regSysEnum(4641546345C(*"   FALSE"*), (0C));
    curIdRec@.list := hashTravPtr;
    booleanType@.enums := curIdRec;
    maxSmallString := 0;
    for strLen := 2 to 5 do
        assignType(smallStringType[strLen]);
    maxSmallString := 6;
    new(curIdRec = 7);
    with curIdRec@ do {
        offset := 0;
        typ := integerType;
        cl := VARID;
        f[5].s := NIL;
        f[6].i := 7;
    };
    new(uVarPtr);
    with uVarPtr@ do {
        typ := integerType;
        op := GETVAR;
        f[2].q := curIdRec;
    };
    new(uProcPtr);
    with uProcPtr@ do {
        f[3].s := NIL;
        f[5].s := NIL;
        f[7].s := NIL;
        f[8].s := NIL;
        f[10].i := 0;
    };
    temptype := NIL;
    l3var9z := 0;
    for l3var5z := 0 to 28 do
        regSysProc(systemProcNames[l3var5z]);
    l3var9z := 0;
    temptype := realType;
    regSysProc(63616264C(*"    SQRT"*));
    regSysProc(635156C(*"     SIN"*));
    regSysProc(435763C(*"     COS"*));
    regSysProc(416243644156C(*"  ARCTAN"*));
    regSysProc(416243635156C(*"  ARCSIN"*));
    regSysProc(5456C(*"      LN"*));
    regSysProc(457060C(*"     EXP"*));
    regSysProc(414263C(*"     ABS"*));
    temptype := integerType;
    regSysProc(6462655643C(*"   TRUNC"*));
    temptype := booleanType;
    regSysProc(574444C(*"     ODD"*));
    temptype := integerType;
    regSysProc(576244C(*"     ORD"*));
    temptype := charType;
    regSysProc(435062C(*"     CHR"*));
    regSysProc(63654343C(*"    SUCC"*));
    regSysProc(60624544C(*"    PRED"*));
    temptype := booleanType;
    regSysProc(455746C(*"     EOF"*));
    temptype := pointerType;
    regSysProc(624546C(*"     REF"*));
    temptype := booleanType;
    regSysProc(45575456C(*"    EOLN"*));
    temptype := integerType;
    regSysProc(636162C(*"     SQR"*));
    regSysProc(6257655644C(*"   ROUND"*));
    regSysProc(43416244C(*"    CARD"*));
    regSysProc(5551564554C(*"   MINEL"*));
    temptype := pointerType;
    regSysProc(606462C(*"     PTR"*));
    l3var11z.i := (30);
    l3var11z.m := ((l3var11z.m * halfWord) + [24,27,28,29]);
    new(programObj);
    curVal.i := 576564606564C(*"  OUTPUT"*);
    l3var3z := curVal;
    curVal.i := 5156606564C(*"   INPUT"*);
    l3var4z := curVal;
    curVal.i := 5657606257476241C(*"NOPROGRA"*);
    noProgram := curVal;
    test1(PROGRAMSY, (skipToSet + [IDENT,LPAREN]));
    symTabPos := 74004B;
    with programObj@ do {
        if (SY = IDENT) then {
            curVal := curIdent;
            id := ;
            f[10].i := 0;
            symTab[74000B] := makeNameWithStars(true);
        } else {
            id.m := [3];
            error(errNoIdent);
            skip(skipToSet + [LPAREN]);
        };
    };
    if (curIdent <> noProgram) then {
        entryPtTable[1] := symTab[74000B];
        entryPtTable[3] :=
            [0,1,6,7,10,12,14:18,21:25,28,30,35,36,38,39,41];(*"PROGRAM "*)
        entryPtTable[2] := [1];
        entryPtTable[4] := [1];
        entryPtCnt := 5;
        write(CHILD, [0,4,6,9:12,23,28,29,33:36,46]);(*10 24 74001 00 30 74002*)
        moduleOffset := 40001B;
    } else {
        entryPtCnt := 1;
        moduleOffset := 40000B;
    };
    programObj@.f[7].s := NIL;
    programObj@.flags := [];
    objBufIdx := 1;
    temptype := integerType;
    defineRange(temptype, 1, 6);
    alfaType@.range := temptype;
    int93z := 0;
    inSymbol;
    test1(LPAREN, (skipToSet + [IDENT]));
    outputObjFile;
    outputFile := NIL;
    inputFile := NIL;
    externFileList := NIL;
    new(l3var7z.q);
    lineStartOffset := moduleOffset;
    with l3var7z.q@ do {
        id := l3var3z;
        offset := 0;
        typ := textType;
        cl := VARID;
        f[5].s := NIL;
    };
    curVal.i := 1257656460656412C(*"*OUTPUT*"*);
    l3var7z.s@.f[6].i := allocExtSymbol(l3var11z.m);
    addToHashTab(l3var7z.q);
    l3var5z := 1;
    while SY = IDENT do {
        l3var8z := 0;
        curVal := curIdent;
        l3var1z.m := makeNameWithStars(false);
        if (curIdent = l3var4z) then {
            new(inputFile);
            with inputFile@ do {
                id := curIdent;
                offset := 0;
                typ := textType;
                f[4].k := kindPtr;
                f[5].s := NIL;
            };
            curVal := l3var1z;
            inputFile@.f[6].i := allocExtSymbol(l3var11z.m);
            addToHashTab(inputFile);
            l3var8z := lineCnt;
        } else if (curIdent = l3var3z) then {
            outputFile := l3var7z.q;
            l3var8z := lineCnt;
        }; (* 21745 *)
        curExternFile := externFileList;
        while (curExternFile <> NIL) do {
            if (curExternFile@.id = curIdent) then {
                curExternFile := NIL;
                error(errIdentAlreadyDefined);
            } else {
                curExternFile := curExternFile@.next;
            };
        }; (* 21760 *)
        new(curExternFile, 5);
        with curExternFile@ do {
            id := curIdent;
            next := externFileList;
            f[4].i := l3var8z;
            offset := l3var1z.i;
        };
        if l3var8z <> 0 then {
            if (curIdent = l3var3z) then {
                fileForOutput := curExternFile;
            } else {
                fileForInput := curExternFile;
            }
        };
        externFileList := curExternFile;
        l3var6z := l3var5z;
        l3var5z := l3var5z + 1;
        inSymbol;
        if (charClass = MUL) then {
            l3var6z := l3var6z + 64;
            inSymbol;
        };
        if (SY = INTCONST) then {
            l3var6z := 1000B * curToken.i + l3var6z;
            if (octalMode = chr(0C)) and
               ((1) < curToken.i) and
               (curToken.i < 127) then {
                l3var6z := l3var6z + 128;
            } else if (octalMode = chr(1C)) and
                      (1000000B < curToken.i) and
                      (curToken.i < 1743671743B) then {
                l3var6z := (l3var6z + (256));
            } else (q) {
                error(76); (* errWrongNumberForExternalFile *)
                (*=z-*)exit q(*=z+*)
            };
            inSymbol;
        } else {
            l3var6z := 512;
        };
        curExternFile@.f[3].i := l3var6z;
        if (SY = COMMA) then
            inSymbol;
    }; (* 22042 *)
    checkSymAndRead(RPAREN);
    checkSymAndRead(SEMICOLON);
    if (outputFile = NIL) then {
        error(77); (* errNoOutput *)
        outputFile := l3var7z.q;
    };
    l3var6z := 40;
    repeat
        programme(l3var6z, programObj);
    until (SY = PERIOD);
    if (CH <> 'D') then {
        int92z := 0;
        int93z := ;
    } else {
        set147z := halfWord;
        dataCheck := false;
        statement;
    };
    readToPos80;
    curVal.i := l3var6z;
    symTab[74003B] := (helperNames[25] + [24,27,28,29]) +
                        (curVal.m * halfWord);
}; (* initScalars *)
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
procedure makeExtFile;
{
    new(l2var10z);
    with l2var10z@ do {
        f[0].s := ptr(ord(curExternFile));
        f[3] := l2var6z;
        f[2].e := curExpr;
    };
    curExpr := l2var10z;
}; (* makeExtFile *)
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
procedure parseParameters;
var
    l3var1z: word;
    l3var2z: @identrec;
    l3var3z: @identrec;
    l3var4z: idclass;
    l3var5z, l3var6z: integer;
    l3var7z: symbol;
    l3var8z: boolean;
    expType: @types;
{
    int92z := 0;
    l3var5z := 0;
    int93z := 0;
    inSymbol;
    l3var2z := NIL;
    if not (SY IN [IDENT,VARSY,FUNCSY,PROCSY]) then
        errAndSkip(errBadSymbol, (skipToSet + [IDENT,RPAREN]));
    int92z := 1;
    while (SY IN [IDENT,VARSY,FUNCSY,PROCSY]) do {
        l3var7z := SY;
        if (SY = IDENT) then
            l3var4z := VARID
        else if (SY = VARSY) then
            l3var4z := FORMALID
        else {
            l3var4z := ROUTINEID;
            (*=z-*)(q) exit q;(*=z+*)
        };
        l3var3z := NIL;
        if (SY = PROCSY) then
            expType := NIL
        else
            expType := integerType;
        l3var6z := 0;
        if (SY <> IDENT) then {
            int93z := 0;
            inSymbol;
        };
        repeat if (SY = IDENT) then {
            if (isDefined) then
                error(errIdentAlreadyDefined);
            l3var6z := (l3var6z + (1));
            new(l3var1z.q, 7);
            with l3var1z.q@ do {
                id := curIdent;
                offset := curFrameRegTemplate;
                cl := l3var4z;
                next := symHashTabBase[bucket];
                f[3].s := NIL;
                list := curIdRec;
                f[6].i := l2var18z;
            };
            symHashTabBase[bucket] := l3var1z.q;
            l2var18z := (l2var18z + (1));
            if (l3var2z = NIL) then
                curIdRec@.f[7] := l3var1z
            else
                l3var2z@.f[5] := l3var1z;
            l3var2z := l3var1z.q;
            if (l3var3z = NIL) then
                l3var3z := l3var1z.q;
            inSymbol;
        } else
            errAndSkip(errNoIdent, skipToSet + [RPAREN,COMMA,COLON]);
        l3var8z := (SY <> COMMA);
        if not l3var8z then {
            int93z := 0;
            inSymbol;
        };
        until l3var8z;
        if (l3var7z <> PROCSY) then {
            checkSymAndRead(COLON);
            parseTypeRef(expType, (skipToSet + [IDENT,RPAREN]));
            if (l3var7z <> VARSY) then {
                if (isFileType(expType)) then
                error(5) (*errSimpleTypeReq *)
                else if (expType@.size <> 1) then
                     l3var5z := l3var6z * expType@.size + l3var5z;
            };
            if (l3var3z <> NIL) then
                while (l3var3z <> curIdRec) do with l3var3z@ do {
                    f[3].t := expType;
                    l3var3z := list;
                };
        };

        if (SY = SEMICOLON) then {
            int93z := 0;
            inSymbol;
            if not (SY IN (skipToSet + [IDENT,VARSY,FUNCSY,PROCSY])) then
                errAndSkip(errBadSymbol, (skipToSet + [IDENT,RPAREN]));
        };
    };
    (* 22276 *)
    if (l3var5z <> (0)) then {
        curIdRec@.flags := (curIdRec@.flags + [23]);
        l3var6z := l2var18z;
        l2var18z := (l2var18z + l3var5z);
        l3var2z := curIdRec@.f[7].q;
        (* 22306 *)
        while (l3var2z <> curIdRec) do {
            if (l3var2z@.cl = VARID) then {
                l3var5z := l3var2z@.f[3].s@.f[0].i;
                if (l3var5z <> (1)) then {
                    l3var2z@.f[6].i := l3var6z;
                    l3var6z := (l3var6z + l3var5z);
                }
            };
            l3var2z := l3var2z@.list;
        };
    };
    (* 22322 *)
    checkSymAndRead (RPAREN);
}; (* parseParameters *)
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
procedure exitScope(var l3arg1z: array [0..127] of @identrec);
{
    for l2var19z := 0 to 127 do {
        l2var6z.q := l3arg1z[l2var19z];
        while (l2var6z.q <> NIL) and
              (l2var6z.q >= l2var3z.q) do
            l2var6z.q := l2var6z.q@.next;
        l3arg1z[l2var19z] := l2var6z.q;
    };
}; (* exitScope *)
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
{ (* programme *)
    l2var20z := l2arg1z;
    if (l2var20z = 0) then {
        inSymbol;
        initScalars;
        exit;
    };
    l2var1z.m := [];
    inTypeDef := false;
    l2var11z.i := 0;
    strLabList := NIL;
    lineNesting := (lineNesting + (1));
    l2var16z := numLabList;
    repeat
    if (SY = LABELSY) then {
        (*22367*)
        repeat
            inSymbol;
            if (SY <> INTCONST) then {
                requiredSymErr(INTCONST);
                goto 22421;
            };
            l2var15z := numLabList;
            while (l2var15z <> l2var16z) do {
                if (l2var15z@.id <> curToken) then {
                    l2var15z := l2var15z@.next;
                } else {
                    int97z := l2var15z@.line;
                    error(17); (* errLblAlreadyDefinedInLine *)
                    goto 22420;
                }
            };
            new(l2var15z);
            with l2var15z@ do {
                id := curToken;
                frame := curFrameRegTemplate;
                offset := 0;
                line := lineCnt;
                defined := false;
                next := numLabList;
            };
            numLabList := l2var15z;
22420:      inSymbol;
22421:      if not (SY IN [COMMA,SEMICOLON]) then
                errAndSkip(1, skipToSet + [COMMA,SEMICOLON]);
        until SY <> COMMA;
        if SY = SEMICOLON then
            inSymbol;
    }; (* 22432 *)
    if (SY = CONSTSY) then {
        parseDecls(0);
        while  (SY = IDENT) do {
            if (isDefined) then
                error(errIdentAlreadyDefined);
            new(l2var6z.s=7);
            l2var6z.s@ := [curIdent, curFrameRegTemplate,
                           symHashTabBase[bucket], , true, NIL];
            symHashTabBase[bucket] := l2var6z.q;
            inSymbol;
            if (charClass <> EQOP) then
                error(errBadSymbol)
            else
                inSymbol;
            with l2var6z.s@ do
                parseLiteral(f[3].t, f[6], true);
            if (l2var6z.s@.f[3].t = NIL) then {
                error(errNoConstant);
                l2var6z.s@.f[3].t := integerType;
                l2var6z.s@.f[6].i := 1;
            } else
                inSymbol;
            if (SY = SEMICOLON) then {
                int93z := 0;
                inSymbol;
                if not (SY IN (skipToSet + [IDENT])) then {
                    errAndSkip(errBadSymbol, skipToSet + [IDENT]);
                }
            } else {
                requiredSymErr(SEMICOLON);
            }
        }
    }; (* 22511 *)
    objBufIdx := 1;
    if (SY = TYPESY) then {
        inTypeDef := true;
        typelist := NIL;
        parseDecls(0);
        while SY = IDENT do {
            if isDefined then
                error(errIdentAlreadyDefined);
            l2var19z := bucket;
            l2var12z := curIdent;
            inSymbol;
            if (charClass <> EQOP) then
                error(errBadSymbol)
            else
                inSymbol;
            parseTypeRef(l2var13z, skipToSet + [SEMICOLON]);
            curIdent := l2var12z;
            if (knownInType(curIdRec)) then {
                l2var14z.t := curIdRec@.f[3].t;
                if (l2var14z.t@.base = booleanType) then {
                    if (l2var13z@.k <> kindPtr) then {
                        parseDecls(1);
                        error(78); (* errPredefinedAsPointer *)
                    };
                    l2var14z.t@.base := l2var13z@.base;
                } else {
                    l2var14z.s@.f[3].t := l2var13z;
                    curIdRec@.f[3].t := l2var13z;
                };
                P2672(typelist, curIdRec);
            } else {
                new(curIdRec=5);
                with curIdRec@ do {
                    id := l2var12z;
                    offset := curFrameRegTemplate;
                    f[3].t := l2var13z;
                    f[4].m := [];
                }
            }; (* 22574 *)
            curIdRec@.next := symHashTabBase[l2var19z];
            symHashTabBase[l2var19z] := curIdRec;
            int93z := 0;
            checkSymAndRead(SEMICOLON);
        }; (* 22602 *)
        while (typelist <> NIL) do {
            l2var12z := typelist@.id;
            curIdRec := typelist;
            parseDecls(1);
            error(79); (* errNotFullyDefined *)
            typelist := typelist@.next;
        }
    }; (* TYPESY -> 22612 *)
    inTypeDef := false;
    curExpr := NIL;
    if (SY = VARSY) then {
        parseDecls(0);
        (*22617*)
        repeat
            l2var6z.s := NIL;
            (*22620*)
            repeat
            if (SY = IDENT) then {
                new(curIdRec=7);
                if (isDefined) then
                    error(errIdentAlreadyDefined);
                with curIdRec@ do {
                    id := curIdent;
                    offset := curFrameRegTemplate;
                    next := symHashTabBase[bucket];
                    cl := VARID;
                    f[5].s := NIL;
                };
                symHashTabBase[bucket] := curIdRec;
                inSymbol;
                if (l2var6z.q = NIL) then
                    l2var6z.q := curIdRec
                else
                    l2var4z.q@.list := curIdRec;
                l2var4z.q := curIdRec;
            } else
                error(errNoIdent);
            if not (SY IN [COMMA,COLON]) then
                errAndSkip(1, skipToSet + [IDENT,COMMA]);
            l2bool8z := SY <> COMMA;
            if not l2bool8z then {
                int93z := 0;
                inSymbol;
            };
            (* 22663 -> 22620 *) until l2bool8z;
            checkSymAndRead(COLON);
            parseTypeRef(l2var13z, skipToSet + [IDENT,SEMICOLON]);
            l2var22z := l2var13z@.size;
            while l2var6z.s <> NIL do with l2var6z.q@ do {
                curIdRec := list;
                typ := l2var13z;
                f[5].s := NIL;
                l2bool8z := true;
                if (curProcNesting = (1)) then {
                    curExternFile := externFileList;
                    l2var12z := id;
                    curVal.i := l2var22z;
                    toAlloc := curVal.m * halfWord + [24,27,28,29];
                    while l2bool8z and (curExternFile <> NIL) do {
                        if (curExternFile@.id = l2var12z) then {
                            l2bool8z := false;
                            if (curExternFile@.f[4].i = 0) then {
                                curVal.i := curExternFile@.offset;
                                l2var6z.s@.f[6].i := allocExtSymbol(toAlloc);
                                curExternFile@.f[4].i := lineCnt;
                            }
                        } else {
                            curExternFile := curExternFile@.next;
                        }
                    }
                }; (* 22731 *)
                if (l2bool8z) then {
                    l2var6z.s@.f[6].i := l2var20z;
                    if (PASINFOR.listMode = 3) then {
                        write('VARIABLE ':25);
                        printTextWord(l2var6z.s@.f[0]);
                        writeln(' OFFSET (', curProcNesting:0, ') ',
                                l2var20z:5 oct, 'B. WORDS=',
                                l2var22z:5 oct, 'B');
                    };
                    l2var20z := (l2var20z + l2var22z);
                    curExternFile := NIL;
                }; (*22764*)
                if isFileType(l2var13z) then
                    makeExtFile;
                l2var6z.q := curIdRec;
            }; (* 22771 *)
            int93z := 0;
            checkSymAndRead(SEMICOLON);
            if (SY <> IDENT) and not (SY IN skipToSet) then
                errAndSkip(errBadSymbol, skipToSet + [IDENT]);
        (* 23001 -> 22617 *) until SY <> IDENT;
    }; (* VARSY -> 23003 *)
    if (curProcNesting = 1) then {
        l2var6z.q := outputFile;
        curExternFile := fileForOutput;
        makeExtFile;
        if (inputFile <> NIL) then {
            l2var6z.q := inputFile;
            curExternFile := fileForInput;
            makeExtFile;
        }
    };
    if (curExpr <> NIL) then {
        l2var11z.i := moduleOffset;
        formOperator(gen14);
    } else
        l2var11z.i := 0;
    if (curProcNesting = (1)) then {
        curExternFile := externFileList;
        while (curExternFile <> NIL) do {
            if (curExternFile@.f[4].i = (0)) then {
                error(80); (* errUndefinedExternFile *)
                printTextWord(curExternFile@.id);
                writeLN;
            };
            curExternFile := curExternFile@.next;
        }
    }; (*23035*)
    outputObjFile;
    while (SY = PROCSY) or (SY = FUNCSY) do {
        l2bool8z := SY = PROCSY;
        if (curFrameRegTemplate = 7) then {
            error(81); (* errProcNestingTooDeep *)
        };
        int93z := 0;
        inSymbol;
        if (SY <> IDENT) then {
            error(errNoIdent);
            curIdRec := uProcPtr;
            isPredefined := false;
        } else {
            if (isDefined) then with hashTravPtr@ do {
                if (cl = ROUTINEID) and
                   (f[5].s = NIL) and
                   (f[8].s <> NIL) and
                   ((typ = NIL) = l2bool8z) then {
                    isPredefined := true;
                } else {
                    isPredefined := false;
                    error(errIdentAlreadyDefined);
                    printErrMsg(82); (* errPrevDeclWasNotForward *)
                };
            } else
                isPredefined := false;
        }; (* 23103 *)
        if not isPredefined then {
            new(curIdRec);
            with curIdRec@ do {
                id := curIdent;
                offset := curFrameRegTemplate;
                next := symHashTabBase[bucket];
                typ := NIL;
                symHashTabBase[bucket] := curIdRec;
                cl := ROUTINEID;
                f[5].s := NIL;
                f[6].i := 0;
                f[7].s := NIL;
                f[8].s := NIL;
                if (declExternal) then
                    flags := [0:15,22]
                else
                    flags := [0:15];
                f[10].i := 0;
                curFrameRegTemplate := (curFrameRegTemplate + frameRegTemplate);
                if l2bool8z then
                    l2var18z := 3
                else
                    l2var18z := 4;
            };
            curProcNesting := (curProcNesting + (1));
            inSymbol;
            if ((6) < curProcNesting) then
                error(81); (* errProcNestingTooDeep *)
            if not (SY IN [LPAREN,SEMICOLON,COLON]) then
                errAndSkip(errBadSymbol, skipToSet + [LPAREN,SEMICOLON,COLON]);
            if (SY = LPAREN) then
                parseParameters;
            if not l2bool8z then {
                if (SY <> COLON) then
                    errAndSkip(106 (*:*), skipToSet + [SEMICOLON])
                else {
                    inSymbol;
                    parseTypeRef(curIdRec@.typ, skipToSet + [SEMICOLON]);
                    if (curIdRec@.typ@.size <> (1)) then
                        error(errTypeMustNotBeFile);
                }
            };
        } else (*23167*) {
            with hashTravPtr@ do {
                l2var18z := f[9].i;
                curFrameRegTemplate := (curFrameRegTemplate + indexreg[1]);
                curProcNesting := (curProcNesting + (1));
                if (l2var1z.q = hashTravPtr) then {
                    l2var1z := f[8];
                } else {
                    curIdRec := l2var1z.q;
                    while (hashTravPtr <> curIdRec) do {
                        l2var6z.q := curIdRec;
                        curIdRec := curIdRec@.f[8].q;
                    };
                    l2var6z.q@.f[8] := hashTravPtr@.f[8];
                }
            };
            hashTravPtr@.f[8].s := NIL;
            curIdRec := hashTravPtr@.f[7].q;
            if (curIdRec <> NIL) then {
                while (curIdRec <> hashTravPtr) do {
                    addToHashTab(curIdRec);
                    curIdRec := curIdRec@.list;
                }
            };
            curIdRec := hashTravPtr;
            setup(l2var3z.s);
            inSymbol;
        }; (* 23224 *)
        checkSymAndRead(SEMICOLON);
        with curIdRec@ do if (curIdent = litForward) then {
            if (isPredefined) then
                error(83); (* errRepeatedPredefinition *)
            f[9].i := l2var18z;
            f[8] := l2var1z;
            l2var1z.q := curIdRec;
        } else (* 23237 *) if (curIdent = litExternal) or
            (curIdent = litFortran) then {
            if (curIdent = litExternal) then {
                curVal.m := [20];
            } else if (checkFortran) then {
                curVal.m := [21,24];
                checkFortran := false;
            } else {
                curVal.m := [21];
                (*=z-*)(q) exit q;(*=z+*)
            };
            curIdRec@.flags := curIdRec@.flags + curVal.m;
        } else (* 23257 *) {
            repeat
                setup(l2var3z.s);
                programme(l2var18z, curIdRec);
                if not (SY IN [FUNCSY,PROCSY,BEGINSY]) then
                    errAndSkip(errBadSymbol, skipToSet);
            until SY IN [FUNCSY,PROCSY,BEGINSY];
            rollup(l2var3z.s);
            exitScope(symHashTabBase);
            exitScope(typeHashTabBase);
            goto 23301;
        }; (* 23277 *)
        inSymbol;
        checkSymAndRead(SEMICOLON);
23301:  l2var6z := curIdRec@.f[7];
        if (l2var6z.q <> NIL) then {
            while (l2var6z.q <> curIdRec) do {
                l2var3z.s := NIL;
                P2672(l2var3z.q, l2var6z.q);
                l2var6z := l2var6z.s@.f[5];
            }
        }; (* 23314 *)
        curFrameRegTemplate := (curFrameRegTemplate - indexreg[1]);
        curProcNesting := (curProcNesting - (1));
    }; (* 23320 *)
    if (SY <> BEGINSY) and
       (not allowCompat or not (SY IN blockBegSys)) then
        errAndSkip(84 (* errErrorInDeclarations *), skipToSet);
    until SY in statBegSys;
    if (l2var1z.c <> chr(0C)) then {
        error(85); (* errNotFullyDefinedProcedures *)
        while (l2var1z.c <> chr(0C)) do {
            printTextWord(l2var1z.s@.f[0]);
            l2var1z := l2var1z.s@.f[8];
        };
        writeLN;
    };
    defineRoutine;
    while (numLabList <> l2var16z) do {
        if not (numLabList@.defined) then {
            write(' ', numLabList@.id.i:0, ':');
            l2bool8z := false;
        };
        numLabList := numLabList@.next;
    };
    if not l2bool8z then {
        printTextWord(l2arg2z@.id);
        error(90); (* errLblDefinitionInBlock *)
    };
    l2arg1z := l2var21z;
    (* 23364 *)
}; (* programme *)
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
procedure initTables;
var
    idx, jdx: integer;
    l2unu3z, l2unu4z, l2unu5z: word;
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
procedure initInsnTemplates;
var
    l3var1z: insn;
    l3var2z: operator;
{
    for l3var1z := ATX to JADDM do
        insnTemp[l3var1z] := ord(l3var1z) * 10000B;
    insnTemp[ELFUN] := 500000B;
    jdx := KUTC;
    for l3var1z := UTC to VJM do {
        insnTemp[l3var1z] := jdx;
        jdx := (jdx + 100000B);
    };
    for idx to 15 do
        indexreg[idx] := idx * frameRegTemplate;
    int51z := insnTemp[UJ];
    for l3var2z := MUL to badop33 do {
        opFlags[l3var2z] := opf0;
        opToInsn[l3var2z] := 0;
        if (l3var2z IN [MUL, RDIVOP, PLUSOP, MINUSOP]) then {
            opToMode[l3var2z] := 3;
        } else if (l3var2z IN [IDIVOP, IMODOP]) then {
            opToMode[l3var2z] := 2;
        } else if (l3var2z IN [IMULOP, INTPLUS, INTMINUS, badop27]) then {
            opToMode[l3var2z] := 1;
        } else if (l3var2z IN [IDIVROP,badop30,badop31]) then {
            opToMode[l3var2z] := 4;
        } else (q) {
            opToMode[l3var2z] := 0;
            (*=z-*)exit q(*=z+*)
        }
    };
    opToInsn[MUL] := insnTemp[AMULX];
    opToInsn[RDIVOP] := insnTemp[ADIVX];
    opToInsn[IDIVOP] := 17; (* P/DI *)
    opToInsn[IMODOP] := 11; (* P/MD *)
    opToInsn[PLUSOP] := insnTemp[ADD];
    opToInsn[MINUSOP] := insnTemp[SUB];
    opToInsn[IMULOP] := insnTemp[AMULX];
    opToInsn[SETAND] := insnTemp[AAX];
    opToInsn[SETXOR] := insnTemp[AEX];
    opToInsn[SETOR] := insnTemp[AOX];
    opToInsn[INTPLUS] := insnTemp[ADD];
    opToInsn[INTMINUS] := insnTemp[SUB];
    opToInsn[IDIVROP] := 67; (* P/IS *)
    opToInsn[badop27] := 22; (* P/II unused, undefined *)
    opToInsn[badop30] := 23; (* P/RR *)
    opToInsn[badop31] := 24; (* P/RI *)
    opToInsn[MKRANGE] := 61; (* P/PI *)
    opToInsn[SETSUB] := insnTemp[AAX];
    opFlags[AMPERS] := opf2;
    opFlags[IDIVOP] := opf4;
    opFlags[OROP] := opf3;
    opFlags[IMULOP] := opf6;
    opFlags[IMODOP] := opf5;
    opFlags[badop27] := opf1;
    opFlags[badop30] := opf1;
    opFlags[badop31] := opf1;
    opFlags[MKRANGE] := opf1;
    opFlags[IDIVROP] := opf1;
    opFlags[badop33] := opf7;
    opFlags[SETSUB] := opf8;
    for jdx := 0 to 6 do {
        funcInsn[jdx] := (500000B + jdx);
    }
(* 23516 *)}; (* initInsnTemplates *)
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
procedure regKeywords;
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
procedure regResWord(l4arg1z: integer);
var
    kw: @kword;
    l4var2z: word;
{
    curVal.i := l4arg1z;
    curVal.m := curVal.m * hashMask.m;
    mapai(curVal.a, curVal.i);
    l4var2z.i := l4arg1z;
    new(kw);
    with kw@ do {
        w := l4var2z;
        sym := SY;
        op := charClass;
        next := kwordHashTabBase[curVal.i];
    };
    kwordHashTabBase[curVal.i] := kw;
    if (charClass = NOOP) then {
        SY := succ(SY);
    } else {
        charClass := succ(charClass);
    }
}; (* regResWord *)
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
{ (* regKeywords *)
    SY := MULOP;
    charClass := AMPERS;
    regResWord(415644C(*"     AND"*));
    regResWord(445166C(*"     DIV"*));
    regResWord(555744C(*"     MOD"*));
    SY := GTSY; (* reused as NILSY *)
    charClass := NOOP;
    regResWord(565154C(*"     NIL"*));
    SY := ADDOP;
    charClass := OROP;
    regResWord(5762C(*"      OR"*));
    SY := RELOP;
    charClass := INOP;
    regResWord(5156C(*"      IN"*));
    SY := NOTSY;
    charClass := NOOP;
    regResWord(565764C(*"     NOT"*));
    SY := LABELSY;
    charClass := NOOP;
    for idx := 0 to 29 do
        regResWord(resWordNameBase[idx]);
}; (* regKeywords *)
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
procedure initArrays;
var
    l3var1z, l3var2z: word;
{
    FcstCnt := 0;
    FcstCount := 0;
    for idx := 3 to 6 do {
        l3var2z.i := (idx - (2));
        for jdx to l3var2z.i do
            frameRestore[idx][jdx] := 0;
    };
    for idx to 99 do
        helperMap[idx] := 0;
}; (* initArrays *)
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
procedure initSets;
{
    skipToSet := blockBegSys + statBegSys - [CASESY];
    bigSkipSet := skipToSet + statEndSys;
}; (* initSets *)
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
{ (* initTables *)
    initArrays;
    initInsnTemplates;
    initSets;
    unpack(pasinfor.a3@, iso2text, '_052'); (* '*' *)
    rewrite(CHILD);
    for jdx to 10 do
        put(CHILD);
    for idx := 0 to 127 do {
        symHashTabBase[idx] := NIL;
        typeHashTabBase[idx] := ;
        kwordHashTabBase[idx] := ;
    };
    regKeywords;
    numLabList := NIL;
    totalErrors := 0;
    heapCallsCnt := 0;
    putLeft := true;
    bool102z := true;
    curFrameRegTemplate := frameRegTemplate;
    curProcNesting := 1;
}; (* initTables *)
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
procedure finalize;
var
    idx, cnt, unused: integer;
    sizes: array [1..10] of @integer;
{
    sizes[1] := ptr(1);
    sizes[2] := ptr(symTabPos - 74000B - 1);
    sizes[5] := ptr(longSymCnt);
    sizes[6] := ptr(moduleOffset - 40000B);
    sizes[8] := ptr(FcstCnt);
    sizes[3] := ptr(0);
    sizes[4] := ;
    sizes[7] := ;
    sizes[9] := ptr(int92z);
    sizes[10] := ptr(int93z);
    curVal.i := moduleOffset - 40000B;
    symTab[74001B] := [24,29] + curVal.m - intZero;
    reset(FCST);
    while not eof(FCST) do {
        write(CHILD, FCST@);
        get(FCST);
    };
    curVal.i := (symTabPos - 70000B) * 100000000B;
    for cnt to longSymCnt do {
        idx := longSymTabBase[cnt];
        symTab[idx] := (symTab[idx] + (curVal.m * [9:23]));
        curVal.i := (curVal.i + 100000000B);
    };
    symTabPos := (symTabPos - (1));
    for cnt := 74000B to symTabPos do
        write(CHILD, symTab[cnt]);
    for cnt to longSymCnt do
        write(CHILD, longSyms[cnt]);
    if (allowCompat) then {
        write((lineCnt - 1):6, ' LINES STRUCTURE ');
        for idx to 10 do
            write(ord(sizes[idx]):0, ' ');
        writeln;
    };
    entryPtTable[entryPtCnt] := [];
    pasinfor.entryptr@ := entryPtTable;
    pasinfor.sizes := sizes;
}; (* finalize *)
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
procedure initOptions;
{
    pasinfor.startOffset := pasinfor.startOffset - 16384;
    commentModeCH := ' ';
    lineNesting := 0;
    maxLineLen := 72;
    CH := ' ';
    linePos := 0;
    prevErrPos := 0;
    errsInLine := 0;
    lineCnt := 1;
    checkFortran := false;
    bool110z := false;
    int93z := 1;
    int92z := 1;
    moduleOffset := 16384;
    lineStartOffset := ;
    int94z := 1;
    bool47z := false;
    dataCheck := ;
    heapSize := 100;
    bool49z := true;
    atEOL := false;
    curVal.m := pasinfor.flags;
    besm(ASN64 - 39);
    besm(ASN64 + 45);
    optSflags := ;
    doPMD := not (42 in curVal.m);
    checkTypes := true;
    fixMult := true;
    fuzzReals := true;
    pseudoZ := ;
    checkBounds := not (44 in curVal.m);
    declExternal := false;
    errors := false;
    allowCompat := false;
    litExternal.i := 4570644562564154C;
    litForward.i := 46576267416244C;
    litFortran.i := 46576264624156C;
    fileBufSize := 1;
    charEncoding := 2;
    chain := NIL;
    litOct.i := 574364C;
    longSymCnt := 0;
    pasinfor.errors@ := true;
    extSymAdornment := 0;
    symTabCnt := 0;
}; (* initOptions *)
%
{ (* main *)
    if PASINFOR.listMode <> 0 then
        writeln(boilerplate);
    initOptions;
    curInsnTemplate := 0;
    initTables;
    programme(curInsnTemplate, hashTravPtr);
    if errors then {
9999:   writeln(' IN ', (lineCnt-1):0, ' LINES ',
            totalErrors:0, ' ERRORS');
    } else {
        finalize;
        PASINFOR.errors@ := false;
    }
}
.data
    frameRegTemplate := 04000000B;
    constRegTemplate := I8;
    disNormTemplate :=  KNTR+7;
    blockBegSys := [LABELSY, CONSTSY, TYPESY, VARSY, FUNCSY, PROCSY, BEGINSY];
    statBegSys :=  [BEGINSY, IFSY, CASESY, REPEATSY, WHILESY, FORSY, WITHSY,
                    GOTOSY, SELECTSY];
    O77777 := (77777C);
    intZero := 0;
    unused138z := (63000000C);
    extSymMask := (43000000C);
    halfWord := [24:47];
    hashMask := 203407C;
    statEndSys := [SEMICOLON, ENDSY, ELSESY, UNTILSY];
    lvalOpSet := [GETELT, GETVAR, op36, op37, GETFIELD, DEREF, FILEPTR];
    resWordNameBase :=
        5441424554C             (*"   LABEL"*),
        4357566364C             (*"   CONST"*),
        64716045C               (*"    TYPE"*),
        664162C                 (*"     VAR"*),
        4665564364515756C       (*"FUNCTION"*),
        6062574345446562C       (*"PROCEDUR"*),
        634564C                 (*"     SET"*),
        604143534544C           (*"  PACKED"*),
        4162624171C             (*"   ARRAY"*),
        624543576244C           (*"  RECORD"*),
        46515445C               (*"    FILE"*),
        4245475156C             (*"   BEGIN"*),
        5146C                   (*"      IF"*),
        43416345C               (*"    CASE"*),
        624560454164C           (*"  REPEAT"*),
        6750515445C             (*"   WHILE"*),
        465762C                 (*"     FOR"*),
        67516450C               (*"    WITH"*),
        47576457C               (*"    GOTO"*),
        455644C                 (*"     END"*),
        45546345C               (*"    ELSE"*),
        6556645154C             (*"   UNTIL"*),
        5746C                   (*"      OF"*),
        4457C                   (*"      DO"*),
        6457C                   (*"      TO"*),
        445767566457C           (*"  DOWNTO"*),
        64504556C               (*"    THEN"*),
        634554454364C           (*"  SELECT"*),
        60625747624155C         (*" PROGRAM"*),
        576450456263C           (*"  OTHERS"*);
%
    charSymTabBase := NOSY:128;
    chrClassTabBase := NOOP:128;
    charSymTabBase['0'] := INTCONST:10;
    chrClassTabBase['0'] := ALNUM:10;
    charSymTabBase['A'] := IDENT:26;
    chrClassTabBase['A'] := ALNUM:26;
    charSymTabBase['ะฎ'] := IDENT:31;
    chrClassTabBase['ะฎ'] := ALNUM:31;
    funcInsn[fnABSR] := KAMX;
    funcInsn[fnTRUNC] := KADD+ZERO;
    funcInsn[fnODD] := KAAX+E1;
    funcInsn[fnORD] := KAOX+ZERO;
    funcInsn[fnCHR] := KAAX+MANTISSA;
    funcInsn[fnSUCC] := KARX+E1;
    funcInsn[fnPRED] := KSUB+E1;
    funcInsn[fnSQRR] := macro + mcSQRR;
    funcInsn[fnROUND] := macro + mcROUND;
    funcInsn[fnCARD] := macro + mcCARD;
    funcInsn[fnMINEL] := macro + mcMINEL;
    funcInsn[fnPTR] := KAAX+MANTISSA;
    funcInsn[fnABSI] := KAMX;
    funcInsn[fnSQRI] := macro + mcSQRI;
    iAddOpMap[PLUSOP] := INTPLUS, INTMINUS;
    setOpMap[PLUSOP] := SETOR, SETSUB;
    imulOpMap := IMULOP, IDIVROP;
    setOpMap[MUL] := SETAND, SETXOR;
    charSymTabBase[chr(27)] := CHARCONST;
    charSymTabBase[''''] := CHARCONST;
    charSymTabBase['_'] := REALCONST;
    charSymTabBase['<'] := LTSY;
    charSymTabBase['>'] := GTSY;
    chrClassTabBase['+'] := PLUSOP;
    chrClassTabBase['-'] := MINUSOP;
    chrClassTabBase['*'] := MUL;
    chrClassTabBase['/'] := RDIVOP;
    chrClassTabBase['='] := EQOP;
    chrClassTabBase['&'] := AMPERS;
    chrClassTabBase['รท'] := IDIVOP;
    chrClassTabBase['โจ'] := OROP;
    chrClassTabBase['>'] := GTOP;
    chrClassTabBase['<'] := LTOP;
    chrClassTabBase['#'] := NEOP;
    chrClassTabBase['='] := EQOP;
    chrClassTabBase['ร'] := MUL;
    chrClassTabBase['โค'] := LEOP;
    chrClassTabBase['โฅ'] := GEOP;
    charSymTabBase['โค'] := RELOP;
    charSymTabBase['โฅ'] := RELOP;
    charSymTabBase['+'] := ADDOP;
    charSymTabBase['-'] := ADDOP;
    charSymTabBase['โจ'] := ADDOP;
    charSymTabBase['*'] := MULOP;
    charSymTabBase['/'] := MULOP;
    charSymTabBase['&'] := MULOP;
    charSymTabBase['ร'] := MULOP;
    charSymTabBase[','] := COMMA;
    charSymTabBase['.'] := PERIOD;
    charSymTabBase[chr(22)] := ARROW;
    charSymTabBase['@'] := ARROW;
    charSymTabBase['^'] := ARROW;
    charSymTabBase['('] := LPAREN;
    charSymTabBase[')'] := RPAREN;
    charSymTabBase[';'] := SEMICOLON;
    charSymTabBase['['] := LBRACK;
    charSymTabBase[']'] := RBRACK;
    charSymTabBase['#'] := RELOP;
    charSymTabBase['='] := RELOP;
    charSymTabBase[':'] := COLON;
    charSymTabBase['รท'] := MULOP;
    charSymTabBase['~'] := NOTSY;
    helperNames :=
        6017210000000000C      (*"P/1     "*),
        6017220000000000C      (*"P/2     "*),
        6017230000000000C      (*"P/3     "*),
        6017240000000000C      (*"P/4     "*),
        6017250000000000C      (*"P/5     "*),
        6017260000000000C      (*"P/6     "*),
        6017434100000000C      (*"P/CA    "*),
        6017455700000000C      (*"P/EO    "*),
        6017636300000000C      (*"P/SS    "*),
(*10*)  6017455400000000C      (*"P/EL    "*),
        6017554400000000C      (*"P/MD    "*),
        6017555100000000C      (*"P/MI    "*),
        6017604100000000C      (*"P/PA    "*),
        6017655600000000C      (*"P/UN    "*),
        6017436000000000C      (*"P/CP    "*),
        6017414200000000C      (*"P/AB    "*),
        6017445100000000C      (*"P/DI    "*),
        6017624300000000C      (*"P/RC    "*),
        6017454100000000C      (*"P/EA    "*),
(*20*)  6017564100000000C      (*"P/NA    "*),
        6017424100000000C      (*"P/BA    "*),
        6017515100000000C      (*"P/II   u"*),
        6017626200000000C      (*"P/RR    "*),
        6017625100000000C      (*"P/RI    "*),
        6017214400000000C      (*"P/1D    "*),
        6017474400000000C      (*"P/GD    "*),
        6017450000000000C      (*"P/E     "*),
        6017454600000000C      (*"P/EF    "*),
        6017604600000000C      (*"P/PF    "*),
(*30*)  6017474600000000C      (*"P/GF    "*),
        6017644600000000C      (*"P/TF    "*),
        6017624600000000C      (*"P/RF    "*),
        6017566700000000C      (*"P/NW    "*),
        6017446300000000C      (*"P/DS    "*),
        6017506400000000C      (*"P/HT    "*),
        6017675100000000C      (*"P/WI    "*),
        6017676200000000C      (*"P/I14    "*),
        6017674300000000C      (*"P/WC    "*),
        6017412600000000C      (*"P/A6    "*),
(*40*)  6017412700000000C      (*"P/A7    "*),
        6017677000000000C      (*"P/WX    "*),
        6017675700000000C      (*"P/WO    "*),
        6017436700000000C      (*"P/CW    "*),
        6017264100000000C      (*"P/6A    "*),
        6017274100000000C      (*"P/7A    "*),
        6017675400000000C      (*"P/WL    "*),
        6017624451000000C      (*"P/RDI   "*),
        6017624462000000C      (*"P/RDR   "*),
        6017624443000000C      (*"P/RDC   "*),
(*50*)  6017624126000000C      (*"P/RA6   "*),
        6017624127000000C      (*"P/RA7   "*),
        6017627000000000C      (*"P/RX   u"*),
        6017625400000000C      (*"P/RL    "*),
        6017675754560000C      (*"P/WOLN  "*),
        6017625154560000C      (*"P/RILN  "*),
        6017626200000000C      (*"P/RR    "*),
        6017434500000000C      (*"P/CE    "*),
        6017646200000000C      (*"P/TR    "*),
        6017546600000000C      (*"P/LV    "*),
(*60*)  6017724155000000C      (*"P/ZAM  u"*),
        6017605100000000C      (*"P/PI    "*),
        6017426000000000C      (*"P/BP    "*),
        6017422600000000C      (*"P/B6    "*),
        6017604200000000C      (*"P/PB    "*),
        6017422700000000C      (*"P/B7    "*),
        6017515600000000C      (*"P/IN    "*),
        6017516300000000C      (*"P/IS    "*),
        6017444100000000C      (*"P/DA    "*),
        6017435700000000C      (*"P/CO    "*),
(*70*)  6017516400000000C      (*"P/IT    "*),
        6017435300000000C      (*"P/CK    "*),
        6017534300000000C      (*"P/KC    "*),
        6017545647604162C      (*"P/LNGPAR"*),
        6017544441620000C      (*"P/LDAR  "*),
        6017544441625156C      (*"P/LDARIN"*),
        6017202043000000C      (*"P/00C   "*),
        6017636441620000C      (*"P/STAR  "*),
        6017605544634564C      (*"P/PMDSET"*),
        6017435100000000C      (*"P/CI    "*),
(*80*)  6041514200000000C      (*"PAIB    "*),
        6017674100000000C      (*"P/WA    "*),
        6361626412000000C      (*"SQRT*   "*),
        6351561200000000C      (*"SIN*    "*),
        4357631200000000C      (*"COS*    "*),
        4162436441561200C      (*"ARCTAN* "*),
        4162436351561200C      (*"ARCSIN* "*),
        5456120000000000C      (*"LN*     "*),
        4570601200000000C      (*"EXP*    "*),
        6017456100000000C      (*"P/EQ    "*),
(*90*)  6017624100000000C      (*"P/RA    "*),
        6017474500000000C      (*"P/GE    "*),
        6017554600000000C      (*"P/MF    "*),
        6017465500000000C      (*"P/FM    "*),
        6017565600000000C      (*"P/NN    "*),
        6017634300000000C      (*"P/SC    "*),
        6017444400000000C      (*"P/DD    "*),
        6017624500000000C      (*"P/RE    "*);
    systemProcNames :=
(*0*)   606564C                (*"     PUT"*),
        474564C                (*"     GET"*),
        62456762516445C        (*" REWRITE"*),
        6245634564C            (*"   RESET"*),
        564567C                (*"     NEW"*),
        44516360576345C        (*" DISPOSE"*),
        50415464C              (*"    HALT"*),
        63645760C              (*"    STOP"*),
        6345646560C            (*"   SETUP"*),
        625754546560C          (*"  ROLLUP"*),
(*10*)  6762516445C            (*"   WRITE"*),
        67625164455456C        (*" WRITELN"*),
        62454144C              (*"    READ"*),
        624541445456C          (*"  READLN"*),
        45705164C              (*"    EXIT"*),
        4445426547C            (*"   DEBUG"*),
        42456355C              (*"    BESM"*),
        5541605141C            (*"   MAPIA"*),
        5541604151C            (*"   MAPAI"*),
        604353C                (*"     PCK"*),
(*20*)  6556604353C            (*"   UNPCK"*),
        60414353C              (*"    PACK"*),
        655660414353C          (*"  UNPACK"*),
        5760455644C            (*"   OPEND"*),
        44455444C              (*"    DELD"*),
        56456744C              (*"    NEWD"*),
        60656444C              (*"    PUTD"*),
        47456444C              (*"    GETD"*),
        55574444C              (*"    MODD"*),
        46515644C              (*"    FIND"*);
end
*to perso:670000
*end file
``````
ะะะะะะฆ
